---

- name: Initialize new LDAP directory
  hosts: [ 'debops_service_slapd' ]
  become: True

  environment: '{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}'

  vars_prompt:

    - name: 'admin_plaintext_password'
      prompt: 'New password for your LDAP user account'
      private: True

  vars:

    # Username of the current Ansible user on the Ansible Controller
    admin_user: '{{ lookup("env", "USER") }}'

    # Information from the 'passwd' database for the current user on the
    # Ansible Controller
    admin_gecos: '{{ getent_passwd[admin_user][3] }}'

    # SSH public keys in the 'ssh-agent'
    admin_sshkeys: "{{ lookup('pipe','ssh-add -L | grep ^ssh || cat ~/.ssh/*.pub || true').split('\n') }}"

    # Password of the administrator account, stored in the Password Store on
    # the Ansible Controller
    admin_saved_password: '{{ lookup("passwordstore", ldap__admin_passwordstore_path
                                     + "/" + (admin_dn | to_uuid)
                                     + " create=true overwrite=true userpass="
                                     + admin_plaintext_password) }}'

    # The Relative Distinguished Name of the administrator account in the LDAP
    # directory
    admin_rdn: 'uid={{ admin_user }}'

    # The Distinguished Name of the administrator account
    admin_dn: '{{ ([ admin_rdn, ldap__people_rdn ] + ldap__base_dn) | join(",") }}'

    # Override the check if the LDAP support is enabled on the host, we don't
    # care at this point
    ldap__enabled: True

    # Override the check if the LDAP support is configured on the host, we
    # don't care at this point
    ldap__configured: True

    # Run the 'ldap' role in dependent mode; don't configure anything related
    # to LDAP on the host iself, perform only LDAP tasks
    ldap__dependent_play: True

    # Override the list of LDAP servers detected automatically by the role
    ldap__servers: [ '{{ ansible_fqdn }}' ]

    # Use the RootDN credential to access the LDAP directory directly via the
    # superuser account
    ldap__admin_binddn: '{{ ([ "cn=admin" ] + ldap__base_dn) | join(",") }}'

    # Use the RootPW credential generated by the 'debops.slapd' role to
    # authenticate to the LDAP directory
    ldap__admin_bindpw: '{{ lookup("password", secret + "/slapd/credentials/"
                                   + ldap__admin_binddn | to_uuid
                                   + ".password").split()[0] }}'

    ldap__dependent_tasks:

      - name: 'Remove the default cn=admin object'
        dn: '{{ [ "cn=admin" ] + ldap__base_dn }}'
        state: 'absent'
        entry_state: 'absent'

      - name: 'Create the {{ ldap__groups_rdn }} object'
        dn: '{{ [ ldap__groups_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalUnit'

      - name: 'Create the {{ ldap__machines_rdn }} object'
        dn: '{{ [ ldap__machines_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalUnit'

      - name: 'Create the {{ ldap__hosts_rdn }} object'
        dn: '{{ [ ldap__hosts_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalUnit'

      - name: 'Create the {{ ldap__people_rdn }} object'
        dn: '{{ [ ldap__people_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalUnit'

      - name: 'Create the {{ ldap__roles_rdn }} object'
        dn: '{{ [ ldap__roles_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalUnit'

      - name: 'Create the {{ ldap__services_rdn }} object'
        dn: '{{ [ ldap__services_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalUnit'

      - name: 'Create the ou=Password Policies object'
        dn: '{{ [ "ou=Password Policies" ] + ldap__base_dn }}'
        objectClass: 'organizationalUnit'

        # Refer to slapo-ppolicy(5) for details
      - name: 'Create the cn=Default Password Policy object'
        dn: '{{ [ "cn=Default Password Policy", "ou=Password Policies" ] + ldap__base_dn }}'
        objectClass: [ 'namedObject', 'pwdPolicy' ]
        attributes:
          cn: 'Default Password Policy'
          pwdAttribute: 'userPassword'
          pwdMaxAge: '0'
          pwdInHistory: '5'
          pwdCheckQuality: '1'
          pwdMinLength: '10'
          pwdExpireWarning: '3600'
          pwdGraceAuthNLimit: '5'
          pwdLockout: 'FALSE'
          pwdLockoutDuration: '300'
          pwdMaxFailure: '5'
          pwdFailureCountInterval: '0'
          pwdMustChange: 'FALSE'
          pwdAllowUserChange: 'TRUE'
          pwdSafeModify: 'FALSE'

      - name: 'Create personal account for {{ admin_gecos.split(",")[0]|d(admin_user) }}'
        dn: '{{ [ admin_rdn, ldap__people_rdn ] + ldap__base_dn }}'
        objectClass: [ 'inetOrgPerson', 'posixAccount', 'shadowAccount',
                       'posixGroup', 'posixGroupId', 'ldapPublicKey',
                       'authorizedServiceObject', 'hostObject' ]
        attributes:

          # inetOrgPerson attributes
          commonName:   '{{ admin_gecos.split(",")[0]|d(admin_user) }}'
          givenName:    '{{ (admin_gecos.split(",")[0].split()[0]) if (admin_gecos|d() and " " in admin_gecos) else "" }}'
          surname:      '{{ (admin_gecos.split(",")[0].split()[1]) if (admin_gecos|d() and " " in admin_gecos) else admin_gecos }}'
          userPassword: '{{ admin_plaintext_password }}'

          # POSIX attributes
          uid:           '{{ admin_rdn.split("=")[1] }}'
          gid:           '{{ admin_rdn.split("=")[1] }}'
          uidNumber:     '{{ ldap__groupid_max|int + 1 }}'
          gidNumber:     '{{ ldap__groupid_max|int + 1 }}'
          homeDirectory: '{{ ldap__home + "/" + admin_user }}'
          loginShell:    '{{ ldap__shell }}'

          # Other attributes
          authorizedService: 'all'
          host: 'posix:all'
          sshPublicKey: '{{ admin_sshkeys }}'

      - name: 'Create cn=LDAP Administrator role'
        dn: '{{ [ "cn=LDAP Administrator", ldap__roles_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalRole'
        attributes:
          cn: 'LDAP Administrator'
          roleOccupant: '{{ admin_dn }}'
          description: 'People responsible for LDAP infrastructure'

      - name: 'Create cn=LDAP Replicator role'
        dn: '{{ [ "cn=LDAP Replicator", ldap__roles_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalRole'
        attributes:
          cn: 'LDAP Replicator'
          description: 'Service accounts used for LDAP replication'

      - name: 'Create cn=LDAP Editor role'
        dn: '{{ [ "cn=LDAP Editor", ldap__roles_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalRole'
        attributes:
          cn: 'LDAP Editor'
          description: 'People responsible for LDAP contents'

      - name: 'Create cn=UNIX Administrators group'
        dn: '{{ [ "cn=UNIX Administrators", ldap__groups_rdn ] + ldap__base_dn }}'
        objectClass: [ 'groupOfNames', 'posixGroup', 'posixGroupId',
                       'authorizedServiceObject', 'hostObject' ]
        attributes:
          cn: 'UNIX Administrators'
          gid: 'admins'
          gidNumber: '{{ ldap__groupid_min }}'
          member: '{{ admin_dn }}'
          owner: '{{ admin_dn }}'
          description: 'People responsible for UNIX-like infrastructure'
          host: 'posix:all'

      - name: 'Create cn=Account Administrator role'
        dn: '{{ [ "cn=Account Administrator", ldap__roles_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalRole'
        attributes:
          cn: 'Account Administrator'
          description: 'People responsible for personal accounts'

      - name: 'Create cn=Password Reset Agent role'
        dn: '{{ [ "cn=Password Reset Agent", ldap__roles_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalRole'
        attributes:
          cn: 'Password Reset Agent'
          description: 'Services that can perform password changes on behalf of users'

      - name: 'Create cn=SMS Gateway role'
        dn: '{{ [ "cn=SMS Gateway", ldap__roles_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalRole'
        attributes:
          cn: 'SMS Gateway'
          description: 'Devices which send SMS messages to mobile numbers'

      - name: 'Create cn=Hidden Object Viewer role'
        dn: '{{ [ "cn=Hidden Object Viewer", ldap__roles_rdn ] + ldap__base_dn }}'
        objectClass: 'organizationalRole'
        attributes:
          cn: 'Hidden Object Viewer'
          memberOf: '{{ ([ "cn=Hidden Objects", ldap__groups_rdn ] + ldap__base_dn) | join(",") }}'
          description: 'LDAP objects which can see hidden objects'

      - name: 'Create cn=Hidden Objects group'
        dn: '{{ [ "cn=Hidden Objects", ldap__groups_rdn ] + ldap__base_dn }}'
        objectClass: 'groupOfNames'
        attributes:
          cn: 'Hidden Objects'
          member:
            - '{{ ([ "cn=Hidden Objects", ldap__groups_rdn ] + ldap__base_dn) | join(",") }}'
            - '{{ ([ "cn=Hidden Object Viewer", ldap__roles_rdn ] + ldap__base_dn) | join(",") }}'
          memberOf: '{{ ([ "cn=Hidden Objects", ldap__groups_rdn ] + ldap__base_dn) | join(",") }}'
          owner: '{{ admin_dn }}'
          description: 'LDAP objects which are accessible only by privileged accounts'

      - name: 'Create cn=UNIX SSH users group'
        dn: '{{ [ "cn=UNIX SSH users", ldap__groups_rdn ] + ldap__base_dn }}'
        objectClass: [ 'groupOfNames', 'posixGroup', 'posixGroupId',
                       'authorizedServiceObject', 'hostObject' ]
        attributes:
          cn: 'UNIX SSH users'
          gid: 'sshusers'
          gidNumber: '{{ ldap__groupid_min|int + 1 }}'
          owner: '{{ admin_dn }}'
          member: '{{ admin_dn }}'
          description: 'People who can connect to UNIX-like infrastructure via SSH'
          host: 'posix:all'

      - name: 'Create SUDOers container'
        dn: '{{ [ "ou=SUDOers" ] + ldap__base_dn }}'
        objectClass: 'organizationalUnit'
        attributes:
          ou: 'SUDOers'
          description: 'Container for sudoers.ldap(5) configuration'

      - name: 'Create sudoer defaults LDAP entry'
        dn: '{{ [ "cn=defaults", "ou=SUDOers" ] + ldap__base_dn }}'
        objectClass: 'sudoRole'
        attributes:
          cn: 'defaults'
          description: 'Object which contains default options for all sudo roles'

      - name: 'Allow admins to gain root privileges via sudo'
        dn: '{{ [ "cn=%admins", "ou=SUDOers" ] + ldap__base_dn }}'
        objectClass: 'sudoRole'
        attributes:
          cn: '%admins'
          description: 'Grant privileged access to UNIX accounts in the "admins" UNIX group'
          sudoUser: '%admins'
          sudoRunAsUser: 'ALL'
          sudoRunAsGroup: 'ALL'
          sudoHost: 'ALL'
          sudoCommand: 'ALL'
          sudoOption:
            - '!authenticate'
            - '!requiretty'
            - 'env_check+=SSH_CLIENT'

  pre_tasks:

    - name: Check local user information
      getent:
        database: 'passwd'
        key: '{{ admin_user }}'
      delegate_to: 'localhost'
      become: False

    - name: Save admin credential in the password store
      set_fact:
        admin_stored_password: '{{ admin_saved_password }}'
      no_log: True
      delegate_to: 'localhost'
      become: False
      run_once: True

  roles:

    - role: 'ldap'
      tags: [ 'role::ldap', 'skip::ldap' ]

---
# Copyright (C) 2019-2021 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2019-2021 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Initialize new LDAP directory
  collections: [ 'debops.debops', 'debops.roles01',
                 'debops.roles02', 'debops.roles03' ]
  hosts: [ 'debops_service_slapd' ]
  become: True

  environment: '{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}'

  vars_prompt:

    - name: 'admin_plaintext_password'
      prompt: 'New password for your LDAP user account'
      private: True

  vars:

    # Username of the current Ansible user on the Ansible Controller
    admin_user: '{{ lookup("env", "USER") }}'

    # Information from the 'passwd' database for the current user on the
    # Ansible Controller
    admin_gecos: '{{ getent_passwd[admin_user][3]|d() }}'

    # SSH public keys in the 'ssh-agent'
    admin_sshkeys: '{{ lookup("pipe", "ssh-add -L | grep ^\\\(sk-\\\)\\\?ssh || cat ~/.ssh/*.pub || true").split("\n") }}'

    # Password of the administrator account, stored in the Password Store on
    # the Ansible Controller
    admin_saved_password: '{{ lookup("passwordstore", ldap__admin_passwordstore_path
                                     + "/" + (admin_dn | to_uuid)
                                     + " create=true overwrite=true userpass="
                                     + admin_plaintext_password) }}'

    # The Relative Distinguished Name of the administrator account in the LDAP
    # directory
    admin_rdn: 'uid={{ admin_user }}'

    # The Distinguished Name of the administrator account
    admin_dn: '{{ ([ admin_rdn, ldap__people_rdn ] + ldap__base_dn) | join(",") }}'

    # Override the check if the LDAP support is enabled on the host, we don't
    # care at this point
    ldap__enabled: True

    # Override the check if the LDAP support is configured on the host, we
    # don't care at this point
    ldap__configured: True

    # Run the 'ldap' role in dependent mode; don't configure anything related
    # to LDAP on the host iself, perform only LDAP tasks
    ldap__dependent_play: True

    # Override the list of LDAP servers detected automatically by the role
    ldap__servers: [ '{{ ansible_fqdn }}' ]

    # Use the RootDN credential to access the LDAP directory directly via the
    # superuser account
    ldap__admin_binddn: '{{ ([ "cn=admin" ] + ldap__base_dn) | join(",") }}'

    # Use the RootPW credential generated by the 'debops.slapd' role to
    # authenticate to the LDAP directory
    ldap__admin_bindpw: '{{ lookup("password", secret + "/slapd/credentials/"
                                   + ldap__admin_binddn | to_uuid
                                   + ".password").split()[0] }}'

    ldap__dependent_tasks:

      - name: 'Create personal account for {{ admin_user }}'
        dn: '{{ [ admin_rdn, ldap__people_rdn ] + ldap__base_dn }}'
        objectClass: [ 'inetOrgPerson', 'posixAccount', 'shadowAccount',
                       'posixGroup', 'posixGroupId', 'ldapPublicKey',
                       'authorizedServiceObject', 'hostObject' ]
        attributes:

          # inetOrgPerson attributes
          commonName:   '{{ admin_gecos.split(",")[0] if admin_gecos|d() else (admin_user | capitalize) }}'
          givenName:    '{{ (admin_gecos.split(",")[0].split()[0]) if (admin_gecos|d() and " " in admin_gecos) else (admin_user | capitalize) }}'
          surname:      '{{ (admin_gecos.split(",")[0].split()[1]) if (admin_gecos|d() and " " in admin_gecos) else "AdminUser" }}'
          userPassword: '{{ admin_plaintext_password }}'

          # POSIX attributes
          uid:           '{{ admin_rdn.split("=")[1] }}'
          gid:           '{{ admin_rdn.split("=")[1] }}'
          uidNumber:     '{{ ldap__groupid_max|int + 1 }}'
          gidNumber:     '{{ ldap__groupid_max|int + 1 }}'
          homeDirectory: '{{ ldap__home + "/" + admin_user }}'
          loginShell:    '{{ ldap__shell }}'

          # Other attributes
          authorizedService: 'all'
          host: 'posix:all'
          sshPublicKey: '{{ admin_sshkeys }}'

      - name: 'Add admin account to cn=LDAP Administrator role'
        dn: '{{ [ "cn=LDAP Administrator", ldap__roles_rdn ] + ldap__base_dn }}'
        attributes:
          roleOccupant: '{{ admin_dn }}'

      - name: 'Add admin account to cn=UNIX Administrators group'
        dn: '{{ [ "cn=UNIX Administrators", ldap__groups_rdn ] + ldap__base_dn }}'
        attributes:
          member: '{{ admin_dn }}'
          owner: '{{ admin_dn }}'

  pre_tasks:

    - name: Check local user information
      getent:
        database: 'passwd'
        key: '{{ admin_user }}'
      delegate_to: 'localhost'
      become: False
      failed_when: False

    - name: Save admin credential in the password store
      set_fact:
        admin_stored_password: '{{ admin_saved_password }}'
      no_log: True
      delegate_to: 'localhost'
      become: False
      run_once: True

  roles:

    - role: 'ldap'
      tags: [ 'role::ldap', 'skip::ldap' ]

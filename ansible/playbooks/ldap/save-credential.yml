---

# This playbook can be used to save the LDAP password in the password store
# (encrypted with user's GPG key). The password can then be used later by the
# 'ldap' role to perform LDAP tasks on behalf of the user.
#
# Check the documentation of the 'ldap' Ansible role for more details.

- name: Save personal credential in the password store
  hosts: [ 'debops_service_slapd' ]

  environment: '{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}'

  vars:

    # Don't make any changes related to LDAP on the host against which this
    # playbook is executed. The playbook relies on the role default variables
    # (or their inventory overrides) to find the full DN of the user account.
    ldap__enabled: False

    # The username of the credential owner
    person_rdn: 'uid={{ person_uid.user_input }}'

    # The LDAP Distinguished Name of the credential owner
    person_dn: '{{ object_dn.user_input
                   if object_dn.user_input|d()
                   else ((([ person_rdn, ldap__people_rdn ] + ldap__base_dn) | join(","))
                         if person_uid.user_input|d()
                         else "") }}'

    # This variable defines the lookup plugin command that will be executed by
    # the 'set_fact' task later on to trigger the 'passwordstore' lookup plugin
    # to save the new password given by the user.
    person_store_password: '{{ lookup("passwordstore", ldap__admin_passwordstore_path
                                      + "/" + (person_dn | to_uuid)
                                      + " create=true overwrite=true userpass="
                                      + person_password) }}'

  pre_tasks:

    - name: 'Specify username'
      pause:
        prompt: 'LDAP username (uid=%s,{{ ([ ldap__people_rdn ] + ldap__base_dn) | join(",") }})'
      register: person_uid
      delegate_to: 'localhost'
      become: False
      run_once: True

    - name: 'Username not provided, specify DN'
      pause:
        prompt: 'LDAP Distinguished Name'
      register: object_dn
      when: person_uid is undefined or not person_uid.user_input|d()
      delegate_to: 'localhost'
      become: False
      run_once: True

    - name: Make sure that we have a Distinguished Name
      assert:
        that:
          - person_dn != ""
        fail_msg: 'No Distinguished Name provided, aborting'
        success_msg: 'dn: {{ person_dn }} | UUID: {{ person_dn | to_uuid }}'
      delegate_to: 'localhost'
      become: False
      run_once: True

    - name: 'Specify password'
      pause:
        prompt: 'LDAP password [random]'
        echo: False
      register: person_plaintext_password
      delegate_to: 'localhost'
      become: False
      run_once: True

    - name: Generate random password if not specified
      set_fact:
        person_password: '{{ person_plaintext_password.user_input
                             if person_plaintext_password.user_input|d()
                             else lookup("password", "/dev/null length=42") }}'
      delegate_to: 'localhost'
      become: False
      run_once: True

    - name: Save credential in the password store
      set_fact:
        person_saved_password: '{{ person_store_password }}'
      no_log: True
      delegate_to: 'localhost'
      become: False
      run_once: True

  post_tasks:

    - name: Display randomly generated password
      debug:
        msg: '{{ {"Distinguished Name": person_dn,
                  "UUID": (person_dn | to_uuid),
                  "Stored password": person_password} }}'
      when: not person_plaintext_password.user_input|d()
      delegate_to: 'localhost'
      become: False
      run_once: True

  roles:

    - role: 'ldap'
      tags: [ 'role::ldap', 'skip::ldap' ]

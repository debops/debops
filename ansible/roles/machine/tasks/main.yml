---
# Copyright (C) 2018 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2018 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  ansible.builtin.import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Install requested packages
  ansible.builtin.package:
    name: '{{ q("flattened", machine__packages) }}'
    state: 'present'
  register: machine__register_packages
  until: machine__register_packages is succeeded
  when: machine__enabled | bool

- name: Generate machine-info config file
  ansible.builtin.template:
    src: 'etc/machine-info.j2'
    dest: '/etc/machine-info'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: machine__enabled | bool

- name: Add/remove diversion of /etc/issue
  debops.debops.dpkg_divert:
    path: '/etc/issue'
    state: '{{ "present"
               if machine__etc_issue_state | d("present") != "absent"
               else "absent" }}'
    delete: True
  when: machine__enabled | bool

- name: Add/remove diversion of /etc/issue.net
  debops.debops.dpkg_divert:
    path: '/etc/issue.net'
    state: '{{ "present"
               if machine__etc_issue_net_state | d("present") != "absent"
               else "absent" }}'
    delete: True
  when: machine__enabled | bool

- name: Configure /etc/issue file
  ansible.builtin.template:
    src: '{{ machine__etc_issue_template }}'
    dest: '/etc/issue'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: machine__enabled | bool and machine__etc_issue_state | d('present') != 'absent'

- name: Configure /etc/issue.net file
  ansible.builtin.template:
    src: '{{ machine__etc_issue_net_template | default(machine__etc_issue_template) }}'
    dest: '/etc/issue'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: machine__enabled | bool and machine__etc_issue_net_state | d('present') != 'absent'

- name: Remove static /etc/motd file if requested
  ansible.builtin.file:
    path: '/etc/motd'
    state: 'absent'
  when: machine__enabled | bool and machine__etc_motd_state == 'absent'

- name: Generate static /etc/motd file
  ansible.builtin.copy:
    content: "{{ machine__motd }}"
    dest: '/etc/motd'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: machine__enabled | bool and machine__etc_motd_state | d('present') != 'absent' and
        machine__motd | d()

- name: Ensure that required directories exist
  ansible.builtin.file:
    path: '{{ machine__motd_update_dir }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: machine__enabled | bool

- name: Create /run/motd.dynamic symlink
  ansible.builtin.meta: 'flush_handlers'

- name: Add/remove diversion of packaged MOTD scripts
  vars:
    machine__var_divert_path: '{{ "/etc/update-motd.d/"
                                  + item.filename | d(("%02d" | format(item.weight | int)) | string + "-" + item.name) }}'
  debops.debops.dpkg_divert:
    path: '{{ machine__var_divert_path }}'
    divert: '{{ machine__var_divert_path + ".disabled" }}'
    state: '{{ "present"
               if (machine__enabled | bool and
                   item.state | d("present") not in ["absent", "revert"])
               else "absent" }}'
    delete: True
  loop: '{{ machine__motd_combined_scripts | debops.debops.parse_kv_items }}'
  loop_control:
    label: '{{ item.filename | d(item.name) }}'
  when: item.filename | d(item.name) and item.divert | d(False) | bool

- name: Remove dynamic MOTD scripts
  ansible.builtin.file:
    path: '{{ machine__motd_update_dir + "/"
              + (item.filename | d(("%02d" | format(item.weight | int)) | string + "-" + item.name)) }}'
    state: 'absent'
  loop: '{{ q("flattened", machine__motd_combined_scripts) | debops.debops.parse_kv_items }}'
  register: machine__register_motd_scripts_removed
  when: (machine__enabled | bool and
         item.filename | d(item.name) and
         item.state | d('present') == 'absent' and not item.divert | d(False) | bool)

- name: Install dynamic MOTD scripts
  ansible.builtin.copy:
    src: '{{ item.src | d(omit) }}'
    content: '{{ item.content | d(omit) }}'
    dest: '{{ machine__motd_update_dir + "/"
              + (item.filename | d(("%02d" | format(item.weight | int)) | string + "-" + item.name)) }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  loop: '{{ machine__motd_combined_scripts | debops.debops.parse_kv_items }}'
  loop_control:
    label: '{{ item.filename | d() or item.name }}'
  register: machine__register_motd_scripts_created
  when: (machine__enabled | bool and
         item.filename | d(item.name) and
         item.src | d(item.content) and
         item.state | d('present') not in ['init', 'absent', 'ignore', 'divert', 'revert'])

- name: Remove unknown MOTD scripts
  ansible.builtin.shell: find /etc/update-motd.d -maxdepth 1 -type f
         -name '*-{{ item.item.name }}'
         ! -name '{{ ("%02d" | format((item.item.weight | d("0")) | int)) | string + "-" + item.item.name }}'
         -exec rm -vf {} +
  loop: '{{ machine__register_motd_scripts_removed.results
            + machine__register_motd_scripts_created.results }}'
  loop_control:
    label: '{{ item.item.name }}'
  register: machine__register_remove_unknown
  changed_when: machine__register_remove_unknown.changed | bool
  when: (item.item.name | d() and not item.item.divert | d(False) | bool and
         item.item.filename is undefined and item is changed)

- name: Make sure that Ansible local facts directory exists
  ansible.builtin.file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save machine local facts
  ansible.builtin.template:
    src: 'etc/ansible/facts.d/machine.fact.j2'
    dest: '/etc/ansible/facts.d/machine.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Update Ansible facts if they were modified
  ansible.builtin.meta: 'flush_handlers'

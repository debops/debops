---

- import_role:
    name: 'ansible_plugins'

- import_role:
    name: 'secret'

- name: Install FreeRADIUS packages
  package:
    name: '{{ item }}'
    state: 'present'
  with_flattened:
    - '{{ freeradius__base_packages }}'
    - '{{ freeradius__packages }}'
  register: freeradius__register_packages
  until: freeradius__register_packages is succeeded

- name: Enable FreeRADIUS service in systemd to start at boot time
  systemd:
    name: 'freeradius.service'
    enabled: True
  when: ansible_service_mgr == 'systemd'

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save FreeRADIUS local facts
  template:
    src: 'etc/ansible/facts.d/freeradius.fact.j2'
    dest: '/etc/ansible/facts.d/freeradius.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  register: freeradius__register_facts

- name: Update Ansible facts if they were modified
  action: setup
  when: freeradius__register_facts is changed

- name: Get list of FreeRADIUS Conffiles
  command: cat /var/lib/dpkg/info/freeradius-config.conffiles
  register: freeradius__register_conffiles
  changed_when: False
  check_mode: False

- name: Check current FreeRADIUS diversions
  environment:
    LC_ALL: 'C'
  shell: set -o nounset -o pipefail -o errexit &&
         dpkg-divert --list '/etc/freeradius/*.dpkg-divert' | awk '{print $NF}' || true
  args:
    executable: 'bash'
  register: freeradius__register_diversions
  check_mode: False
  changed_when: False

- name: Divert the FreeRADIUS configuration files
  vars:
    divert_state: '{{ item.divert | d(True if ((freeradius__conf_base_path + "/"
                      + (item.filename
                         | d(item.name))) in freeradius__register_conffiles.stdout_lines) else False) }}'
    divert_filename: '{{ item.divert_filename
                         | d((((item.filename | d(item.name))|dirname + "/.")
                              if ((item.filename | d(item.name))|dirname) else ".")
                             + (item.filename | d(item.name))|basename + ".dpkg-divert") }}'
  command: dpkg-divert --quiet --local
                       --divert {{ freeradius__conf_base_path + '/' + divert_filename }}
                       --rename {{ freeradius__conf_base_path + '/' + (item.filename | d(item.name)) }}
  with_items: '{{ freeradius__combined_configuration | parse_kv_items }}'
  loop_control:
    label: '{{ {"file":   (freeradius__conf_base_path + "/" + (item.filename | d(item.name))),
                "divert": (freeradius__conf_base_path + "/" + divert_filename),
                "state":  item.state|d("present")} }}'
  notify: [ 'Check freeradius configuration and restart' ]
  when: (item.name|d() and divert_state|bool and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and
        (freeradius__conf_base_path + '/' + divert_filename) not in freeradius__register_diversions.stdout_lines)
  no_log: '{{ (item.no_log | d(False)) | bool }}'

- name: Create missing configuration directories
  file:
    path: '{{ (freeradius__conf_base_path + "/" + (item.filename | d(item.name))) | dirname }}'
    state: 'directory'
    owner: '{{ freeradius__user }}'
    group: '{{ freeradius__group }}'
    mode: '0755'
  with_items: '{{ freeradius__combined_configuration | parse_kv_items }}'
  loop_control:
    label: '{{ {"path": ((freeradius__conf_base_path + "/" + (item.filename | d(item.name))) | dirname)} }}'
  when: (item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and
         (item.link_src|d() or item.options|d() or item.raw|d()))
  no_log: '{{ (item.no_log | d(False)) | bool }}'

- name: Generate FreeRADIUS configuration files
  template:
    src:   'etc/freeradius/template.conf.j2'
    dest:  '{{ freeradius__conf_base_path + "/" + (item.filename | d(item.name)) }}'
    owner: '{{ item.owner | d(freeradius__user) }}'
    group: '{{ item.group | d(freeradius__group) }}'
    mode:  '{{ item.mode  | d("0640") }}'
  with_items: '{{ freeradius__combined_configuration | parse_kv_items }}'
  notify: [ 'Check freeradius configuration and restart' ]
  when: (item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and
         not item.link_src|d() and (item.options|d() or item.raw|d()))
  no_log: '{{ (item.no_log | d(False)) | bool }}'

- name: Create configuration file symlinks
  file:
    dest: '{{ freeradius__conf_base_path + "/" + (item.filename | d(item.name)) }}'
    src: '{{ item.link_src }}'
    state: 'link'
    owner: '{{ item.owner | d(freeradius__user) }}'
    group: '{{ item.group | d(freeradius__group) }}'
  with_items: '{{ freeradius__combined_configuration | parse_kv_items }}'
  notify: [ 'Check freeradius configuration and restart' ]
  when: (item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and
         item.link_src|d())
  no_log: '{{ (item.no_log | d(False)) | bool }}'

- name: Remove FreeRADIUS configuration files
  vars:
    divert_state: '{{ item.divert | d(True if ((freeradius__conf_base_path + "/"
                      + (item.filename
                         | d(item.name))) in freeradius__register_conffiles.stdout_lines) else False) }}'
  file:
    dest: '{{ freeradius__conf_base_path + "/" + (item.filename | d(item.name)) }}'
    state: 'absent'
  with_items: '{{ freeradius__combined_configuration | parse_kv_items }}'
  notify: [ 'Check freeradius configuration and restart' ]
  when: item.name|d() and item.state|d('present') == 'absent' and not divert_state|bool
  no_log: '{{ (item.no_log | d(False)) | bool }}'

- name: Revert FreeRADIUS configuration files
  vars:
    divert_state: '{{ item.divert | d(True if ((freeradius__conf_base_path + "/"
                      + (item.filename
                         | d(item.name))) in freeradius__register_conffiles.stdout_lines) else False) }}'
    divert_filename: '{{ item.divert_filename
                         | d((((item.filename | d(item.name))|dirname + "/.")
                              if ((item.filename | d(item.name))|dirname) else ".")
                             + (item.filename | d(item.name))|basename + ".dpkg-divert") }}'
  shell: rm -f {{ freeradius__conf_base_path + '/' + (item.filename | d(item.name)) }}
         ; dpkg-divert --quiet --local --rename
                       --remove {{ freeradius__conf_base_path + '/' + (item.filename | d(item.name)) }}
  args:
    warn: False
  with_items: '{{ freeradius__combined_configuration | parse_kv_items }}'
  loop_control:
    label: '{{ {"file":   (freeradius__conf_base_path + "/" + (item.filename | d(item.name))),
                "divert": (freeradius__conf_base_path + "/" + divert_filename),
                "state":  item.state|d("present")} }}'
  notify: [ 'Check freeradius configuration and restart' ]
  when: (item.name|d() and divert_state|bool and item.state|d('present') == 'absent' and
         (freeradius__conf_base_path + '/' + divert_filename) in freeradius__register_diversions.stdout_lines)
  no_log: '{{ (item.no_log | d(False)) | bool }}'

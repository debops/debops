---
# Copyright (C) 2015-2017 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2015-2017 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Check if shared memory support is available
  shell: set -o nounset -o pipefail -o errexit && mount | grep /dev/shm || true
  args:
    executable: 'bash'
  register: postgresql_server__register_shm
  changed_when: False
  check_mode: False
  tags: [ 'role::postgresql_server:config' ]

- name: Create PostgreSQL clusters
  environment:
    LANG: '{{ item.locale | d(postgresql_server__locale) }}'
    LC_ALL: '{{ item.locale | d(postgresql_server__locale) }}'
  command: pg_createcluster --user={{ item.user | d(postgresql_server__user) }}
           --group={{ item.group | d(postgresql_server__group) }}
           --locale={{ item.locale | d(postgresql_server__locale) }}
           --start-conf={{ item.start_conf | d(postgresql_server__start_conf) }}
           --port={{ item.port }} {{ item.version | d(postgresql_server__version) }} {{ item.name }}
  args:
    creates: '/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/postgresql.conf'
  register: postgresql_server__register_createcluster
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.name|d() and item.port|d()

- name: Remove data directory for PostgreSQL replication standby clusters
  file:
    path: '{{ item.item.data_directory | d(postgresql_server__data_directory + "/"
                                           + (item.item.version | d(postgresql_server__version))
                                           + "/" + item.item.name) }}'
    state: absent
  when:
    - item.item.standby is defined
    - item is changed
    - item is success
  with_items: '{{ postgresql_server__register_createcluster.results }}'
  loop_control:
    label: '{{ item.item }}'

- name: Synchronize data for PostgreSQL replication standby clusters
  environment:
    LANG: '{{ item.item.locale | d(postgresql_server__locale) }}'
    LC_ALL: '{{ item.item.locale | d(postgresql_server__locale) }}'
  command: >-
    pg_basebackup
    --pgdata={{ item.item.data_directory | d(postgresql_server__data_directory + "/"
                                             + (item.item.version | d(postgresql_server__version))
                                             + "/" + item.item.name) }}
    --dbname="{{ item.item.standby.conninfo }}"
    --write-recovery-conf
    {% if item.item.standby.slot_name is defined %}
    --slot={{ item.item.standby.slot_name }}
    --create-slot
    {% endif %}
  become: True
  become_user: '{{ item.user | d(postgresql_server__user) }}'
  when:
    - item.item.standby is defined
    - item is changed
    - item is success
  with_items: '{{ postgresql_server__register_createcluster.results }}'
  loop_control:
    label: '{{ item.item }}'

- name: Log directory path
  file:
    name: "{{ item.log_directory }}"
    mode: '0750'
    owner: '{{ item.user | d(postgresql_server__user) }}'
    group: '{{ item.group | d(postgresql_server__group) }}'
    state: directory
    recurse: yes
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.log_directory|d() and item.log_directory is abs
  tags: [ 'role::postgresql_server:config' ]

- name: Ensure that conf.d directories exist
  file:
    path: '/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/conf.d'
    state: 'directory'
    owner: '{{ item.user | d(postgresql_server__user) }}'
    group: '{{ item.group | d(postgresql_server__group) }}'
    mode: '0755'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.name|d()
  tags: [ 'role::postgresql_server:config' ]

- name: Configure PostgreSQL clusters
  template:
    src: 'etc/postgresql/postgresql.conf.j2'
    dest: '/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/postgresql.conf'
    owner: '{{ item.user | d(postgresql_server__user) }}'
    group: '{{ item.group | d(postgresql_server__group) }}'
    mode: '0644'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.name|d()
  register: postgresql_server__register_config
  tags: [ 'role::postgresql_server:config' ]

- name: Configure PostgreSQL cluster environment
  template:
    src: 'etc/postgresql/environment.j2'
    dest: '/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/environment'
    owner: '{{ item.user | d(postgresql_server__user) }}'
    group: '{{ item.group | d(postgresql_server__group) }}'
    mode: '0644'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.name|d()
  register: postgresql_server__register_config_environment
  tags: [ 'role::postgresql_server:config' ]

- name: Configure PostgreSQL user identification
  template:
    src: 'etc/postgresql/pg_ident.conf.j2'
    dest: '/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/pg_ident.conf'
    owner: '{{ item.user | d(postgresql_server__user) }}'
    group: '{{ item.group | d(postgresql_server__group) }}'
    mode: '0640'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.name|d()
  register: postgresql_server__register_config_ident
  tags: [ 'role::postgresql_server:config' ]

- name: Configure PostgreSQL cluster host authentication
  template:
    src: 'etc/postgresql/pg_hba.conf.j2'
    dest: '/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/pg_hba.conf'
    owner: '{{ item.user | d(postgresql_server__user) }}'
    group: '{{ item.group | d(postgresql_server__group) }}'
    mode: '0640'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.name|d()
  register: postgresql_server__register_config_hba
  tags: [ 'role::postgresql_server:config' ]

- name: Configure PostgreSQL cluster trusted local roles
  template:
    src: 'etc/postgresql/trusted.j2'
    dest: '/etc/postgresql/{{ (item.version | d(postgresql_server__version)) + "/" + item.name + "/trusted" }}'
    owner: '{{ item.user | d(postgresql_server__user) }}'
    group: '{{ item.group | d(postgresql_server__group) }}'
    mode: '0640'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.name|d()
  register: postgresql_server__register_trusted
  tags: [ 'role::postgresql_server:config' ]

- name: Configure PostgreSQL cluster start options
  template:
    src: 'etc/postgresql/start.conf.j2'
    dest: '/etc/postgresql/{{ item.version | d(postgresql_server__version) }}/{{ item.name }}/start.conf'
    owner: '{{ item.user | d(postgresql_server__user) }}'
    group: '{{ item.group | d(postgresql_server__group) }}'
    mode: '0644'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: item.name|d()
  register: postgresql_server__register_config_start
  tags: [ 'role::postgresql_server:config' ]

- name: Symlink SSL root certificate
  file:
    src: '{{ item.pki_path | d(postgresql_server__pki_path) + "/" + item.pki_realm | d(postgresql_server__pki_realm)
             + "/" + item.pki_ca | d(postgresql_server__pki_ca) }}'
    dest: '{{ (item.data_directory | d(postgresql_server__data_directory
                                       + (item.version | d(postgresql_server__version)) + "/" + item.name))
              + "/root.crt" }}'
    state: 'link'
    mode: '0644'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: ((postgresql_server__pki|d() and postgresql_server__pki | bool) and
         (item.name|d()) and
         ((item.version|d() and item.version == '9.1') or
          (postgresql_server__version|d() and postgresql_server__version == '9.1')))

- name: Symlink SSL certificate
  file:
    src: '{{ item.pki_path | d(postgresql_server__pki_path) + "/" + item.pki_realm | d(postgresql_server__pki_realm)
             + "/" + item.pki_crt | d(postgresql_server__pki_crt) }}'
    dest: '{{ (item.data_directory | d(postgresql_server__data_directory
                                       + (item.version | d(postgresql_server__version)) + "/" + item.name))
              + "/server.crt" }}'
    state: 'link'
    mode: '0644'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: ((postgresql_server__pki|d() and postgresql_server__pki | bool) and
         (item.name|d()) and
         ((item.version|d() and item.version == '9.1') or
          (postgresql_server__version|d() and postgresql_server__version == '9.1')))

- name: Symlink SSL key
  file:
    src: '{{ item.pki_path | d(postgresql_server__pki_path) + "/" + item.pki_realm | d(postgresql_server__pki_realm)
             + "/" + item.pki_key | d(postgresql_server__pki_key) }}'
    dest: '{{ (item.data_directory | d(postgresql_server__data_directory
                                       + (item.version | d(postgresql_server__version)) + "/" + item.name))
              + "/server.key" }}'
    state: 'link'
    mode: '0640'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: ((postgresql_server__pki|d() and postgresql_server__pki | bool) and
         (item.name|d()) and
         ((item.version|d() and item.version == '9.1') or
          (postgresql_server__version|d() and postgresql_server__version == '9.1')))

- name: Start PostgreSQL clusters when not started
  command: pg_ctlcluster {{ item.version | d(postgresql_server__version) }} {{ item.name }} start
  args:
    creates: '{{ item.external_pid_file | d("/var/run/postgresql/" + (item.version | d(postgresql_server__version))
                                            + "-" + item.name + ".pid") }}'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: (ansible_service_mgr != 'systemd' and
         ((item.name|d()) and
          (item.start_conf is undefined or item.start_conf == 'auto')))

- name: Start PostgreSQL clusters when not started (systemd)
  service:
    name: 'postgresql@{{ item.version | d(postgresql_server__version) }}-{{ item.name }}.service'
    state: 'started'
  with_flattened:
    - '{{ postgresql_server__clusters }}'
  when: (ansible_service_mgr == 'systemd' and
         ((item.name|d()) and
          (item.start_conf is undefined or item.start_conf == 'auto')))

- name: Reload PostgreSQL clusters when needed
  command: 'pg_ctlcluster {{ item.item.version | d(postgresql_server__version) }} {{ item.item.name }} reload'  # noqa no-handler
  with_flattened:
    - '{{ postgresql_server__register_config.results }}'
    - '{{ postgresql_server__register_config_hba.results }}'
    - '{{ postgresql_server__register_config_ident.results }}'
    - '{{ postgresql_server__register_trusted.results }}'
  when: (ansible_service_mgr != 'systemd' and
         ((item is changed and
          (item.item.start_conf is undefined or item.item.start_conf == 'auto'))))
  tags: [ 'role::postgresql_server:config' ]

- name: Reload PostgreSQL clusters when needed (systemd)
  service:  # noqa no-handler
    name: 'postgresql@{{ item.item.version | d(postgresql_server__version) }}-{{ item.item.name }}.service'
    state: 'reloaded'
  with_flattened:
    - '{{ postgresql_server__register_config.results }}'
    - '{{ postgresql_server__register_config_hba.results }}'
    - '{{ postgresql_server__register_config_ident.results }}'
    - '{{ postgresql_server__register_trusted.results }}'
  when: (ansible_service_mgr == 'systemd' and
         ((item is changed and
          (item.item.start_conf is undefined or item.item.start_conf == 'auto'))))
  tags: [ 'role::postgresql_server:config' ]

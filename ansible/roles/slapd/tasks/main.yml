---
# Copyright (C) 2016-2019 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2016-2019 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  ansible.builtin.import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  ansible.builtin.import_role:
    name: 'secret'

- name: Prepare OpenLDAP installation to use the rfc2307bis schema
  ansible.builtin.include_tasks: 'prepare_rfc2307bis.yml'
  when: (slapd__rfc2307bis_enabled | bool and
         (ansible_local is undefined or ansible_local.slapd is undefined))

- name: Initialize BaseDN value in debconf using a DNS domain
  ansible.builtin.debconf:
    name: 'slapd'
    question: '{{ item }}'
    vtype: 'string'
    value: '{{ slapd__domain }}'
  loop: [ 'slapd/domain', 'shared/organization' ]

- name: Install OpenLDAP packages
  ansible.builtin.package:
    name: '{{ q("flattened", (slapd__base_packages
                              + slapd__schema_packages
                              + slapd__packages)) }}'
    state: 'present'
  register: slapd__register_packages
  until: slapd__register_packages is succeeded

- name: Allow access to additional UNIX groups by the OpenLDAP service
  ansible.builtin.user:
    name: '{{ slapd__user }}'
    groups: '{{ slapd__additional_groups }}'
    append: True
    state: 'present'
  register: slapd__register_unix_groups

- name: Divert the OpenLDAP environment file
  debops.debops.dpkg_divert:
    path: '/etc/default/slapd'

- name: Generate the OpenLDAP environment file
  ansible.builtin.template:
    src: 'etc/default/slapd.j2'
    dest: '/etc/default/slapd'
    mode: '0644'
  register: slapd__register_environment

- name: Restart slapd if its configuration was modified
  ansible.builtin.service:  # noqa no-handler
    name: 'slapd'
    state: 'restarted'
  when: slapd__register_unix_groups is changed or
        slapd__register_environment is changed

- name: Ensure that the log directory exists
  ansible.builtin.file:
    path: '{{ slapd__log_dir }}'
    state: 'directory'
    owner: '{{ slapd__user }}'
    group: '{{ slapd__group }}'
    mode: '0750'

- name: Install helper scripts
  ansible.builtin.copy:
    src: 'usr/local/sbin/'
    dest: '/usr/local/sbin/'
    mode: '0755'
  tags: [ 'role::slapd:scripts' ]

- name: Ensure that DebOps schema directory exists
  ansible.builtin.file:
    path: '{{ slapd__debops_schema_path }}'
    state: 'directory'
    mode: '0755'

- name: Copy custom DebOps schemas to the OpenLDAP host
  ansible.builtin.copy:
    src: 'etc/ldap/schema/debops/'
    dest: '{{ slapd__debops_schema_path + "/" }}'
    mode: '0644'

- name: Load custom LDAP schemas
  ansible.builtin.script: 'script/ldap-load-schema {{ item }}'
  loop: '{{ q("flattened", slapd__combined_schemas) }}'
  register: slapd__register_load_schemas
  changed_when: (slapd__register_load_schemas.stdout | d() and
                 (item | basename | regex_replace('.schema$', '') + ' already exists in the LDAP, skippingâ€¦')
                 not in slapd__register_load_schemas.stdout_lines)
  tags: [ 'role::slapd:schema' ]

- name: Ensure that additional database directories exist
  ansible.builtin.file:
    path: '{{ item }}'
    state: 'directory'
    owner: '{{ slapd__user }}'
    group: '{{ slapd__group }}'
    mode: '0755'
  loop: '{{ slapd__additional_database_dirs }}'

- name: Configure backup snapshots as cron jobs
  ansible.builtin.cron:
    name: 'Create {{ item }} backup snapshots of OpenLDAP databases'
    special_time: '{{ item }}'
    cron_file: 'slapd-snapshot'
    user: 'root'
    state: '{{ slapd__snapshot_deploy_state
               if (item in slapd__snapshot_cron_jobs)
               else "absent" }}'
    job: '/usr/local/sbin/slapd-snapshot {{ item }}'
  loop: [ 'daily', 'weekly', 'monthly' ]
  loop_control:
    label: '{{ {"state": (slapd__snapshot_deploy_state
                          if (item in slapd__snapshot_cron_jobs)
                          else "absent"),
                "cron_job": item} }}'

- name: Make sure that Ansible local facts directory exists
  ansible.builtin.file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save OpenLDAP server local facts
  ansible.builtin.template:
    src: 'etc/ansible/facts.d/slapd.fact.j2'
    dest: '/etc/ansible/facts.d/slapd.fact'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Update Ansible facts if they were modified
  ansible.builtin.meta: 'flush_handlers'

- name: Perform OpenLDAP tasks
  ansible.builtin.include_tasks: 'slapd_tasks.yml'
  loop: '{{ q("flattened", slapd__combined_tasks) | debops.debops.parse_kv_items }}'
  loop_control:
    label: '{{ {"state": item.state,
                "dn": item.dn,
                "attributes": item.attributes | d({})} }}'
  when: item.name | d() and item.dn | d() and
        item.state | d('present') not in [ 'init', 'ignore' ]
  tags: [ 'role::slapd:tasks' ]
  no_log: '{{ debops__no_log | d(item.no_log)
              | d(True
                  if ("userPassword" in (item.attributes | d({})).keys() or
                      "olcRootPW" in (item.attributes | d({})).keys())
                  else False) }}'

- name: Remove slapacl test suite if requested
  ansible.builtin.file:
    path: '{{ slapd__slapacl_script }}'
    state: 'absent'
  when: slapd__slapacl_deploy_state == 'absent'
  tags: [ 'role::slapd:slapacl', 'role::slapd:tasks' ]

- name: Perform OpenLDAP slapacl tasks
  ansible.builtin.include_tasks: 'slapd_tasks.yml'
  loop: '{{ q("flattened", slapd__slapacl_combined_tasks) | debops.debops.parse_kv_items }}'
  loop_control:
    label: '{{ {"state": item.state,
                "dn": item.dn,
                "attributes": item.attributes | d({})} }}'
  when: slapd__slapacl_deploy_state == 'present' and
        item.name | d() and item.dn | d() and
        item.state | d('present') not in [ 'init', 'ignore' ]
  tags: [ 'role::slapd:slapacl', 'role::slapd:tasks' ]
  no_log: '{{ debops__no_log | d(item.no_log)
              | d(True
                  if ("userPassword" in (item.attributes | d({})).keys() or
                      "olcRootPW" in (item.attributes | d({})).keys())
                  else False) }}'

- name: Generate slapacl test suite script
  ansible.builtin.template:
    src: 'etc/ldap/slapacl-test-suite.j2'
    dest: '{{ slapd__slapacl_script }}'
    group: '{{ slapd__group }}'
    mode: '0750'
  register: slapd__register_slapacl_script
  when: slapd__slapacl_deploy_state == 'present'
  tags: [ 'role::slapd:slapacl', 'role::slapd:tasks' ]

- name: Test ACL rules using slapacl
  environment:
    SLAPACL_STDOUT: 'false'
  ansible.builtin.command: '{{ slapd__slapacl_script }}'
  become: True
  become_user: '{{ slapd__user }}'
  register: slapd__register_slapacl_test
  when: slapd__slapacl_deploy_state == 'present' and
        slapd__slapacl_run_tests | bool
  changed_when: slapd__register_slapacl_test.stderr | d()
  tags: [ 'role::slapd:slapacl', 'role::slapd:tasks' ]

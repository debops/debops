---

- import_role:
    name: 'secret'

- name: Check if the dependent config file exists
  stat:
    path: '{{ secret + "/kibana/dependent_config/" + inventory_hostname + "/config.json" }}'
  register: kibana__register_dependent_config_file
  become: False
  delegate_to: 'localhost'
  when: (ansible_local|d() and ansible_local.kibana|d() and
         ansible_local.kibana.installed|d())
  tags: [ 'role::kibana:config' ]

- name: Load the dependent configuration from Ansible Controller
  slurp:
    src: '{{ secret + "/kibana/dependent_config/" + inventory_hostname + "/config.json" }}'
  register: kibana__register_dependent_config
  become: False
  delegate_to: 'localhost'
  when: (ansible_local|d() and ansible_local.kibana|d() and
         ansible_local.kibana.installed|d() and
         kibana__register_dependent_config_file.stat.exists|bool)
  tags: [ 'role::kibana:config' ]

- name: Divert original configuration files
  command: dpkg-divert --quiet --local --divert {{ item }}.dpkg-divert
           --rename {{ item }}
  args:
    creates: '{{ item }}.dpkg-divert'
  with_items:
    - '/etc/kibana/kibana.yml'
  notify: [ 'Start kibana' ]
  tags: [ 'role::kibana:config' ]

- name: Generate Kibana configuration
  template:
    src: 'etc/kibana/kibana.yml.j2'
    dest: '/etc/kibana/kibana.yml'
    owner: 'root'
    group: '{{ kibana__group }}'
    mode: '0660'
  notify: [ 'Restart kibana' ]
  tags: [ 'role::kibana:config' ]

- name: Check state of installed Kibana plugins
  shell: set -o nounset -o pipefail -o errexit &&
         bin/kibana-plugin list | cut -d@ -f1
  args:
    executable: 'bash'
    chdir: '/usr/share/kibana'
  register: kibana__register_plugins
  become: True
  become_user: '{{ kibana__user }}'
  changed_when: False
  check_mode: False

- name: Install Kibana plugins
  command: bin/kibana-plugin install {{ item.url | d(item.name) }}
  args:
    chdir: '/usr/share/kibana'
  notify: [ 'Restart kibana' ]
  become: True
  become_user: '{{ item.user | d(kibana__user) }}'
  with_flattened:
    - '{{ kibana__combined_plugins }}'
  when: (item.name|d() and item.state|d('present') != 'absent' and
         (item.name if ':' not in item.name else item.name.split(':')[1]) not in kibana__register_plugins.stdout_lines)

- name: Remove Kibana plugins
  command: bin/kibana-plugin remove {{ item.name }}
  args:
    chdir: '/usr/share/kibana'
  notify: [ 'Restart kibana' ]
  become: True
  become_user: '{{ item.user | d(kibana__user) }}'
  with_flattened:
    - '{{ kibana__combined_plugins }}'
  when: (item.name|d() and item.state|d('present') == 'absent' and
         (item.name if ':' not in item.name else item.name.split(':')[1]) in kibana__register_plugins.stdout_lines)

- name: Save Kibana dependent configuration on Ansible Controller
  template:
    src: 'secret/kibana/dependent_config/config.json.j2'
    dest: '{{ secret + "/kibana/dependent_config/" + inventory_hostname + "/config.json" }}'
  become: False
  delegate_to: 'localhost'
  tags: [ 'role::kibana:config' ]

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save Kibana local facts
  template:
    src: 'etc/ansible/facts.d/kibana.fact.j2'
    dest: '/etc/ansible/facts.d/kibana.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  register: kibana__register_facts

- name: Update Ansible facts if they were modified
  action: setup
  when: kibana__register_facts is changed

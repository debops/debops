---
# vim: foldmarker=[[[,]]]:foldmethod=marker

# Copyright (C) 2015 Patryk Åšciborek <patryk@sciborek.com>
# Copyright (C) 2015-2018 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2015-2017 Robin Schneider <ypid@riseup.net>
# Copyright (C) 2015-2018 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  ansible.builtin.import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  ansible.builtin.import_role:
    name: 'secret'

- name: Create /etc/default/grub.d directory
  ansible.builtin.file:
    path: '/etc/default/grub.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Generate GRUB configuration file
  ansible.builtin.template:
    src: 'etc/default/grub.d/ansible.cfg.j2'
    dest: '/etc/default/grub.d/ansible.cfg'
    owner:  'root'
    group:  'root'
    mode:   '0644'
  notify: [ 'Update GRUB' ]

# Security and users [[[

- name: Ensure secrets directories exist
  ansible.builtin.file:
    path: '{{ secret + "/credentials/" + inventory_hostname + "/grub/" + item.name }}'
    state: 'directory'
    mode: '0750'
  with_items: '{{ grub__combined_users }}'
  become: False
  delegate_to: 'localhost'
  when: item.name|d()
  no_log: '{{ debops__no_log | d(True) }}'

- name: Save plaintext password in secrets
  ansible.builtin.copy:
    content: "{{ item.password + '\n' }}"
    dest: '{{ secret + "/credentials/" + inventory_hostname + "/grub/" + item.name + "/password" }}'
    mode: '0640'
  with_items: '{{ grub__combined_users }}'
  register: grub__register_pw_plain
  become: False
  delegate_to: 'localhost'
  when: item.name|d()
  no_log: '{{ debops__no_log | d(True) }}'

- name: Save temporary grub-mkpasswd formatted password in secrets
  template:
    src: 'secret/credentials/inventory_hostname/grub/user_name/password_mkpasswd.j2'
    dest: '{{ secret + "/credentials/" + inventory_hostname + "/grub/" + item.0.name + "/password_mkpasswd" }}'
    mode: '0640'
  with_together:
    - '{{ grub__combined_users }}'
    - '{{ grub__register_pw_plain.results|d({}) }}'
  become: False
  delegate_to: 'localhost'
  when: (item.0.name|d() and item.1 is changed)
  no_log: '{{ debops__no_log | d(True) }}'

## There seems to be no way to specify the salt (except using a custom script).
## Only generating the hashed password when the plaintext password has changed
## is the workaround to make it idempotent.
## This is not too bad because depending on the iteration count chosen this operation could take a while ;)
- name: Generate salted hash from user password
  ansible.builtin.shell: set -o nounset -o pipefail -o errexit &&
         cat '{{ (secret + "/credentials/" + inventory_hostname + "/grub/" + item.0.name + "/password_mkpasswd") | quote }}'
         | LANG=C LC_ALL=C grub-mkpasswd-pbkdf2
         {{ "" if grub__iter_time|d()   == "default" else ("--iteration-count=" + grub__iter_time) }}
         {{ "" if grub__salt_length|d() == "default" else ("--salt=" + grub__salt_length) }}
         {{ "" if grub__hash_length|d() == "default" else ("--buflen=" + grub__hash_length) }}
         | perl -ne 's/^(:?Your PBKDF2|PBKDF2 hash of your password) is //ms && print'
  args:  # noqa no-handler
    executable: 'bash'
  with_together:
    - '{{ grub__combined_users }}'
    - '{{ grub__register_pw_plain.results|d({}) }}'
  register: grub__register_pw_hashes
  become: False
  delegate_to: 'localhost'
  changed_when: False
  when: (item.0.name|d() and item.1 is changed)
  no_log: '{{ debops__no_log | d(True) }}'

- name: Remove temporary grub-mkpassword formatted password
  file:
    path: '{{ secret + "/credentials/" + inventory_hostname + "/grub/" + item.0.name + "/password_mkpasswd" }}'
    state: 'absent'
  with_together:
    - '{{ grub__combined_users }}'
    - '{{ grub__register_pw_plain.results|d({}) }}'
  become: False
  delegate_to: 'localhost'
  when: (item.0.name|d() and item.1 is changed)
  no_log: '{{ debops__no_log | d(True) }}'

- name: Save hashed password in secrets
  ansible.builtin.copy:
    content: "{{ item.1.stdout_lines.0 + '\n' }}"
    dest: '{{ secret + "/credentials/" + inventory_hostname + "/grub/" + item.0.name + "/password_hash" }}'
    mode: '0640'
  with_together:
    - '{{ grub__combined_users }}'
    - '{{ grub__register_pw_hashes.results|d({}) }}'
  become: False
  delegate_to: 'localhost'
  when: (item.1 is not skipped)
  no_log: '{{ debops__no_log | d(True) }}'

- name: Configure users and passwords
  ansible.builtin.template:
    src: 'etc/grub.d/01_users.j2'
    dest: '/etc/grub.d/01_users'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: (not ansible_check_mode and grub__combined_users|length > 0)
  notify: [ 'Update GRUB' ]

- name: Remove users and passwords
  ansible.builtin.file:
    path: '/etc/grub.d/01_users'
    state: 'absent'
  when: (grub__combined_users|length == 0)
  notify: [ 'Update GRUB' ]

## FIXME: Remove when patched upstream has reached Debian stable.
## Currently unlikely because the patch was not accepted upstream.
## It has been decided to not divert this script because there is a chance that
## security fixes could affect this file.
- name: Add/remove diversion of /etc/grub.d/10_linux
  dpkg_divert:
    path: '/etc/grub.d/10_linux'
    state: '{{ "present" if grub__combined_users|length > 0 else "absent" }}'
    delete: True
  notify: [ 'Update GRUB' ]

- name: Copy /etc/grub.d/10_linux.dpkg-divert to its original location
  ansible.builtin.copy:
    src: '/etc/grub.d/10_linux.dpkg-divert'
    dest: '/etc/grub.d/10_linux'
    remote_src: True
    force: False
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: (grub__combined_users|length > 0)

- name: Allow configuration of the default menu entry parameters
  ansible.builtin.replace:
    dest: '/etc/grub.d/10_linux'
    regexp: "^CLASS=(?:\\$\\{[A-Z_]+:-)?([\"'][\\w _-]+)([\"'])\\}?"
    replace: 'CLASS=${GRUB_LINUX_MENUENTRY_CLASS:-\1 ${GRUB_LINUX_MENUENTRY_CLASS_ADDITIONAL:-}\2}'
    mode: '0755'
  notify: [ 'Update GRUB' ]
  when: (grub__combined_users|length > 0)

# ]]]

- name: Make sure that local fact directory exists
  ansible.builtin.file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save local GRUB facts
  ansible.builtin.template:
    src: 'etc/ansible/facts.d/grub.fact.j2'
    dest: '/etc/ansible/facts.d/grub.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Update Ansible facts if they were modified
  ansible.builtin.meta: 'flush_handlers'

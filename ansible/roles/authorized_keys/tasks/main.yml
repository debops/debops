---
# Copyright (C) 2016-2021 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2016-2021 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  import_role:
    name: 'secret'

- name: Ensure that SSH identity datastore exists
  file:
    path: '{{ authorized_keys__path }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: authorized_keys__enabled|bool

- name: Ensure the required groups exist
  group:
    name: '{{ item.group }}'
    gid: '{{ item.gid | d(omit) }}'
    system: '{{ item.system | bool }}'
    state: 'present'
  loop: '{{ lookup("template", "lookup/authorized_keys__identities.j2") | from_yaml }}'
  loop_control:
    label: '{{ {"identity": item.identity, "group": item.group} }}'
  when: authorized_keys__enabled|bool and item.group|d() and
        item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and
        item.file_state|d('present') not in [ 'absent', 'ignore', 'init' ]

- name: Get list of all groups
  getent:
    database: 'group'
    split: ':'
  when: authorized_keys__enabled|bool

- name: Get list of all users
  getent:
    database: 'passwd'
    split: ':'
  when: authorized_keys__enabled|bool

- name: Configure authorized keys for users
  authorized_key:
    key:         '{{ item.key }}'
    user:        '{{ item.user if (item.home|d())|bool else "root" }}'
    manage_dir:  '{{ item.manage_dir }}'
    state:       '{{ item.state       | d("present") }}'
    key_options: '{{ item.key_options | d(omit) }}'
    comment:     '{{ item.comment     | d(omit) }}'
    path:        '{{ item.path        | d(omit) }}'
    exclusive:   '{{ item.exclusive   | d(omit) }}'
  loop: '{{ lookup("template", "lookup/authorized_keys__identities.j2") | from_yaml }}'
  loop_control:
    label: '{{ {"identity": item.identity,
                "state": (item.state|d("present")
                          if (item.user in getent_passwd.keys() and (item.home|d())|bool)
                          else ("no user"
                                if (item.user not in getent_passwd.keys() and (item.home|d())|bool)
                                else item.state|d("present"))),
                "user": item.user,
                "path": item.path|d("~" + item.user + "/.ssh/authorized_keys")} }}'
  when: (authorized_keys__enabled|bool and
         item.file_state|d('present') != 'absent' and
         ((item.home|d())|bool and item.user in getent_passwd.keys()) or
          not (item.home|d())|bool)

- name: Enforce state of authorized_keys user files
  file:
    path:  '{{ item.path }}'
    owner: '{{ item.owner if (item.owner|d() and item.owner in getent_passwd.keys()) else "root" }}'
    group: '{{ (item.group
                if (item.group|d() and item.group in (getent_group|d({})).keys())
                else (getent_passwd[item.owner][2]|d({})
                      if (item.owner in getent_passwd|d({}))
                      else omit)) }}'
    mode:  '{{ item.mode }}'
    state: '{{ "absent" if (item.file_state|d("present") == "absent") else omit }}'
  loop: '{{ lookup("template", "lookup/authorized_keys__identities.j2") | from_yaml }}'
  loop_control:
    label: '{{ {"identity": item.identity,
                "state": item.file_state|d("present"),
                "group": (item.group
                          if (item.group|d() and item.group in (getent_group|d({})).keys())
                          else (getent_passwd[item.owner|d("root")][2]|d({})
                                if (item.owner|d("root") in getent_passwd|d({}))
                                else "root")),
                "path": item.path} }}'
  when: authorized_keys__enabled|bool and item.path|d() and not item.manage_dir|bool and
        item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and not ansible_check_mode

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save authorized_keys local facts
  template:
    src: 'etc/ansible/facts.d/authorized_keys.fact.j2'
    dest: '/etc/ansible/facts.d/authorized_keys.fact'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Re-read local facts if they have been modified
  meta: 'flush_handlers'

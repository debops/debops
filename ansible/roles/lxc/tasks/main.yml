---
# Copyright (C) 2014-2018 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2015-2016 Robin Schneider <ypid@riseup.net>
# Copyright (C) 2014-2018 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

- name: DebOps pre_tasks hook
  include: "{{ lookup('debops.debops.task_src', 'lxc/pre_main.yml') }}"

- name: Install required packages
  package:
    name: '{{ q("flattened", (lxc__base_packages
                              + lxc__packages)) }}'
    state: 'present'
  register: lxc__register_packages
  until: lxc__register_packages is succeeded

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save LXC local facts
  template:
    src: 'etc/ansible/facts.d/lxc.fact.j2'
    dest: '/etc/ansible/facts.d/lxc.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Update Ansible facts if they were modified
  meta: 'flush_handlers'

- name: Create required directories
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  loop:
    - '/etc/systemd/system/lxc.service.d'
    - '/etc/systemd/system/lxc@.service.d'
    - '/usr/local/lib/lxc'

- name: Install custom LXC hooks
  copy:
    src: 'usr/local/lib/lxc/'
    dest: '/usr/local/lib/lxc/'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Install custom LXC helper scripts
  copy:
    src: 'usr/local/bin/'
    dest: '/usr/local/bin/'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Remove systemd service overrides
  file:
    path: '{{ item.name | d(item) }}'
    state: 'absent'
  loop:
    - name: '/etc/systemd/system/lxc@.service.d/poweroff.conf'
      state: '{{ "present"
                 if (lxc__version is version("2.1.0", "<"))
                 else "absent" }}'
  register: lxc__register_systemd_overrides_remove
  when: item.state|d('present') == 'absent'

- name: Install systemd service overrides
  template:
    src: '{{ item.name | d(item) }}.j2'
    dest: '/{{ item.name | d(item) }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'etc/systemd/system/lxc.service.d/exec-override.conf'
    - 'etc/systemd/system/lxc@.service.d/partof.conf'
    - name: 'etc/systemd/system/lxc@.service.d/poweroff.conf'
      state: '{{ "present"
                 if (lxc__version is version("2.1.0", "<"))
                 else "absent" }}'
  register: lxc__register_systemd_overrides_create
  when: item.state|d('present') != 'absent'

- name: Disable internal network when requested
  systemd:
    name: 'lxc-net.service'
    state: 'stopped'
  when: (lxc__net_deploy_state == 'absent' and
         ansible_service_mgr == 'systemd')
  tags: [ 'role::lxc:net' ]

- name: Remove lxc-net support files
  file:
    path: '{{ item }}'
    state: 'absent'
  loop:
    - '{{ lxc__net_dnsmasq_conf }}'
    - '/etc/systemd/system/lxc-net.service.d'
    - '/etc/ferm/hooks/post.d/restart-lxc-net'
  register: lxc__register_net_remove
  when: lxc__net_deploy_state == 'absent'
  tags: [ 'role::lxc:net' ]

- name: Generate lxc-net configuration file
  template:
    src: 'etc/default/lxc-net.j2'
    dest: '/etc/default/lxc-net'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: lxc__register_net_config
  tags: [ 'role::lxc:net' ]

- name: Generate lxc-net dnsmasq config file
  template:
    src: 'etc/lxc/lxc-net-dnsmasq.conf.j2'
    dest: '{{ lxc__net_dnsmasq_conf }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: lxc__register_net_dnsmasq
  when: lxc__net_deploy_state == 'present'
  tags: [ 'role::lxc:net', 'role::lxc:dnsmasq' ]

- name: Install lxc-net ferm hook
  template:
    src: 'etc/ferm/hooks/post.d/restart-lxc-net.j2'
    dest: '/etc/ferm/hooks/post.d/restart-lxc-net'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: (lxc__net_deploy_state == 'present' and
         ansible_local|d() and ansible_local.ferm|d() and
         (ansible_local.ferm.enabled|d())|bool)
  tags: [ 'role::lxc:net' ]

- name: Create lxc-net service override directory
  file:
    path: '/etc/systemd/system/lxc-net.service.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: lxc__net_deploy_state == 'present'
  tags: [ 'role::lxc:net' ]

- name: Hook lxc-net-resolvconf script to the lxc-net service
  template:
    src: 'etc/systemd/system/lxc-net.service.d/resolvconf.conf.j2'
    dest: '/etc/systemd/system/lxc-net.service.d/resolvconf.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: lxc__register_net_systemd
  when: lxc__net_deploy_state == 'present'
  tags: [ 'role::lxc:net' ]

- name: Reconfigure systemd services when modified
  systemd:  # noqa no-handler
    name: '{{ "lxc-net.service" if (lxc__net_deploy_state == "present") else omit }}'
    state: '{{ "restarted" if (lxc__net_deploy_state == "present") else omit }}'
    daemon_reload: True
  when: (ansible_service_mgr == 'systemd' and
         (lxc__register_net_remove|d({}) is changed or
          lxc__register_net_config|d({}) is changed or
          lxc__register_net_dnsmasq|d({}) is changed or
          lxc__register_net_systemd|d({}) is changed or
          lxc__register_systemd_overrides_create|d({}) is changed or
          lxc__register_systemd_overrides_remove|d({}) is changed))
  tags: [ 'role::lxc:net', 'role::lxc:dnsmasq' ]

- name: Remove default SSH keys for root in containers if none are defined
  file:
    path: '/etc/lxc/root_authorized_keys'
    state: 'absent'
  when: not lxc__default_container_ssh_root_sshkeys|d()

- name: Define default SSH keys for root account in containers
  authorized_key:
    key: "{{ lxc__default_container_ssh_root_sshkeys | join('\n') }}"
    path: '/etc/lxc/root_authorized_keys'
    manage_dir: False
    user: 'root'
    state: 'present'
    exclusive: True
  when: lxc__default_container_ssh_root_sshkeys|d()

- name: Remove LXC configuration if requested
  file:
    path: '/etc/lxc/{{ item.filename | d(item.name + ".conf") }}'
    state: 'absent'
  with_items: '{{ lxc__combined_configuration | debops.debops.parse_kv_items }}'
  when: item.name|d() and item.state|d('present') == 'absent'

- name: Generate LXC configuration
  template:
    src: 'etc/lxc/template.conf.j2'
    dest: '/etc/lxc/{{ item.filename | d(item.name + ".conf") }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ lxc__combined_configuration | debops.debops.parse_kv_items }}'
  when: item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]

- name: Remove common LXC container configuration if requested
  file:
    path: '/usr/share/lxc/config/common.conf.d/{{ item.filename | d(item.name + ".conf") }}'
    state: 'absent'
  with_items: '{{ lxc__common_combined_conf | debops.debops.parse_kv_items }}'
  when: item.name|d() and item.state|d('present') == 'absent'

- name: Generate common LXC container configuration
  template:
    src: 'etc/lxc/template.conf.j2'
    dest: '/usr/share/lxc/config/common.conf.d/{{ item.filename | d(item.name + ".conf") }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ lxc__common_combined_conf | debops.debops.parse_kv_items }}'
  when: item.name|d() and item.state|d('present') not in [ 'absent', 'ignore', 'init' ]

- name: Stop LXC containers if requested
  systemd:
    name: 'lxc@{{ item.name | d(item) }}.service'
    state: 'stopped'
    enabled: '{{ True if item.state | d("started") == "stopped" else False }}'
  loop: '{{ lxc__containers }}'
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) in ansible_local.lxc.containers|d() and
        item.state|d("started") in [ "stopped", "absent" ]
  tags: [ 'role::lxc:containers' ]

- name: Destroy LXC containers if requested
  lxc_container:
    name:  '{{ item.name | d(item) }}'
    state: 'absent'
  loop: '{{ lxc__containers }}'
  tags: [ 'role::lxc:containers' ]
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) in ansible_local.lxc.containers|d() and
        item.state|d("started") == "absent"

- name: Remove systemd LXC instance configuration if requested
  file:
    path: '/etc/systemd/system/lxc@{{ item.name }}.service.d'
    state: 'absent'
  loop: '{{ lxc__containers }}'
  register: lxc__register_systemd_remove_override
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) in ansible_local.lxc.containers|d() and
        item.state|d("started") == "absent" and item.systemd_override|d()
  tags: [ 'role::lxc:containers' ]

- name: Create systemd override directories for LXC instances
  file:
    path: '/etc/systemd/system/lxc@{{ item.name }}.service.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  loop: '{{ lxc__containers }}'
  when: item.state|d("started") != "absent" and item.systemd_override|d()
  tags: [ 'role::lxc:containers' ]

- name: Generate systemd LXC instance override files
  template:
    src: 'etc/systemd/system/lxc@.service.d/ansible-override.conf.j2'
    dest: '/etc/systemd/system/lxc@{{ item.name }}.service.d/ansible-override.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop: '{{ lxc__containers }}'
  register: lxc__register_systemd_create_override
  when: item.state|d("started") != "absent" and item.systemd_override|d()
  tags: [ 'role::lxc:containers' ]

- name: Reload systemd configuration when needed
  systemd:  # noqa no-handler
    daemon_reload: True
  when: ansible_service_mgr == 'systemd' and
        lxc__register_systemd_create_override is changed or
        lxc__register_systemd_remove_override is changed
  tags: [ 'role::lxc:containers' ]

- name: Manage LXC containers
  environment:
    DOWNLOAD_KEYSERVER: '{{ ansible_local.keyring.keyserver | d("hkp://keyserver.ubuntu.com") }}'
  vars:
    template_options:
      - '--dist {{ (item.distribution | d(lxc__default_container_distribution)) | lower }}'
      - '--release {{ (item.release   | d(lxc__default_container_release))      | lower }}'
      - '--arch {{ (item.architecture | d(lxc__default_container_architecture)) | lower }}'
  lxc_container:
    name:                '{{ item.name                | d(item) }}'
    archive:             '{{ item.archive             | d(omit) }}'
    archive_compression: '{{ item.archive_compression | d(omit) }}'
    archive_path:        '{{ item.archive_path        | d(omit) }}'
    backing_store:       '{{ item.backing_store       | d(lxc__default_container_backing_store) }}'
    clone_name:          '{{ item.clone_name          | d(omit) }}'
    clone_snapshot:      '{{ item.clone_snapshot      | d(omit) }}'
    config:              '{{ item.config              | d(lxc__default_container_config) }}'
    container_command:   '{{ item.container_command   | d(omit) }}'
    container_config:    '{{ item.container_config    | d(omit) }}'
    container_log:       '{{ item.container_log       | d(omit) }}'
    container_log_level: '{{ item.container_log_level | d(omit) }}'
    directory:           '{{ item.directory           | d(omit) }}'
    fs_size:             '{{ item.fs_size             | d(omit) }}'
    fs_type:             '{{ item.fs_type             | d(omit) }}'
    lv_name:             '{{ item.lv_name             | d(omit) }}'
    lxc_path:            '{{ item.lxc_path            | d(omit) }}'
    state:               '{{ item.state               | d("started"
                                                          if (ansible_local|d() and ansible_local.lxc|d() and
                                                              (item.name | d(item))
                                                              in ansible_local.lxc.containers|d())
                                                          else "stopped") }}'
    template:            '{{ item.template            | d(lxc__default_container_template) }}'
    template_options:    '{{ item.template_options    | d((template_options | join(" "))
                                                          if ((item.template
                                                               | d(lxc__default_container_template)) == "download")
                                                          else omit) }}'
    thinpool:            '{{ item.thinpool            | d(omit) }}'
    vg_name:             '{{ item.vg_name             | d(omit) }}'
    vfs_root:            '{{ item.zfs_root            | d(omit) }}'
  loop: '{{ lxc__containers }}'
  tags: [ 'role::lxc:containers' ]
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) not in ansible_local.lxc.containers|d() and
        item.state|d("started") != "absent"

- name: Configure static MAC addresses for new LXC containers
  command: lxc-hwaddr-static {{ item.name | d(item) }}
  loop: '{{ lxc__containers }}'
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) not in ansible_local.lxc.containers|d() and
        item.state|d("started") == "started"
  tags: [ 'role::lxc:containers' ]

- name: Include fstab parameter in LXC container configuration for lxc<4.0
  lineinfile:
    path: '/var/lib/lxc/{{ item.name | d(item) }}/config'
    regexp: '^lxc\.mount\s+=\s+'
    line: 'lxc.mount = /var/lib/lxc/{{ item.name | d(item) }}/fstab'
    insertafter: '^lxc\.rootfs\.backend\s+=\s+'
    state: 'present'
    mode: '0644'
  loop: '{{ lxc__containers }}'
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) not in ansible_local.lxc.containers|d() and
        item.state|d("started") == "started" and item.fstab|d() and
        lxc__version is version("4.0", operator="lt", strict=True)
  tags: [ 'role::lxc:containers' ]

- name: Include fstab parameter in LXC container configuration for lxc>=4.0
  lineinfile:
    path: '/var/lib/lxc/{{ item.name | d(item) }}/config'
    regexp: '^lxc\.mount\.fstab\s+=\s+'
    line: 'lxc.mount.fstab = /var/lib/lxc/{{ item.name | d(item) }}/fstab'
    insertafter: '^lxc\.rootfs\.backend\s+=\s+'
    state: 'present'
    mode: '0644'
  loop: '{{ lxc__containers }}'
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) not in ansible_local.lxc.containers|d() and
        item.state|d("started") == "started" and item.fstab|d() and
        lxc__version is version("4.0", operator=">=", strict=True)
  tags: [ 'role::lxc:containers' ]

- name: Create custom fstab files for LXC containers
  copy:
    content: |
      # Filesystem table for the '{{ item.name | d(item) }}' LXC container
      {{ item.fstab | regex_replace('\n$','') }}
    dest: '/var/lib/lxc/{{ item.name | d(item) }}/fstab'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop: '{{ lxc__containers }}'
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) not in ansible_local.lxc.containers|d() and
        item.state|d("started") == "started" and item.fstab|d()
  tags: [ 'role::lxc:containers' ]

- name: Start LXC containers after creation
  systemd:
    name: 'lxc@{{ item.name | d(item) }}.service'
    state: '{{ "restarted" if (item.state is defined) else "started" }}'
    enabled: '{{ True if item.state|d("started") == "started" else False }}'
  loop: '{{ lxc__containers }}'
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) not in ansible_local.lxc.containers|d() and
        item.state|d("started") == "started"
  tags: [ 'role::lxc:containers' ]

- name: Restart LXC containers when modified
  systemd:  # noqa no-handler
    name: 'lxc@{{ item.0.name | d(item.0) }}.service'
    state: 'restarted'
  loop: '{{ lxc__containers | zip(lxc__register_systemd_create_override.results|d([])) | list }}'
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.0.name | d(item.0)) in ansible_local.lxc.containers|d() and
        item.0.state|d('started') == 'started' and item.1 is changed
  tags: [ 'role::lxc:containers' ]

- name: Prepare SSH access in LXC containers
  shell: |
    if lxc-attach -n "{{ item.name | d(item) }}" -- grep -q '127.0.1.1' /etc/hosts ; then
        lxc-attach -n "{{ item.name | d(item) }}" -- sed -i "/127\.0\.1\.1/d" /etc/hosts > /dev/null
    fi
    until lxc-prepare-ssh {{ item.name | d(item) }} ; do
       ((c++)) && ((c==4)) && break
       printf "Waiting for network connection inside container to settle...\n" ; sleep 5
    done
  loop: '{{ lxc__containers }}'
  when: ansible_local|d() and ansible_local.lxc|d() and
        (item.name | d(item)) not in ansible_local.lxc.containers|d() and
        (item.ssh|d(lxc__default_container_ssh))|bool and item.state|d("started") == "started"
  tags: [ 'role::lxc:containers' ]

- name: DebOps post_tasks hook
  include: "{{ lookup('debops.debops.task_src', 'lxc/post_main.yml') }}"

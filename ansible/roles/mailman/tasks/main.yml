---

- import_role:
    name: 'secret'

- name: Install required packages
  package:
    name: '{{ q("flattened", mailman__packages) }}'
    state: 'present'
  register: mailman__register_packages
  until: mailman__register_packages is succeeded

- name: Apply patches to Mailman source code
  patch:
    src: 'patches/{{ item }}.patch'
    basedir: '/usr/lib/mailman'
  with_items: '{{ mailman__patch_list }}'
  register: mailman__register_patches
  when: mailman__patch | bool
  notify: [ 'Restart mailman' ]
  tags: [ 'role::mailman:patch' ]

# mailman package forgets configuration preconfigured by debconf
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=339059
# Because of that we need to reconfigure it after installation

- name: Check current language settings in debconf
  debconf:
    name: 'mailman'
  register: mailman__register_debconf
  tags: [ 'role::mailman:patch', 'role::mailman:lang' ]

- name: Preconfigure language list in debconf
  debconf:
    name: 'mailman'
    question: 'mailman/site_languages'
    vtype: 'multiselect'
    value: '{{ (lookup("template", "lookup/mailman__languages.j2") | from_yaml) | join(", ") }}'
  register: mailman__register_debconf_question1
  tags: [ 'role::mailman:lang' ]

- name: Preconfigure default language in debconf
  debconf:
    name: 'mailman'
    question: 'mailman/default_server_language'
    vtype: 'select'
    value: '{{ lookup("template", "lookup/mailman__site_language.j2") | from_yaml }}'
  register: mailman__register_debconf_question2
  tags: [ 'role::mailman:lang' ]

- name: Reconfigure mailman package
  command: dpkg-reconfigure --frontend noninteractive mailman
  register: mailman__package_reconfigure
  when: (mailman__register_debconf_question1 is changed or
         mailman__register_debconf_question2 is changed)
  tags: [ 'role::mailman:lang' ]

- name: Run language pack conversion script
  script: scripts/convert-mailman-to-utf8
          {{ (mailman__default_languages + mailman__languages
              + mailman__register_debconf.current["mailman/used_languages"].split(" ") | unique) | join(' ') }}
  register: mailman__register_convert_script
  changed_when: mailman__register_convert_script.stdout
  when: ((mailman__register_patches|d() and mailman__register_patches is changed) or
         (mailman__register_debconf_question1|d() and mailman__register_debconf_question1 is changed) or
         (mailman__register_debconf_question2|d() and mailman__register_debconf_question2 is changed))
  tags: [ 'role::mailman:patch', 'role::mailman:lang' ]

- name: Configure Mailman
  template:
    src: 'etc/mailman/mm_cfg.py.j2'
    dest: '/etc/mailman/mm_cfg.py'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart mailman' ]

- name: Configure Postfix transport map
  template:
    src: 'etc/mailman/postfix_transport.j2'
    dest: '/etc/mailman/postfix_transport'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: mailman__register_postfix_transport

- name: Generate postfix_transport map
  command: /usr/sbin/postmap /etc/mailman/postfix_transport
  when: mailman__register_postfix_transport is changed

- name: Create Mailman site list
  shell: set -o nounset -o pipefail -o errexit &&
         echo | newlist {{ '' if (mailman__site_list_notify|bool) else '--quiet' }}
                        --language={{ mailman__site_language }} {{ mailman__site_list }} {{ mailman__site_admin }}
         {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/list/'
            + mailman__site_domain + '/' + mailman__site_list
            + '/admin/password chars=ascii,numbers,digits,hexdigits length=' + mailman__site_password_length) }}
  args:
    creates: '/var/lib/mailman/lists/{{ mailman__site_list }}/config.pck'
    executable: 'bash'
  become: True
  become_user: 'list'
  register: mailman__register_site_list
  no_log: True

- name: Set site administrator password
  command: mmsitepass {{ lookup('password', secret + '/credentials/' + ansible_fqdn
                         + '/mailman/site/site_administrator_password chars=ascii,numbers,digits,hexdigits length='
                         + mailman__site_password_length) }}
  when: mailman__register_site_list is changed
  no_log: True

- name: Set list creator password
  command: mmsitepass -c {{ lookup('password', secret + '/credentials/' + ansible_fqdn
                            + '/mailman/site/list_creator_password chars=ascii,numbers,digits,hexdigits length='
                            + mailman__site_password_length) }}
  when: mailman__register_site_list is changed
  no_log: True

- name: Remove Mailman lists if requested
  command: rmlist {% if item.purge|d() and item.purge|bool %} --archives {% endif %}
           {{ item.name }}
  args:
    removes: '/var/lib/mailman/lists/{{ item.name }}/config.pck'
    executable: 'sh'
  with_items: '{{ mailman__lists }}'
  become: True
  become_user: 'list'
  when: item.name|d() and item.state|d() and item.state == 'absent'

- name: Create Mailman lists
  shell: set -o nounset -o pipefail -o errexit &&
         echo | newlist --language={{ item.language | default(mailman__site_language) }}
         {% if item.notify|d() and not item.notify|bool %} --quiet {% endif %}
         {% if item.domain|d() and item.domain %}
         --urlhost={{ item.domain }} --emailhost={{ item.domain }}
         {% endif %}
         {{ item.name }} {{ item.owner | default(mailman__site_admin) }}
         {% if item.password|d() and item.password %}
         {{ item.password }}
         {% else %}
         {% if item.domain|d() and item.domain %}
         {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/list/'
                               + item.domain + '/' + item.name
                               + '/owner/password chars=ascii,numbers,digits,hexdigits length='
                               + mailman__admin_password_length) }}
         {% else %}
         {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/list/'
                               + mailman__site_domain + '/' + item.name
                               + '/owner/password chars=ascii,numbers,digits,hexdigits length='
                               + mailman__admin_password_length) }}
         {% endif %}
         {% endif %}
  args:
    creates: '/var/lib/mailman/lists/{{ item.name }}/config.pck'
    executable: 'bash'
  with_items: '{{ mailman__lists }}'
  become: True
  become_user: 'list'
  when: (item.name|d() and item.name and
         (item.state is undefined or item.state != 'absent'))
  no_log: True

- name: Make sure Ansible local facts directory exists
  file:
    dest: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Configure Mailman local facts
  template:
    src: 'etc/ansible/facts.d/mailman.fact.j2'
    dest: '/etc/ansible/facts.d/mailman.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  register: mailman__register_facts

- name: Re-read local facts if they have been modified
  action: setup
  when: mailman__register_facts is changed

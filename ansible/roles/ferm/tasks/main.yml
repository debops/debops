---

- name: Configure ferm status in debconf
  debconf:
    name: 'ferm'
    question: 'ferm/enable'
    vtype: 'boolean'
    value: '{{ "yes" if ferm__enabled|bool else "no" }}'
  when: ansible_pkg_mgr == 'apt'

- name: Ensure ferm is installed
  package:
    name: '{{ q("flattened", (ferm__base_packages
                              + ferm__packages)) }}'
    state: 'present'
  register: ferm__register_packages
  until: ferm__register_packages is succeeded
  when: ferm__enabled | bool

- name: Make sure required directories exist
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: 'root'
    group: 'adm'
    mode: '02750'
  with_items:
    - '/etc/ferm/rules.d'
    - '/etc/ferm/filter-input.d'
    - '/etc/ferm/hooks/pre.d'
    - '/etc/ferm/hooks/post.d'
    - '/etc/ferm/hooks/flush.d'

- name: Copy custom files to remote hosts
  copy:
    src: '{{ item.src | d(omit) }}'
    content: '{{ item.content | d(omit) }}'
    dest:  '{{ item.dest }}'
    owner: '{{ item.owner | d(omit) }}'
    group: '{{ item.group | d(omit) }}'
    mode:  '{{ item.mode  | d(omit) }}'
    directory_mode: '{{ item.directory_mode | d(omit) }}'
    follow: '{{ item.follow | d(omit) }}'
    force:  '{{ item.force  | d(omit) }}'
  with_flattened:
    - '{{ ferm__custom_files }}'
    - '{{ ferm__group_custom_files }}'
    - '{{ ferm__host_custom_files }}'
  when: ((item.src is defined or item.content is defined) and
         item.dest is defined)
  register: ferm__register_files
  tags: [ 'role::ferm:custom_files' ]

- name: Configure ferm default variables
  template:
    src: 'etc/default/ferm.j2'
    dest: '/etc/default/ferm'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart ferm' ]

- name: Divert the original ferm configuration file
  command: dpkg-divert --quiet --local --divert /etc/ferm/ferm.conf.dpkg-divert --rename /etc/ferm/ferm.conf
  args:
    creates: '/etc/ferm/ferm.conf.dpkg-divert'
  when: ferm__enabled|bool

- name: Configure main ferm config file
  template:
    src: 'etc/ferm/ferm.conf.j2'
    dest: '/etc/ferm/ferm.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  notify: [ 'Restart ferm' ]
  when: ferm__enabled|bool

- name: Revert the original configuration file
  shell: rm -f /etc/ferm/ferm.conf ; dpkg-divert --quiet --local --rename --remove /etc/ferm/ferm.conf
  args:
    removes: '/etc/ferm/ferm.conf.dpkg-divert'
    warn: False
  when: not ferm__enabled|bool

- name: Remove firewall rules
  file:
    dest: '/etc/ferm/rules.d/{{ "%03d" | format((ferm__combined_weight_map[item.value.weight_class
                                                 | d(item.value.type | d("default"))] | d("80"))|int
                                + (item.value.weight | d("0"))|int) }}_rule_{{ item.value.name | d(item.key) }}.conf'
    state: 'absent'
  with_dict: '{{ ferm__parsed_rules }}'
  register: ferm__register_rules_removed
  when: (item.value.rule_state|d(item.value.state|d('present')) == 'absent')
  tags: [ 'role::ferm:rules' ]

- name: Generate firewall rules
  template:
    src: 'etc/ferm/rules.d/{{ item.value.template | d("rule") }}.conf.j2'
    dest: '/etc/ferm/rules.d/{{ "%03d" | format((ferm__combined_weight_map[item.value.weight_class
                                                 | d(item.value.type | d("default"))] | d("80"))|int
                                + (item.value.weight | d("0"))|int) }}_rule_{{ item.value.name | d(item.key) }}.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  with_dict: '{{ ferm__parsed_rules }}'
  register: ferm__register_rules_created
  when: (item.value.rule_state|d(item.value.state|d('present')) not in [ 'absent', 'ignore' ])
  tags: [ 'role::ferm:rules' ]

- name: Remove unknown firewall rules
  shell: find /etc/ferm/rules.d -maxdepth 1 -type f
         -name '*_rule_{{ item.item.value.name | d(item.item.key) }}.conf'
         ! -name '{{ "%03d" | format((ferm__combined_weight_map[item.item.value.weight_class
                                      | d(item.item.value.type | d("default"))] | d("80"))|int
                     + (item.item.value.weight | d("0"))|int) }}_rule_{{ item.item.value.name
                                                                         | d(item.item.key) }}.conf'
         -exec rm -vf {} +
  with_items:
    - '{{ ferm__register_rules_removed.results }}'
    - '{{ ferm__register_rules_created.results }}'
  when: (item.item.key|d() and item is changed)
  tags: [ 'role::ferm:rules' ]

- name: Remove iptables INPUT rules if requested
  file:
    path: '/etc/ferm/filter-input.d/{{ ferm__weight_map[item.weight_class|d()]
           | d(item.weight | d("50")) }}_{{ item.filename
           | d(item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    state: 'absent'
  with_flattened:
    - '{{ ferm_input_list }}'
    - '{{ ferm_input_group_list }}'
    - '{{ ferm_input_host_list }}'
    - '{{ ferm_input_dependent_list }}'
  when: (ferm__enabled|bool and item.type|d() and (item.delete|d() | bool))
  register: ferm__register_input_rules_del
  tags: [ 'role::ferm:rules' ]

- name: Configure iptables INPUT rules
  template:
    src: 'etc/ferm/filter-input.d/{{ item.type }}.conf.j2'
    dest: '/etc/ferm/filter-input.d/{{ ferm__weight_map[item.weight_class|d()]
           | d(item.weight | d("50")) }}_{{ item.filename
           | d(item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  with_flattened:
    - '{{ ferm_input_list }}'
    - '{{ ferm_input_group_list }}'
    - '{{ ferm_input_host_list }}'
    - '{{ ferm_input_dependent_list }}'
  when: (ferm__enabled|bool and item.type|d() and not (item.delete|d() | bool))
  register: ferm__register_input_rules_add
  tags: [ 'role::ferm:rules' ]

- name: Restart ferm
  service:
    name: 'ferm'
    state: 'restarted'
  when: (ferm__enabled | bool and (ferm__register_files is changed or
         ferm__register_rules_created is changed or ferm__register_rules_removed is changed or
         ferm__register_input_rules_del is changed or ferm__register_input_rules_add is changed))

- name: Clear iptables rules if ferm is disabled
  service:
    name: 'ferm'
    state: 'stopped'
  when: (not ferm__enabled | bool and ferm__flush | bool)
  tags: [ 'role::ferm:rules' ]

- name: Remove deprecated ifupdown hook
  file:
    path: '/etc/network/if-pre-up.d/ferm-forward'
    state: 'absent'

- name: Disable ferm after changes when requested
  lineinfile:
    dest: '/etc/default/ferm'
    regexp: '^ENABLED="'
    line: 'ENABLED="no"'
  when: not ferm__enabled | bool

- name: Ensure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save ferm local facts
  template:
    src: 'etc/ansible/facts.d/ferm.fact.j2'
    dest: '/etc/ansible/facts.d/ferm.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  tags: [ 'role::ferm:rules' ]
  register: ferm__register_facts

- name: Update Ansible facts if they were modified
  action: setup
  when: ferm__register_facts is changed

---

- import_role:
    name: 'secret'

- name: Make sure that required UNIX group exists
  group:
    name: '{{ rabbitmq_server__group }}'
    state: 'present'
    system: True

- name: Make sure that required UNIX account exists
  user:
    name: '{{ rabbitmq_server__user }}'
    group: '{{ rabbitmq_server__group }}'
    groups: '{{ rabbitmq_server__append_groups | join(",") }}'
    home: '{{ rabbitmq_server__home }}'
    comment: 'RabbitMQ messaging server'
    password: '!'
    shell: '/bin/false'
    state: 'present'
    system: True
    append: True

  # Without this, first Erlang cookie lookup on each host
  # returns different values.
- name: Initialize Erlang cookie on the Ansible Controller
  set_fact:
    rabbitmq_server__fact_erlang_cookie: '{{ rabbitmq_server__erlang_cookie_password }}'
  delegate_to: 'localhost'
  become: False
  run_once: True
  no_log: True

- name: Configure Erlang cookie
  copy:
    content: '{{ rabbitmq_server__erlang_cookie_password }}'
    dest: '{{ rabbitmq_server__erlang_cookie_path }}'
    owner: '{{ rabbitmq_server__user }}'
    group: '{{ rabbitmq_server__group }}'
    mode: '0400'
  notify: [ 'Restart rabbitmq-server' ]
  no_log: True

- name: Ensure that configuration directory exists
  file:
    path: '/etc/rabbitmq'
    state: 'directory'
    owner: '{{ rabbitmq_server__user }}'
    group: '{{ rabbitmq_server__group }}'
    mode: '0755'

- name: Generate RabbitMQ environment file
  template:
    src: 'etc/rabbitmq/rabbitmq-env.conf.j2'
    dest: '/etc/rabbitmq/rabbitmq-env.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart rabbitmq-server' ]
  tags: [ 'role::rabbitmq_server:config' ]

- name: Install RabbitMQ packages
  package:
    name: '{{ q("flattened", (rabbitmq_server__base_packages
                              + rabbitmq_server__packages)) }}'
    state: 'present'
  register: rabbitmq_server__register_packages
  until: rabbitmq_server__register_packages is succeeded

- name: Check if the dependent config file exists
  stat:
    path: '{{ secret + "/rabbitmq_server/dependent_config/" + inventory_hostname + "/config.json" }}'
  register: rabbitmq_server__register_dependent_config_file
  become: False
  delegate_to: 'localhost'
  when: (ansible_local|d() and ansible_local.rabbitmq_server|d() and
         ansible_local.rabbitmq_server.installed is defined and
         ansible_local.rabbitmq_server.installed|bool)
  tags: [ 'role::rabbitmq_server:config' ]

- name: Load the dependent configuration from Ansible Controller
  slurp:
    src: '{{ secret + "/rabbitmq_server/dependent_config/" + inventory_hostname + "/config.json" }}'
  register: rabbitmq_server__register_dependent_config
  become: False
  delegate_to: 'localhost'
  when: (ansible_local|d() and ansible_local.rabbitmq_server|d() and
         ansible_local.rabbitmq_server.installed is defined and
         ansible_local.rabbitmq_server.installed|bool and
         rabbitmq_server__register_dependent_config_file.stat.exists|bool)
  tags: [ 'role::rabbitmq_server:config' ]

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save RabbitMQ local facts
  template:
    src: 'etc/ansible/facts.d/rabbitmq_server.fact.j2'
    dest: '/etc/ansible/facts.d/rabbitmq_server.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  register: rabbitmq_server__register_facts

- name: Update Ansible facts if they were modified
  action: setup
  when: rabbitmq_server__register_facts is changed

- name: Generate RabbitMQ configuration
  template:
    src: 'etc/rabbitmq/rabbitmq.config.j2'
    dest: '/etc/rabbitmq/rabbitmq.config'
    owner: '{{ rabbitmq_server__user }}'
    group: '{{ rabbitmq_server__group }}'
    mode: '0600'
  notify: [ 'Restart rabbitmq-server' ]
  tags: [ 'role::rabbitmq_server:config' ]

- name: Manage RabbitMQ plugins
  rabbitmq_plugin:
    names:  '{{ item.name | d(item) }}'
    state:  '{{ "enabled" if item.state|d("present") != "absent" else "disabled" }}'
    prefix: '{{ item.prefix | d(omit) }}'
    new_only: True
  with_flattened:
    - '{{ rabbitmq_server__combined_plugins }}'
  notify: [ 'Restart rabbitmq-server' ]
  tags: [ 'role::rabbitmq_server:config' ]

- name: Manage RabbitMQ virtual hosts
  rabbitmq_vhost:
    name:    '{{ item.name    | d(item) }}'
    node:    '{{ item.node    | d(omit) }}'
    state:   '{{ item.state   | d("present") }}'
    tracing: '{{ item.tracing | d(omit) }}'
  with_flattened:
    - '{{ rabbitmq_server__combined_vhosts }}'
  tags: [ 'role::rabbitmq_server:vhost', 'role::rabbitmq_server:parameter',
          'role::rabbitmq_server:policy', 'role::rabbitmq_server:user' ]

- name: Manage RabbitMQ parameters
  rabbitmq_parameter:
    component: '{{ item.component }}'
    name:      '{{ item.name }}'
    node:      '{{ item.node  | d(omit) }}'
    state:     '{{ item.state | d("present") }}'
    value:     '{{ item.value | d(omit) }}'
    vhost:     '{{ item.vhost | d(omit) }}'
  with_flattened:
    - '{{ rabbitmq_server__combined_parameters }}'
  when: (item.name|d() and item.component|d())
  tags: [ 'role::rabbitmq_server:parameter' ]

- name: Manage RabbitMQ policies
  rabbitmq_policy:
    name:     '{{ item.name }}'
    pattern:  '{{ item.pattern }}'
    tags:     '{{ item.tags }}'
    apply_to: '{{ item.apply_to | d(omit) }}'
    node:     '{{ item.node     | d(omit) }}'
    priority: '{{ item.priority | d(omit) }}'
    state:    '{{ item.state    | d("present") }}'
    vhost:    '{{ item.vhost    | d(omit) }}'
  with_flattened:
    - '{{ rabbitmq_server__combined_policies }}'
  when: (item.name|d() and item.pattern|d() and item.tags|d())
  tags: [ 'role::rabbitmq_server:policy' ]

- name: Manage RabbitMQ user accounts
  rabbitmq_user:
    user:           '{{ item.user           | d(item.name) | d(item) }}'
    force:          '{{ item.force          | d(omit) }}'
    node:           '{{ item.node           | d(omit) }}'
    permissions:    '{{ item.permissions    | d(omit) }}'
    configure_priv: '{{ item.configure_priv | d(omit) }}'
    read_priv:      '{{ item.read_priv      | d(omit) }}'
    write_priv:     '{{ item.write_priv     | d(omit) }}'
    state:          '{{ item.state          | d("present") }}'
    vhost:          '{{ item.vhost          | d(omit) }}'
    password:       '{{ item.password       | d(lookup("password",
                        secret + "/rabbitmq_server/accounts/"
                        + (item.user | d(item.name | d(item)))
                        + "/password length="
                        + rabbitmq_server__account_password_length)) }}'
    tags:           '{{ (((item.tags.split(",") | list)
                          if (item.tags|d() and item.tags is string)
                          else item.tags) | join(","))
                        if item.tags|d() else omit }}'
  with_flattened:
    - '{{ rabbitmq_server__combined_accounts }}'
  tags: [ 'role::rabbitmq_server:user' ]
  no_log: True

- name: Save RabbitMQ dependent configuration on Ansible Controller
  template:
    src: 'secret/rabbitmq_server/dependent_config/inventory_hostname/config.json.j2'
    dest: '{{ secret + "/rabbitmq_server/dependent_config/" + inventory_hostname + "/config.json" }}'
  become: False
  delegate_to: 'localhost'
  tags: [ 'role::rabbitmq_server:config' ]

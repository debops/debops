---
# Copyright (C) 2017-2024 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2017-2024 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import DebOps global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  ansible.builtin.import_role:
    name: 'secret'

- name: Make sure that required UNIX group exists
  ansible.builtin.group:
    name: '{{ rabbitmq_server__group }}'
    state: 'present'
    system: True

- name: Make sure that required UNIX account exists
  ansible.builtin.user:
    name: '{{ rabbitmq_server__user }}'
    group: '{{ rabbitmq_server__group }}'
    groups: '{{ rabbitmq_server__append_groups | join(",") }}'
    home: '{{ rabbitmq_server__home }}'
    comment: 'RabbitMQ messaging server'
    shell: '/bin/false'
    state: 'present'
    system: True
    append: True

  # Without this, first Erlang cookie lookup on each host
  # returns different values.
- name: Initialize Erlang cookie on the Ansible Controller
  ansible.builtin.set_fact:
    rabbitmq_server__fact_erlang_cookie: '{{ rabbitmq_server__erlang_cookie_password }}'
  delegate_to: 'localhost'
  become: False
  run_once: True
  no_log: '{{ debops__no_log | d(True) }}'

- name: Configure Erlang cookie
  ansible.builtin.copy:
    content: '{{ rabbitmq_server__erlang_cookie_password }}'
    dest: '{{ rabbitmq_server__erlang_cookie_path }}'
    owner: '{{ rabbitmq_server__user }}'
    group: '{{ rabbitmq_server__group }}'
    mode: '0400'
  notify: [ 'Restart rabbitmq-server' ]
  no_log: '{{ debops__no_log | d(True) }}'

- name: Ensure that configuration directory exists
  ansible.builtin.file:
    path: '/etc/rabbitmq'
    state: 'directory'
    owner: '{{ rabbitmq_server__user }}'
    group: '{{ rabbitmq_server__group }}'
    mode: '0755'

- name: Generate RabbitMQ environment file
  ansible.builtin.template:
    src: 'etc/rabbitmq/rabbitmq-env.conf.j2'
    dest: '/etc/rabbitmq/rabbitmq-env.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart rabbitmq-server' ]
  tags: [ 'role::rabbitmq_server:config' ]

- name: Install RabbitMQ packages
  ansible.builtin.package:
    name: '{{ q("flattened", (rabbitmq_server__base_packages
                              + rabbitmq_server__packages)) }}'
    state: 'present'
  register: rabbitmq_server__register_packages
  until: rabbitmq_server__register_packages is succeeded

- name: Check if the dependent config file exists
  ansible.builtin.stat:
    path: '{{ secret + "/rabbitmq_server/dependent_config/" + inventory_hostname + "/config.json" }}'
  register: rabbitmq_server__register_dependent_config_file
  become: False
  delegate_to: 'localhost'
  when: (ansible_local | d() and ansible_local.rabbitmq_server | d() and
         ansible_local.rabbitmq_server.installed is defined and
         ansible_local.rabbitmq_server.installed | bool)
  tags: [ 'role::rabbitmq_server:config' ]

- name: Load the dependent configuration from Ansible Controller
  ansible.builtin.slurp:
    src: '{{ secret + "/rabbitmq_server/dependent_config/" + inventory_hostname + "/config.json" }}'
  register: rabbitmq_server__register_dependent_config
  become: False
  delegate_to: 'localhost'
  when: (ansible_local | d() and ansible_local.rabbitmq_server | d() and
         ansible_local.rabbitmq_server.installed is defined and
         ansible_local.rabbitmq_server.installed | bool and
         rabbitmq_server__register_dependent_config_file.stat.exists | bool)
  tags: [ 'role::rabbitmq_server:config' ]

- name: Make sure that Ansible local facts directory exists
  ansible.builtin.file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save RabbitMQ local facts
  ansible.builtin.template:
    src: 'etc/ansible/facts.d/rabbitmq_server.fact.j2'
    dest: '/etc/ansible/facts.d/rabbitmq_server.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Update Ansible facts if they were modified
  ansible.builtin.meta: 'flush_handlers'

- name: Generate RabbitMQ configuration
  ansible.builtin.template:
    src: 'etc/rabbitmq/rabbitmq.config.j2'
    dest: '/etc/rabbitmq/rabbitmq.config'
    owner: '{{ rabbitmq_server__user }}'
    group: '{{ rabbitmq_server__group }}'
    mode: '0600'
  notify: [ 'Restart rabbitmq-server' ]
  tags: [ 'role::rabbitmq_server:config' ]

- name: Manage RabbitMQ plugins
  community.rabbitmq.rabbitmq_plugin:
    names:  '{{ item.name | d(item) }}'
    state:  '{{ "enabled" if item.state | d("present") != "absent" else "disabled" }}'
    prefix: '{{ item.prefix | d(omit) }}'
    new_only: True
  loop: '{{ q("flattened", rabbitmq_server__combined_plugins) }}'
  notify: [ 'Restart rabbitmq-server' ]
  tags: [ 'role::rabbitmq_server:config' ]

- name: Manage RabbitMQ virtual hosts
  community.rabbitmq.rabbitmq_vhost:
    name:    '{{ item.name | d(item) }}'
    node:    '{{ item.node | d(omit) }}'
    state:   '{{ item.state | d("present") }}'
    tracing: '{{ item.tracing | d(omit) }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_vhosts) }}'
  tags: [ 'role::rabbitmq_server:vhost', 'role::rabbitmq_server:parameter',
          'role::rabbitmq_server:policy', 'role::rabbitmq_server:user' ]

- name: Manage RabbitMQ virtual host limits
  community.rabbitmq.rabbitmq_vhost_limits:
    vhost: '{{ item.vhost }}'
    node: '{{ item.node | d(omit) }}'
    max_connections: '{{ item.max_connections | d(omit) }}'
    max_queues: '{{ item.max_queues | d(omit) }}'
    state: '{{ item.state | d("present") }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_vhost_limits) }}'
  tags: [ 'role::rabbitmq_server:vhost' ]

- name: Manage RabbitMQ feature flags
  community.rabbitmq.rabbitmq_feature_flag:
    name: '{{ item.name }}'
    node: '{{ item.node | d(omit) }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_feature_flags) }}'

- name: Manage RabbitMQ global parameters
  community.rabbitmq.rabbitmq_global_parameter:
    name:      '{{ item.name }}'
    node:      '{{ item.node | d(omit) }}'
    state:     '{{ item.state | d("present") }}'
    value:     '{{ item.value | d(omit) }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_global_parameters) }}'
  tags: [ 'role::rabbitmq_server:parameter' ]

- name: Manage RabbitMQ parameters
  community.rabbitmq.rabbitmq_parameter:
    component: '{{ item.component }}'
    name:      '{{ item.name }}'
    node:      '{{ item.node | d(omit) }}'
    state:     '{{ item.state | d("present") }}'
    value:     '{{ item.value | d(omit) }}'
    vhost:     '{{ item.vhost | d(omit) }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_parameters) }}'
  when: (item.name | d() and item.component | d())
  tags: [ 'role::rabbitmq_server:parameter' ]

- name: Manage RabbitMQ policies
  community.rabbitmq.rabbitmq_policy:
    name:     '{{ item.name }}'
    pattern:  '{{ item.pattern }}'
    tags:     '{{ item.tags }}'
    apply_to: '{{ item.apply_to | d(omit) }}'
    node:     '{{ item.node | d(omit) }}'
    priority: '{{ item.priority | d(omit) }}'
    state:    '{{ item.state | d("present") }}'
    vhost:    '{{ item.vhost | d(omit) }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_policies) }}'
  when: (item.name | d() and item.pattern | d() and item.tags | d())
  tags: [ 'role::rabbitmq_server:policy' ]

- name: Manage RabbitMQ user accounts
  community.rabbitmq.rabbitmq_user:
    user:           '{{ item.user | d(item.name) | d(item) }}'
    force:          '{{ item.force | d(omit) }}'
    node:           '{{ item.node | d(omit) }}'
    permissions:    '{{ item.permissions | d(omit) }}'  # noqa args[module]
    configure_priv: '{{ item.configure_priv | d(omit) }}'
    read_priv:      '{{ item.read_priv | d(omit) }}'
    write_priv:     '{{ item.write_priv | d(omit) }}'
    state:          '{{ item.state | d("present") }}'
    vhost:          '{{ item.vhost | d(omit) }}'
    password:       '{{ item.password | d(lookup("password",
                        secret + "/rabbitmq_server/accounts/"
                        + (item.user | d(item.name | d(item)))
                        + "/password length="
                        + rabbitmq_server__account_password_length)) }}'
    tags:           '{{ (((item.tags.split(",") | list)
                          if (item.tags | d() and item.tags is string)
                          else item.tags) | join(","))
                        if item.tags | d() else omit }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_accounts) }}'
  tags: [ 'role::rabbitmq_server:user' ]
  no_log: '{{ debops__no_log | d(True) }}'

- name: Manage RabbitMQ user limits
  community.rabbitmq.rabbitmq_user_limits:
    user: '{{ item.user }}'
    node: '{{ item.node | d(omit) }}'
    max_connections: '{{ item.max_connections | d(omit) }}'
    max_channels: '{{ item.max_channels | d(omit) }}'
    state: '{{ item.state | d("present") }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_user_limits) }}'
  tags: [ 'role::rabbitmq_server:user' ]

- name: Manage RabbitMQ exchanges
  community.rabbitmq.rabbitmq_exchange:
    name: '{{ item.name }}'
    arguments: '{{ item.arguments | d(omit) }}'
    auto_delete: '{{ item.auto_delete | d(omit) }}'
    ca_cert: '{{ item.ca_cert | d(omit) }}'
    client_cert: '{{ item.client_cert | d(omit) }}'
    client_key: '{{ item.client_key | d(omit) }}'
    durable:  '{{ item.durable | d(omit) }}'
    exchange_type: '{{ item.exchange_type | d(omit) }}'
    internal: '{{ item.internal | d(omit) }}'
    login_host: '{{ item.login_host | d(omit) }}'
    login_password: '{{ item.login_password | d(omit) }}'
    login_port: '{{ item.login_port | d(omit) }}'
    login_protocol: '{{ item.login_protocol | d(omit) }}'
    login_user: '{{ item.login_user | d(omit) }}'
    state: '{{ item.state | d("present") }}'
    vhost: '{{ item.vhost | d(omit) }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_exchanges) }}'
  no_log: '{{ debops__no_log | d(True) }}'

- name: Manage RabbitMQ queues
  community.rabbitmq.rabbitmq_queue:
    name: '{{ item.name }}'
    arguments: '{{ item.arguments | d(omit) }}'
    auto_delete: '{{ item.auto_delete | d(omit) }}'
    auto_expires: '{{ item.auto_expires | d(omit) }}'
    ca_cert: '{{ item.ca_cert | d(omit) }}'
    client_cert: '{{ item.client_cert | d(omit) }}'
    client_key: '{{ item.client_key | d(omit) }}'
    dead_letter_exchange: '{{ item.dead_letter_exchange | d(omit) }}'
    dead_letter_routing_key: '{{ item.dead_letter_routing_key | d(omit) }}'
    durable:  '{{ item.durable | d(omit) }}'
    login_host: '{{ item.login_host | d(omit) }}'
    login_password: '{{ item.login_password | d(omit) }}'
    login_port: '{{ item.login_port | d(omit) }}'
    login_protocol: '{{ item.login_protocol | d(omit) }}'
    login_user: '{{ item.login_user | d(omit) }}'
    max_length: '{{ item.max_length | d(omit) }}'
    max_priority: '{{ item.max_priority | d(omit) }}'
    message_ttl: '{{ item.message_ttl | d(omit) }}'
    state: '{{ item.state | d("present") }}'
    vhost: '{{ item.vhost | d(omit) }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_queues) }}'
  no_log: '{{ debops__no_log | d(True) }}'
  tags: [ 'role::rabbitmq_server:queue' ]

- name: Manage RabbitMQ bindings
  community.rabbitmq.rabbitmq_binding:
    name: '{{ item.name }}'
    ca_cert: '{{ item.ca_cert | d(omit) }}'
    client_cert: '{{ item.client_cert | d(omit) }}'
    client_key: '{{ item.client_key | d(omit) }}'
    destination: '{{ item.destination }}'
    destination_type: '{{ item.destination_type }}'
    login_host: '{{ item.login_host | d(omit) }}'
    login_password: '{{ item.login_password | d(omit) }}'
    login_port: '{{ item.login_port | d(omit) }}'
    login_protocol: '{{ item.login_protocol | d(omit) }}'
    login_user: '{{ item.login_user | d(omit) }}'
    arguments: '{{ item.arguments | d(omit) }}'
    routing_key: '{{ item.routing_key | d(omit) }}'
    state: '{{ item.state | d("present") }}'
    vhost: '{{ item.vhost | d(omit) }}'
  loop: '{{ q("flattened", rabbitmq_server__combined_bindings) }}'
  no_log: '{{ debops__no_log | d(True) }}'

- name: Save RabbitMQ dependent configuration on Ansible Controller
  ansible.builtin.template:
    src: 'secret/rabbitmq_server/dependent_config/inventory_hostname/config.json.j2'
    dest: '{{ secret + "/rabbitmq_server/dependent_config/" + inventory_hostname + "/config.json" }}'
    mode: '0644'
  become: False
  delegate_to: 'localhost'
  tags: [ 'role::rabbitmq_server:config' ]

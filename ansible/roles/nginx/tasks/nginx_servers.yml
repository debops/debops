---

- name: Create global webroot directories if allowed
  file:
    path: '{{ item.root | d(
              "{}/sites/{}/{}".format(
                nginx_www + ("/" + item.owner if item.owner | d() else ""),
                (item.name if item.name is string else item.name[0]) | d("default"),
                item.public_dir_name | d(nginx_public_dir_name))
              ) }}'
    state: 'directory'
    owner: '{{ item.owner | d(nginx_webroot_owner) }}'
    group: '{{ item.group | d(item.owner | d(nginx_webroot_group)) }}'
    mode: '{{ item.mode | d(nginx_webroot_mode) }}'
  with_flattened:
    - '{{ nginx__servers }}'
    - '{{ nginx__default_servers }}'
    - '{{ nginx__internal_servers }}'
    - '{{ nginx__dependent_servers }}'
    - '{{ nginx_servers | d([]) }}'
    - '{{ nginx_default_servers | d([]) }}'
    - '{{ nginx_internal_servers | d([]) }}'
    - '{{ nginx_dependent_servers | d([]) }}'
  when: ((item.webroot_create|d(nginx_webroot_create)|bool) and
         item.state|d('present') != 'absent')

- name: Create default welcome page if enabled
  template:
    src: '{{ item.welcome_template | d(nginx_welcome_template) }}'
    dest: '{{ item.root + "/index.html"
              if item.root | d()
              else ("{}/sites/{}/{}/index.html".format(
                nginx_www + ("/" + item.owner if item.owner | d() else ""),
                (item.name if item.name is string else item.name[0]) | d("default"),
                item.public_dir_name | d(nginx_public_dir_name))
              ) }}'
    owner: '{{ item.owner | d(nginx_webroot_owner) }}'
    group: '{{ item.group | d(item.owner | d(nginx_webroot_group)) }}'
    force: '{{ item.welcome_force|d() | bool }}'
  with_flattened:
    - '{{ nginx__servers }}'
    - '{{ nginx__default_servers }}'
    - '{{ nginx__internal_servers }}'
    - '{{ nginx__dependent_servers }}'
    - '{{ nginx_servers | d([]) }}'
    - '{{ nginx_default_servers | d([]) }}'
    - '{{ nginx_internal_servers | d([]) }}'
    - '{{ nginx_dependent_servers | d([]) }}'
  when: ((item.webroot_create|d(nginx_webroot_create)|bool) and
         item.state|d('present') != 'absent' and
         (item.delete is undefined or not item.delete|bool) and
         (item.welcome|d() | bool))

- name: Copy 'normalize.css' CSS file for welcome page
  template:
    src: 'srv/www/sites/welcome/public/normalize.css'
    dest: '{{ item.root + "/normalize.css"
              if item.root | d()
              else ("{}/sites/{}/{}/normalize.css".format(
                nginx_www + ("/" + item.owner if item.owner | d() else ""),
                (item.name if item.name is string else item.name[0]) | d("default"),
                item.public_dir_name | d(nginx_public_dir_name))
              ) }}'
    owner: '{{ item.owner | d(nginx_webroot_owner) }}'
    group: '{{ item.group | d(item.owner | d(nginx_webroot_group)) }}'
    force: '{{ item.welcome_force|d() | bool }}'
  with_flattened:
    - '{{ nginx__servers }}'
    - '{{ nginx__default_servers }}'
    - '{{ nginx__internal_servers }}'
    - '{{ nginx__dependent_servers }}'
    - '{{ nginx_servers | d([]) }}'
    - '{{ nginx_default_servers | d([]) }}'
    - '{{ nginx_internal_servers | d([]) }}'
    - '{{ nginx_dependent_servers | d([]) }}'
  when: ((item.webroot_create|d(nginx_webroot_create)|bool) and
         item.state|d('present') != 'absent' and
         (item.delete is undefined or not item.delete|bool) and
         (item.welcome|d() | bool))

- name: Remove nginx server configuration if requested
  file:
    path: '/etc/nginx/sites-available/{{ item.filename | d(item.name
                                                           if item.name is string
                                                           else item.name[0] | d("default")) }}.conf'
    state: 'absent'
  with_flattened:
    - '{{ nginx__servers }}'
    - '{{ nginx__default_servers }}'
    - '{{ nginx__internal_servers }}'
    - '{{ nginx__dependent_servers }}'
    - '{{ nginx_servers | d([]) }}'
    - '{{ nginx_default_servers | d([]) }}'
    - '{{ nginx_internal_servers | d([]) }}'
    - '{{ nginx_dependent_servers | d([]) }}'
  when: (item.name is defined and
         ((item.state|d("present") == 'absent') or (item.delete|d()|bool)))

- name: Get last used HTTP default_server for default_server roulette
  set_fact:
    nginx_register_default_server_saved: '{{ ansible_local.nginx.default_server }}'
  when: (ansible_local is defined and ansible_local.nginx is defined and
         ansible_local.nginx.default_server is defined)

- name: Get last used HTTPS default_server for default_server roulette
  set_fact:
    nginx_register_default_server_ssl_saved: '{{ ansible_local.nginx.default_server_ssl }}'
  when: (ansible_local is defined and ansible_local.nginx is defined and
         ansible_local.nginx.default_server_ssl is defined)

- name: Get HTTP server from nginx defaults for default_server roulette
  set_fact:
    nginx_register_default_server_name: '{{ nginx_default_name }}'
  when: nginx_default_name is defined and nginx_default_name

- name: Get HTTPS server from nginx defaults for default_server roulette
  set_fact:
    nginx_register_default_server_ssl_name: '{{ nginx_default_ssl_name }}'
  when: nginx_default_ssl_name is defined and nginx_default_ssl_name

- name: Get first server that listens on http port for default_server roulette
  set_fact:
    nginx_register_default_server_http: '{{ item.name if item.name is string else item.name[0] | d("default") }}'
  with_flattened: '{{ (nginx__servers + nginx__default_servers + nginx__internal_servers + nginx__dependent_servers
                       + nginx_servers|d([]) + nginx_default_servers|d([])
                       + nginx_internal_servers|d([]) + nginx_dependent_servers|d([]))[::-1] }}'
  when: (item.state|d('present') != 'absent' and
         (item.enabled|d(True)|bool) and
         (item.listen|d(True)) and
         ((item.ssl is undefined or not item.ssl | bool) or not nginx_pki | bool))

- name: Get first server that listens on https port for default_server roulette
  set_fact:
    nginx_register_default_server_https: '{{ item.name if item.name is string else item.name[0] | d("default") }}'
  with_flattened: '{{ (nginx__servers + nginx__default_servers + nginx__internal_servers + nginx__dependent_servers
                       + nginx_servers|d([]) + nginx_default_servers|d([])
                       + nginx_internal_servers|d([]) + nginx_dependent_servers|d([]))[::-1] }}'
  when: (item.state|d('present') != 'absent' and (item.enabled is undefined or item.enabled|bool) and
         (item.listen_ssl is undefined or item.listen_ssl|d()) and
         ((item.ssl|d() and item.ssl | bool) or
          (item.ssl is undefined and nginx_pki | bool)))

- name: Spin the HTTP default_server roulette!
  set_fact:
    nginx_register_default_server: '{{ nginx_register_default_server_saved |
                                         default(nginx_register_default_server_name |
                                           default(nginx_register_default_server_http |
                                             default(""))) }}'

- name: Spin the HTTPS default_server roulette!
  set_fact:
    nginx_register_default_server_ssl: '{{ nginx_register_default_server_ssl_saved |
                                             default(nginx_register_default_server_ssl_name |
                                               default(nginx_register_default_server_https |
                                                 default(""))) }}'

- name: Generate nginx server configuration
  template:
    src: 'etc/nginx/sites-available/{{ item.type | d(nginx_default_type) }}.conf.j2'
    dest: '/etc/nginx/sites-available/{{ item.filename | d(item.name
                                                           if item.name is string
                                                           else item.name[0] | d("default")) }}.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_flattened:
    - '{{ nginx__servers }}'
    - '{{ nginx__default_servers }}'
    - '{{ nginx__internal_servers }}'
    - '{{ nginx__dependent_servers }}'
    - '{{ nginx_servers | d([]) }}'
    - '{{ nginx_default_servers | d([]) }}'
    - '{{ nginx_internal_servers | d([]) }}'
    - '{{ nginx_dependent_servers | d([]) }}'
  notify: [ 'Test nginx and reload' ]
  when: (item.state|d('present') != 'absent' and
         (item.delete is undefined or not item.delete|bool))

- name: Disable nginx server configuration
  file:
    path: '/etc/nginx/sites-enabled/{{ item.filename
                                       | d(item.name if item.name is string else item.name[0] | d("default")) }}.conf'
    state: 'absent'
  with_flattened:
    - '{{ nginx__servers }}'
    - '{{ nginx__default_servers }}'
    - '{{ nginx__internal_servers }}'
    - '{{ nginx__dependent_servers }}'
    - '{{ nginx_servers | d([]) }}'
    - '{{ nginx_default_servers | d([]) }}'
    - '{{ nginx_internal_servers | d([]) }}'
    - '{{ nginx_dependent_servers | d([]) }}'
  notify: [ 'Test nginx and restart' ]
  when: (item.name is defined and
         ((item.state|d("present") == 'absent') or
          (item.enabled|d() and not item.enabled|bool) or
          (item.delete|d()|bool)))

  ## https://stackoverflow.com/a/28888474
- name: Test if Ansible is running in check mode
  command: /bin/true
  changed_when: False
  register: nginx__register_check_mode

- name: Save fact if Ansible is running in check mode in variable
  set_fact:
    nginx__fact_check_mode: '{{ nginx__register_check_mode is skipped }}'

- name: Enable nginx server configuration
  file:
    path: '/etc/nginx/sites-enabled/{{ item.filename
                                       | d(item.name if item.name is string else item.name[0] | d("default")) }}.conf'
    src: '/etc/nginx/sites-available/{{ item.filename
                                        | d(item.name if item.name is string else item.name[0] | d("default")) }}.conf'
    state: 'link'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_flattened:
    - '{{ nginx__servers }}'
    - '{{ nginx__default_servers }}'
    - '{{ nginx__internal_servers }}'
    - '{{ nginx__dependent_servers }}'
    - '{{ nginx_servers | d([]) }}'
    - '{{ nginx_default_servers | d([]) }}'
    - '{{ nginx_internal_servers | d([]) }}'
    - '{{ nginx_dependent_servers | d([]) }}'
  notify: [ 'Test nginx and restart' ]
  when: (item.state|d('present') != 'absent' and
         (item.enabled|d(True)|bool) and
         (item.delete is undefined or not item.delete|bool) and
         not nginx__fact_check_mode|bool)

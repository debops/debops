---
# Copyright (C) 2015-2020 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2015-2020 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

- name: Manage rsyslog APT packages
  apt:
    name: '{{ (rsyslog__base_packages
               + (rsyslog__tls_packages if (rsyslog__pki|bool) else [])
               + rsyslog__packages) | flatten }}'
    state: '{{ rsyslog__deploy_state }}'
    purge: True
  register: rsyslog__register_packages
  until: rsyslog__register_packages is succeeded
  when: rsyslog__enabled|bool and ansible_pkg_mgr == 'apt'

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'

- name: Save rsyslog local facts
  template:
    src: 'etc/ansible/facts.d/rsyslog.fact.j2'
    dest: '/etc/ansible/facts.d/rsyslog.fact'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'
  tags: [ 'meta::facts' ]

- name: Update Ansible facts if they were modified
  meta: 'flush_handlers'

- name: Create required system group
  group:
    name: '{{ rsyslog__group }}'
    state: 'present'
    system: True
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and
        rsyslog__unprivileged|bool and rsyslog__group != 'root'

- name: Create required system user
  user:
    name: '{{ rsyslog__user }}'
    group: '{{ rsyslog__group }}'
    groups: '{{ rsyslog__append_groups | join(",") | default(omit) }}'
    append: True
    home: '{{ rsyslog__home }}'
    shell: '/bin/false'
    state: 'present'
    createhome: False
    system: True
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and
        rsyslog__unprivileged|bool and rsyslog__user != 'root'

- name: Fix directory permissions if needed
  file:
    path: '/var/spool/rsyslog'
    owner: '{{ rsyslog__user }}'
    group: '{{ rsyslog__file_group }}'
    mode: '0700'
  register: rsyslog__register_unprivileged_files
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and
        rsyslog__unprivileged|bool and rsyslog__user != 'root'

- name: Update directory and file permissions
  shell: |
    [ ! -d {{ rsyslog__home }} ] \
      || ( [ "$(stat -c '%G' {{ rsyslog__home }})" = "{{ rsyslog__group }}" ] \
             || chown -v root:{{ rsyslog__group }} {{ rsyslog__home }} ; \
           [ "$(stat -c '%a' {{ rsyslog__home }})" = "775" ] \
             || chmod -v 775 {{ rsyslog__home }} )
    for i in {{ rsyslog__default_logfiles | join(" ") }} ; do
      [ ! -f ${i} ] || \
        ( [ "$(stat -c '%U' ${i})" = "{{ rsyslog__file_owner }}" ] \
        || chown -v {{ rsyslog__file_owner }}:{{ rsyslog__file_group }} ${i} )
    done
  register: rsyslog__register_file_permissions
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and
        rsyslog__unprivileged|bool
  changed_when: rsyslog__register_file_permissions.stdout|d()
  notify: [ 'Check and restart rsyslogd' ]

- name: Create systemd-tmpfiles override
  copy:
    dest: '/etc/tmpfiles.d/rsyslog-var-log.conf'
    mode: '0755'
    content: 'z {{ rsyslog__home }} 0775 root {{ rsyslog__group }} -'
  notify: [ 'Create temporary files' ]
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and
        ansible_service_mgr == "systemd" and rsyslog__unprivileged|bool and
        ansible_distribution == "Debian"

- name: Divert main rsyslog configuration file
  dpkg_divert:
    path: '/etc/rsyslog.conf'
    state: 'present'
  notify: [ 'Check and restart rsyslogd' ]
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and
        ansible_pkg_mgr == 'apt'

- name: Generate main rsyslog configuration
  template:
    src: 'etc/rsyslog.conf.j2'
    dest: '/etc/rsyslog.conf'
    mode: '0644'
  notify: [ 'Check and restart rsyslogd' ]
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'

- name: Manage configuration file diversions
  dpkg_divert:
    path: '{{ "/etc/rsyslog.d/" + (item.divert_to | d(item.name)) }}'
    state: '{{ "present"
               if (item.state|d("present") not in [ "absent", "ignore", "init" ])
               else "absent" }}'
  loop: '{{ rsyslog__combined_rules | flatten | debops.debops.parse_kv_items
            | selectattr("divert", "defined") | list
            | selectattr("divert", "equalto", True) | list }}'
  loop_control:
    label: '{{ {"name": item.name, "state": (item.state|d("present")) } }}'
  notify: [ 'Check and restart rsyslogd' ]
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'

- name: Generate rsyslog configuration rules
  template:
    src: 'etc/rsyslog.d/template.conf.j2'
    dest: '{{ "/etc/rsyslog.d/" + item.name }}'
    owner: '{{ item.owner | d("root") }}'
    group: '{{ item.group | d("root") }}'
    mode:  '{{ item.mode  | d("0644") }}'
  loop: '{{ rsyslog__combined_rules | flatten | debops.debops.parse_kv_items }}'
  loop_control:
    label: '{{ {"name": item.name, "state": (item.state|d("present")) } }}'
  when: (rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and
         item.state|d('present') not in [ 'absent', 'ignore', 'init' ] and
         (item.options|d() or item.raw|d()))
  notify: [ 'Check and restart rsyslogd' ]

- name: Remove custom config files when requested
  file:
    path: '{{ "/etc/rsyslog.d/" + item.name }}'
    state: 'absent'
  loop: '{{ rsyslog__combined_rules | flatten | debops.debops.parse_kv_items }}'
  loop_control:
    label: '{{ {"name": item.name, "state": (item.state|d("present")) } }}'
  when: (rsyslog__enabled|bool and rsyslog__deploy_state != 'absent' and
         (item.divert is undefined or not item.divert|bool) and
         item.state|d('present') == 'absent')
  notify: [ 'Check and restart rsyslogd' ]

- name: Prepare cleanup during package removal
  import_role:
    name: 'dpkg_cleanup'
  vars:
    dpkg_cleanup__dependent_packages:
      - '{{ rsyslog__dpkg_cleanup__dependent_packages }}'
  when: rsyslog__enabled|bool and rsyslog__deploy_state != 'absent'
  tags: [ 'role::dpkg_cleanup', 'skip::dpkg_cleanup',
          'role::rsyslog:dpkg_cleanup' ]

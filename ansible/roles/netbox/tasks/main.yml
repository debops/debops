---

- import_role:
    name: 'secret'

- name: Install required packages
  package:
    name: '{{ q("flattened", (netbox__base_packages
                              + netbox__packages)) }}'
    state: 'present'
  register: netbox__register_packages
  until: netbox__register_packages is succeeded

- name: Create NetBox system group
  group:
    name: '{{ netbox__group }}'
    state: 'present'
    system: True

- name: Create NetBox system user
  user:
    name: '{{ netbox__user }}'
    group: '{{ netbox__group }}'
    home: '{{ netbox__home }}'
    comment: '{{ netbox__gecos }}'
    shell: '{{ netbox__shell }}'
    state: 'present'
    system: True

- name: Create additional directories used by Netbox
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: '{{ netbox__user }}'
    group: '{{ netbox__group }}'
    mode: '0755'
  with_items:
    - '{{ netbox__src }}'
    - '{{ netbox__lib }}'
    - '{{ netbox__data }}'
    - '{{ netbox__config_media_root }}'
    - '{{ netbox__config_reports_root }}'

- name: Clone NetBox source code
  git:
    repo: '{{ netbox__git_repo }}'
    dest: '{{ netbox__git_dest }}'
    version: '{{ netbox__git_version }}'
    bare: True
    update: True
    verify_commit: True
  become: True
  become_user: '{{ netbox__user }}'
  register: netbox__register_source

- name: Check if NetBox is installed
  stat:
    path: '{{ netbox__git_checkout }}'
  register: netbox__register_installed

- name: Check current virtualenv version
  stat:
    path: '{{ netbox__virtualenv + "/bin/python" }}'
  register: netbox__register_virtualenv_version

- name: Remove old python2 based virtualenv
  file:
    path: '{{ netbox__virtualenv }}'
    state: 'absent'
  register: netbox__register_virtalenv_deleted
  when: ( netbox__virtualenv_version == '3' and
          netbox__register_virtualenv_version.stat.lnk_target|d() == 'python2' )

- name: Create NetBox checkout directory
  file:
    path: '{{ netbox__git_checkout }}'
    state: 'directory'
    owner: '{{ netbox__user }}'
    group: '{{ netbox__group }}'
    mode: '0755'

- name: Prepare NetBox git worktree
  copy:
    content: 'gitdir: {{ netbox__git_dest }}'
    dest: '{{ netbox__git_checkout + "/.git" }}'
    owner: '{{ netbox__user }}'
    group: '{{ netbox__group }}'
    mode: '0644'

- name: Get commit hash of target checkout
  environment:
    GIT_WORK_TREE: '{{ netbox__git_checkout }}'
  command: git rev-parse {{ netbox__git_version }}
  args:
    chdir: '{{ netbox__git_dest }}'
    warn: False
  become: True
  become_user: '{{ netbox__user }}'
  register: netbox__register_target_branch
  changed_when: netbox__register_target_branch.stdout != netbox__register_source.before

- name: Checkout NetBox
  environment:
    GIT_WORK_TREE: '{{ netbox__git_checkout }}'
  command: git checkout -f {{ netbox__git_version }}
  args:
    chdir: '{{ netbox__git_dest }}'
    warn: False
  become: True
  become_user: '{{ netbox__user }}'
  register: netbox__register_checkout
  until: netbox__register_checkout is succeeded
  notify: [ 'Restart gunicorn for netbox', 'Restart netbox internal appserver' ]
  when: (netbox__register_source.before is undefined or
         (netbox__register_source.before|d() and netbox__register_target_branch.stdout|d() and
          netbox__register_source.before != netbox__register_target_branch.stdout) or
          not netbox__register_installed.stat.exists|bool or
          netbox__register_virtalenv_deleted.changed|bool)

- name: Create Python virtualenv for NetBox
  pip:
    name: [ 'pip', 'setuptools' ]
    virtualenv: '{{ netbox__virtualenv }}'
    virtualenv_python: '{{ "python" + netbox__virtualenv_version }}'
    # This is required due to an issue with setuptools
    # https://github.com/digitalocean/netbox/issues/864
    state: 'forcereinstall'
  become: True
  become_user: '{{ netbox__user }}'
  register: netbox__register_virtualenv
  until: netbox__register_virtualenv is succeeded
  changed_when: (netbox__register_virtualenv is success and
                 netbox__register_virtualenv.stdout is search('New python executable in'))

- name: Clean up stale Python bytecode
  command: find . -name '*.pyc' -delete
  args:
    chdir: '{{ netbox__git_checkout + "/netbox" }}'
  become: True
  become_user: '{{ netbox__user }}'
  when: netbox__register_checkout is changed

- name: Install NetBox requirements in virtualenv
  pip:
    virtualenv: '{{ netbox__virtualenv }}'
    requirements: '{{ netbox__git_checkout + "/requirements.txt" }}'
    extra_args: '--upgrade'
  register: netbox__register_pip_install
  until: netbox__register_pip_install is succeeded
  become: True
  become_user: '{{ netbox__user }}'
  notify: [ 'Restart gunicorn for netbox', 'Restart netbox internal appserver' ]
  when: netbox__register_checkout is changed

- name: Install additional Python modules in virtualenv
  pip:
    name:       '{{ item.name | d(item) }}'
    version:    '{{ item.version | d(omit) }}'
    virtualenv: '{{ netbox__virtualenv }}'
  become: True
  become_user: '{{ netbox__user }}'
  with_flattened: '{{ netbox__virtualenv_pip_packages }}'
  when: netbox__register_checkout is changed and
        item.state|d('present') not in [ 'absent', 'ignore' ]

- name: Generate NetBox configuration
  template:
    src: 'usr/local/lib/netbox/configuration.py.j2'
    dest: '{{ netbox__git_checkout + "/netbox/netbox/configuration.py" }}'
    owner: '{{ netbox__user }}'
    group: '{{ netbox__group }}'
    mode: '0640'
  notify: [ 'Restart gunicorn for netbox', 'Restart netbox internal appserver' ]
  tags: [ 'role::netbox:config' ]

- name: Perform database installation or migration
  environment:
    VIRTUAL_ENV: '{{ netbox__virtualenv }}'
    PATH: '{{ netbox__virtualenv_env_path }}'
  command: ./manage.py migrate
  args:
    chdir: '{{ netbox__git_checkout + "/netbox" }}'
  become: True
  become_user: '{{ netbox__user }}'
  when: netbox__register_checkout is changed
  register: netbox__register_migration

- name: Create superuser account
  environment:
    VIRTUAL_ENV: '{{ netbox__virtualenv }}'
    PATH: '{{ netbox__virtualenv_env_path }}'
    SUPERUSER_NAME: '{{ netbox__superuser_name }}'
    SUPERUSER_EMAIL: '{{ netbox__superuser_email }}'
    SUPERUSER_PASSWORD: '{{ netbox__superuser_password }}'
  shell: set -o nounset -o pipefail -o errexit &&
         echo "from django.contrib.auth.models import User;
               User.objects.create_superuser('${SUPERUSER_NAME}', '${SUPERUSER_EMAIL}', '${SUPERUSER_PASSWORD}')"
         | ./manage.py shell
  args:
    chdir: '{{ netbox__git_checkout + "/netbox" }}'
    executable: 'bash'
  become: True
  become_user: '{{ netbox__user }}'
  when: (not netbox__register_installed.stat.exists|bool and
         not netbox__register_migration.stdout is search('No migrations to apply.'))
  no_log: True

- name: Generate static assets
  environment:
    VIRTUAL_ENV: '{{ netbox__virtualenv }}'
    PATH: '{{ netbox__virtualenv_env_path }}'
  command: ./manage.py collectstatic --no-input
  args:
    chdir: '{{ netbox__git_checkout + "/netbox" }}'
  become: True
  become_user: '{{ netbox__user }}'
  when: netbox__register_checkout is changed

- name: Load initial data
  environment:
    VIRTUAL_ENV: '{{ netbox__virtualenv }}'
    PATH: '{{ netbox__virtualenv_env_path }}'
  command: ./manage.py loaddata initial_data
  args:
    chdir: '{{ netbox__git_checkout + "/netbox" }}'
  become: True
  become_user: '{{ netbox__user }}'
  when: (netbox__load_initial_data|bool and not netbox__register_installed.stat.exists|bool and
         not netbox__register_migration.stdout is search('No migrations to apply.'))

- name: Generate systemd service unit
  template:
    src: 'etc/systemd/system/netbox.service.j2'
    dest: '/etc/systemd/system/netbox.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: netbox__register_systemd
  notify: [ 'Restart gunicorn for netbox', 'Restart netbox internal appserver' ]
  when: netbox__app_internal_appserver|bool

- name: Reload systemd configuration
  systemd:
    daemon_reload: True
  when: (ansible_service_mgr == 'systemd' and
         netbox__register_systemd is changed)

- name: Enable and start netbox internal appserver
  service:
    name: 'netbox'
    state: 'started'
    enabled: True
  when: (netbox__app_internal_appserver|bool and ansible_service_mgr == 'systemd' and
         netbox__register_systemd is changed and not netbox__register_installed.stat.exists|bool)

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save NetBox local facts
  template:
    src: 'etc/ansible/facts.d/netbox.fact.j2'
    dest: '/etc/ansible/facts.d/netbox.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  register: netbox__register_facts

- name: Update Ansible facts if they were modified
  action: setup
  when: netbox__register_facts is changed

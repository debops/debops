{# Copyright (C) 2022 Maciej Delmanowski <drybjed@gmail.com>
 # Copyright (C) 2022 DebOps <https://debops.org/>
 # SPDX-License-Identifier: Apache-2.0
 #}
# {{ ansible_managed }}
# -*- coding: utf-8 -*-

from importlib import import_module
from os import environ

import ldap
from django_auth_ldap.config import LDAPSearch


# Import and return the group type based on string name
def _import_group_type(group_type_name):
    mod = import_module('django_auth_ldap.config')
    try:
        return getattr(mod, group_type_name)()
    except:
        return None

# Server URI
AUTH_LDAP_SERVER_URI = '{{ netbox__ldap_server_uri }}'

# The following may be needed if you are binding to Active Directory.
AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0
}

# Set the DN and password for the NetBox service account.
AUTH_LDAP_BIND_DN = '{{ netbox__ldap_binddn }}'
AUTH_LDAP_BIND_PASSWORD = '{{ netbox__ldap_bindpw }}'

# Set a string template that describes any userâ€™s distinguished name based on the username.
AUTH_LDAP_USER_DN_TEMPLATE = None

# Enable STARTTLS for ldap authentication.
AUTH_LDAP_START_TLS = {{ netbox__ldap_start_tls }}

# Uncomment this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.
# Note that this is a NetBox-specific setting which sets:
#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
#LDAP_IGNORE_CERT_ERRORS = True

AUTH_LDAP_USER_SEARCH_BASEDN = '{{ netbox__ldap_base_dn | join(",") }}'
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    AUTH_LDAP_USER_SEARCH_BASEDN,
    ldap.SCOPE_SUBTREE,
    "{{ netbox__ldap_user_filter }}"
)

# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group
# hierarchy.
AUTH_LDAP_GROUP_SEARCH_BASEDN = environ.get('AUTH_LDAP_GROUP_SEARCH_BASEDN', '')
AUTH_LDAP_GROUP_SEARCH_CLASS = environ.get('AUTH_LDAP_GROUP_SEARCH_CLASS', 'group')
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(AUTH_LDAP_GROUP_SEARCH_BASEDN, ldap.SCOPE_SUBTREE,
                                    "(objectClass=" + AUTH_LDAP_GROUP_SEARCH_CLASS + ")")
AUTH_LDAP_GROUP_TYPE = _import_group_type(environ.get('AUTH_LDAP_GROUP_TYPE', 'GroupOfNamesType'))

# Define a group required to login.
{% if netbox__ldap_group_authentication_enabled | bool %}
AUTH_LDAP_REQUIRE_GROUP = '{{ netbox__ldap_user_group_dn | join(",") }}'
{% else %}
AUTH_LDAP_REQUIRE_GROUP = None
{% endif %}

# Define special user types using groups. Exercise great caution when assigning superuser status.
AUTH_LDAP_USER_FLAGS_BY_GROUP = {}

if AUTH_LDAP_REQUIRE_GROUP is not None:
    AUTH_LDAP_USER_FLAGS_BY_GROUP = {
        "is_active": '{{ netbox__ldap_user_active_group_dn | join(",") }}',
        "is_staff": '{{ netbox__ldap_user_staff_group_dn | join(",") }}',
        "is_superuser": '{{ netbox__ldap_user_admin_group_dn | join(",") }}'
    }

# For more granular permissions, we can map LDAP groups to Django groups.
AUTH_LDAP_FIND_GROUP_PERMS = environ.get('AUTH_LDAP_FIND_GROUP_PERMS', 'True').lower() == 'true'
AUTH_LDAP_MIRROR_GROUPS = environ.get('AUTH_LDAP_MIRROR_GROUPS', '').lower() == 'true'

# Cache groups for one hour to reduce LDAP traffic
AUTH_LDAP_CACHE_TIMEOUT = int(environ.get('AUTH_LDAP_CACHE_TIMEOUT', 3600))

# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": environ.get('AUTH_LDAP_ATTR_FIRSTNAME', 'givenName'),
    "last_name": environ.get('AUTH_LDAP_ATTR_LASTNAME', 'sn'),
    "email": environ.get('AUTH_LDAP_ATTR_MAIL', 'mailAddress')
}

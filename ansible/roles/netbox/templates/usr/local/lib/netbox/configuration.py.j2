# {{ ansible_managed }}

#########################
#                       #
#   Required settings   #
#                       #
#########################

# This is a list of valid fully-qualified domain names (FQDNs) for the NetBox server. NetBox will not permit write
# access to the server via any other hostnames. The first FQDN in the list will be treated as the preferred name.
#
# Example: ALLOWED_HOSTS = ['netbox.example.com', 'netbox.internal.local']
ALLOWED_HOSTS = [ '{{ ( [ netbox__config_allowed_hosts ] if netbox__config_allowed_hosts is string else netbox__config_allowed_hosts) | join("', '") }}' ]

# PostgreSQL database configuration.
DATABASE = {
    'NAME': '{{ netbox__database_name }}',         # Database name
    'USER': '{{ netbox__database_user }}',               # PostgreSQL username
    'PASSWORD': '{{ netbox__database_password }}',           # PostgreSQL password
    'HOST': '{{ netbox__database_host }}',      # Database server
    'PORT': '{{ netbox__database_port }}',               # Database port (leave blank for default)
}

# This key is used for secure generation of random numbers and strings. It must never be exposed outside of this file.
# For optimal security, SECRET_KEY should be at least 50 characters in length and contain a mix of letters, numbers, and
# symbols. NetBox will not run without this defined. For more information, see
# https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SECRET_KEY
SECRET_KEY = '{{ netbox__config_secret_key }}'

# Redis database settings. The Redis database is used for caching and background processing such as webhooks
REDIS = {
    'HOST': '{{ netbox__redis_host }}',
    'PORT': {{ netbox__redis_port }},
    'PASSWORD': '{{ netbox__redis_password }}',
    'DATABASE': {{ netbox__redis_database }},
    'CACHE_DATABASE': {{ netbox__redis_cache_database }},
    'SSL': {{ netbox__redis_ssl }},
}

#########################
#                       #
#   Optional settings   #
#                       #
#########################

# Specify one or more name and email address tuples representing NetBox administrators. These people will be notified of
# application errors (assuming correct email settings are provided).
ADMINS = [
    # ['John Doe', 'jdoe@example.com'],
{% if netbox__config_admins %}
{%   for element in netbox__config_admins %}
    [ '{{ element[0] }}', '{{ element[1] }}' ],
{%   endfor %}
{% endif %}
]

# Optionally display a persistent banner at the top and/or bottom of every page. HTML is allowed. To display the same
# content in both banners, define BANNER_TOP and set BANNER_BOTTOM = BANNER_TOP.
BANNER_TOP = '{{ netbox__config_banner_top }}'
BANNER_BOTTOM = '{{ netbox__config_banner_bottom }}'

# Text to include on the login page above the login form. HTML is allowed.
BANNER_LOGIN = '{{ netbox__config_banner_login }}'

# Base URL path if accessing NetBox within a directory. For example, if installed at http://example.com/netbox/, set:
# BASE_PATH = 'netbox/'
BASE_PATH = '{{ netbox__config_base_path }}'

# Cache timeout in seconds. Set to 0 to disable caching. Defaults to 900 (15 minutes)
CACHE_TIMEOUT = {{ netbox__config_cache_timeout }}

# Maximum number of days to retain logged changes. Set to 0 to retain changes indefinitely. (Default: 90)
CHANGELOG_RETENTION = {{ netbox__config_changelog_retention }}

# API Cross-Origin Resource Sharing (CORS) settings. If CORS_ORIGIN_ALLOW_ALL is set to True, all origins will be
# allowed. Otherwise, define a list of allowed origins using either CORS_ORIGIN_WHITELIST or
# CORS_ORIGIN_REGEX_WHITELIST. For more information, see https://github.com/ottoyiu/django-cors-headers
CORS_ORIGIN_ALLOW_ALL = {{ netbox__config_cors_origin_allow_all | bool }}
CORS_ORIGIN_WHITELIST = [
    # 'hostname.example.com',
{% if netbox__config_cors_origin_whitelist %}
{%   for element in netbox__config_cors_origin_whitelist %}
    '{{ element }}',
{%   endfor %}
{% endif %}
]
CORS_ORIGIN_REGEX_WHITELIST = [
    # r'^(https?://)?(\w+\.)?example\.com$',
{% if netbox__config_cors_origin_regex_whitelist %}
{%   for element in netbox__config_cors_origin_regex_whitelist %}
    '{{ element }}',
{%   endfor %}
{% endif %}
]

# Set to True to enable server debugging. WARNING: Debugging introduces a substantial performance penalty and may reveal
# sensitive information about your installation. Only enable debugging while performing testing. Never enable debugging
# on a production system.
DEBUG = False

# Email settings
EMAIL = {
    'SERVER': '{{ netbox__config_email_server }}',
    'PORT': {{ netbox__config_email_port }},
    'USERNAME': '{{ netbox__config_email_username }}',
    'PASSWORD': '{{ netbox__config_email_password }}',
    'TIMEOUT': {{ netbox__config_email_timeout }},  # seconds
    'FROM_EMAIL': '{{ netbox__config_email_from }}',
}

# Enforcement of unique IP space can be toggled on a per-VRF basis. To enforce unique IP space within the global table
# (all prefixes and IP addresses not assigned to a VRF), set ENFORCE_GLOBAL_UNIQUE to True.
ENFORCE_GLOBAL_UNIQUE = {{ netbox__config_enforce_global_unique | bool }}

# Exempt certain models from the enforcement of view permissions. Models listed here will be viewable by all users and
# by anonymous users. List models in the form `<app>.<model>`. Add '*' to this list to exempt all models.
EXEMPT_VIEW_PERMISSIONS = [
{% for element in netbox__config_exempt_view_permissions %}
    '{{ element }}',
{% endfor %}
]

# Enable custom logging. Please see the Django documentation for detailed guidance on configuring custom logs:
#   https://docs.djangoproject.com/en/1.11/topics/logging/
LOGGING = {{ netbox__config_logging | to_nice_json }}

# Setting this to True will permit only authenticated users to access any part of NetBox. By default, anonymous users
# are permitted to access most data in NetBox (excluding secrets) but not make any changes.
LOGIN_REQUIRED = {{ netbox__config_login_required | bool }}

# The length of time (in seconds) for which a user will remain logged into the web UI before being prompted to
# re-authenticate. (Default: 1209600 [14 days])
LOGIN_TIMEOUT = {{ netbox__config_login_timeout }}

# Setting this to True will display a "maintenance mode" banner at the top of every page.
MAINTENANCE_MODE = {{ netbox__config_maintenance_mode | bool }}

# An API consumer can request an arbitrary number of objects =by appending the "limit" parameter to the URL (e.g.
# "?limit=1000"). This setting defines the maximum limit. Setting it to 0 or None will allow an API consumer to request
# all objects by specifying "?limit=0".
MAX_PAGE_SIZE = {{ netbox__config_max_page_size }}

# The file path where uploaded media such as image attachments are stored. A trailing slash is not needed. Note that
# the default value of this setting is derived from the installed location.
MEDIA_ROOT = '{{ netbox__config_media_root }}'

# Expose Prometheus monitoring metrics at the HTTP endpoint '/metrics'
METRICS_ENABLED = {{ netbox__config_metrics_enabled }}

# Credentials that NetBox will uses to authenticate to devices when connecting via NAPALM.
NAPALM_USERNAME = '{{ netbox__config_napalm_username }}'
NAPALM_PASSWORD = '{{ netbox__config_napalm_password }}'

# NAPALM timeout (in seconds). (Default: 30)
NAPALM_TIMEOUT = {{ netbox__config_napalm_timeout }}

# NAPALM optional arguments (see http://napalm.readthedocs.io/en/latest/support/#optional-arguments). Arguments must
# be provided as a dictionary.
NAPALM_ARGS = {{ netbox__config_napalm_args | to_nice_json }}

# Determine how many objects to display per page within a list. (Default: 50)
PAGINATE_COUNT = {{ netbox__config_paginate_count }}

# When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to
# prefer IPv4 instead.
PREFER_IPV4 = {{ netbox__config_prefer_ipv4 | bool }}

# The file path where custom reports will be stored. A trailing slash is not needed. Note that the default value of
# this setting is derived from the installed location.
REPORTS_ROOT = '{{ netbox__config_reports_root }}'

# By default, NetBox will store session data in the database. Alternatively, a file path can be specified here to use
# local file storage instead. (This can be useful for enabling authentication on a standby instance with read-only
# database access.) Note that the user as which NetBox runs must have read and write permissions to this path.
SESSION_FILE_PATH = {{ netbox__config_session_file_path }}

# Time zone (default: UTC)
TIME_ZONE = '{{ netbox__config_time_zone }}'

# The webhooks backend is disabled by default. Set this to True to enable it. Note that this requires a Redis
# database be configured and accessible by NetBox.
WEBHOOKS_ENABLED = {{ netbox__config_webhooks_enabled }}

# Date/time formatting. See the following link for supported formats:
# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
DATE_FORMAT = '{{ netbox__config_date_format }}'
SHORT_DATE_FORMAT = '{{ netbox__config_short_date_format }}'
TIME_FORMAT = '{{ netbox__config_time_format }}'
SHORT_TIME_FORMAT = '{{ netbox__config_short_time_format }}'
DATETIME_FORMAT = '{{ netbox__config_datetime_format }}'
SHORT_DATETIME_FORMAT = '{{ netbox__config_short_datetime_format }}'

---
# Copyright (C) 2015-2017 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2015-2017 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  import_role:
    name: 'secret'

- name: Get default PostgreSQL version
  environment:
    LC_ALL: 'C'
  shell: "set -o nounset -o pipefail -o errexit &&
          apt-cache policy postgresql-client | grep -E '^\\s+Candidate:\\s+' | awk '{print $2}' | cut -d+ -f1"
  args:
    executable: 'bash'
  register: postgresql__register_version
  check_mode: False
  changed_when: False

- name: Set default PostgreSQL version variable
  set_fact:
    postgresql__version: '{{ (ansible_local.postgresql.version
                              if (ansible_local.postgresql.version|d())
                                 else (postgresql__preferred_version
                                       if postgresql__preferred_version|d()
                                       else postgresql__register_version.stdout)) }}'

- name: Install PostgreSQL packages
  package:
    name: '{{ q("flattened", (postgresql__base_packages
                              + postgresql__python_packages
                              + postgresql__packages)) }}'
    state: 'present'
  register: postgresql__register_packages
  until: postgresql__register_packages is succeeded

- name: Check if database server is installed
  environment:
    LC_MESSAGES: 'C'
  shell: set -o nounset -o pipefail -o errexit &&
         dpkg-query -W -f='${Version}\n' 'postgresql' | grep -v '^$'
  args:
    executable: 'bash'
  register: postgresql__register_server
  changed_when: False
  check_mode: False
  failed_when: False

- name: Configure system-wide user to cluster mapping
  template:
    src: 'etc/postgresql-common/user_clusters.j2'
    dest: '/etc/postgresql-common/user_clusters'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Make sure that Ansible local fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save PostgreSQL local facts
  template:
    src: 'etc/ansible/facts.d/postgresql.fact.j2'
    dest: '/etc/ansible/facts.d/postgresql.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Re-read local facts if they have been modified
  meta: 'flush_handlers'

- name: Drop PostgreSQL roles if requested
  community.postgresql.postgresql_user:
    name: '{{ item.name | d(item.role) }}'
    port: '{{ item.port | d(postgresql__port if postgresql__port else omit) }}'
    state: 'absent'
  with_flattened:
    - '{{ postgresql__roles }}'
    - '{{ postgresql_roles|d([]) }}'
    - '{{ postgresql__dependent_roles }}'
  become: True
  become_user: '{{ postgresql__user }}'
  delegate_to: '{{ postgresql__delegate_to }}'
  when: item.state|d('present') == 'absent'
  no_log: '{{ debops__no_log | d(True) }}'

- name: Create PostgreSQL roles
  postgresql_user:
    name: '{{ item.name | d(item.role) }}'
    port: '{{ item.port | d(postgresql__port if postgresql__port else omit) }}'
    password: '{{ item.password | d(lookup("password",
                  secret + "/postgresql/" + postgresql__password_hostname +
                  "/" + (item.port | d(postgresql__port)) +
                  "/credentials/" + item.name | d(item.role) + "/password " +
                  "length=" + postgresql__password_length + " chars=" + postgresql__password_characters)) }}'
    encrypted: '{{ item.encrypted | d(True) }}'
    expires: '{{ item.expires | d(omit) }}'
    role_attr_flags: '{{ (item.flags|d() | join(",")) | d(omit) }}'
    state: 'present'
  with_flattened:
    - '{{ postgresql__roles }}'
    - '{{ postgresql_roles|d([]) }}'
    - '{{ postgresql__dependent_roles }}'
  become: True
  become_user: '{{ postgresql__user }}'
  delegate_to: '{{ postgresql__delegate_to }}'
  when: item.state|d('present') == 'present'
  no_log: True

- name: Drop PostgreSQL databases if requested
  postgresql_db:
    name: '{{ item.name | d(item.database) }}'
    port: '{{ item.port | d(postgresql__port if postgresql__port else omit) }}'
    state: 'absent'
  with_flattened:
    - '{{ postgresql__databases }}'
    - '{{ postgresql_databases|d([]) }}'
    - '{{ postgresql__dependent_databases }}'
  become: True
  become_user: '{{ postgresql__user }}'
  delegate_to: '{{ postgresql__delegate_to }}'
  when: item.state|d('present') == 'absent'

- name: Create PostgreSQL databases
  postgresql_db:
    name: '{{ item.name | d(item.database) }}'
    port: '{{ item.port | d(postgresql__port if postgresql__port else omit) }}'
    owner: '{{ item.owner | d(omit) }}'
    template: '{{ item.template | d(omit) }}'
    encoding: '{{ item.encoding | d(omit) }}'
    lc_collate: '{{ item.lc_collate | d(omit) }}'
    lc_ctype: '{{ item.lc_ctype | d(omit) }}'
    state: 'present'
  with_flattened:
    - '{{ postgresql__databases }}'
    - '{{ postgresql_databases|d([]) }}'
    - '{{ postgresql__dependent_databases }}'
  become: True
  become_user: '{{ postgresql__user }}'
  delegate_to: '{{ postgresql__delegate_to }}'
  when: (item.state|d('present') == 'present') and
        item.create_db|d(True)

- name: Enable or disable specified database extensions
  postgresql_ext:
    db: '{{ item.database }}'
    name: '{{ item.extension }}'
    port: '{{ item.port | d(postgresql__port if postgresql__port else omit) }}'
    state: '{{ item.state | d("present") }}'
  with_flattened:
    - '{{ postgresql__extensions }}'
    - '{{ postgresql__dependent_extensions }}'
  become: True
  become_user: '{{ postgresql__user }}'
  delegate_to: '{{ postgresql__delegate_to }}'
  when: item.state|d('present') in ['present', 'absent']

- name: Grant public schema permissions
  postgresql_privs:
    roles: '{{ item.owner }}'
    port: '{{ item.port | d(postgresql__port if postgresql__port else omit) }}'
    type: '{{ item.type | d("schema") }}'
    database: '{{ item.name | d(item.database) }}'
    objs: '{{ item.objs | d("public") }}'
    privs: '{{ item.public_privs | d(["ALL"]) | join(",") }}'
    grant_option: '{{ item.grant_option | d("yes") }}'
    state: 'present'
  with_flattened:
    - '{{ postgresql__databases }}'
    - '{{ postgresql_databases|d([]) }}'
    - '{{ postgresql__dependent_databases }}'
  become: True
  become_user: '{{ postgresql__user }}'
  delegate_to: '{{ postgresql__delegate_to }}'
  when: (item.state|d('present') == 'present') and
        item.owner|d()

- name: Grant PostgreSQL groups
  postgresql_privs:
    roles: '{{ item.roles | join(",") }}'
    port: '{{ item.port | d(postgresql__port if postgresql__port else omit) }}'
    type: 'group'
    database: '{{ item.database }}'
    objs: '{{ item.groups | join(",") }}'
    grant_option: '{{ item.grant_option | d(omit) }}'
    state: 'present'
  with_flattened:
    - '{{ postgresql__groups }}'
    - '{{ postgresql_groups|d([]) }}'
    - '{{ postgresql__dependent_groups }}'
  become: True
  become_user: '{{ postgresql__user }}'
  delegate_to: '{{ postgresql__delegate_to }}'
  when: (item.state|d('present') == 'present') and
        item.enabled|d(True)|bool

- name: Grant database privileges to PostgreSQL roles
  postgresql_user:
    name: '{{ item.name | d(item.role) }}'
    port: '{{ item.port | d(postgresql__port if postgresql__port else omit) }}'
    db: '{{ item.db }}'
    priv: '{{ item.priv | join("/") }}'
    state: 'present'
  with_flattened:
    - '{{ postgresql__roles }}'
    - '{{ postgresql_roles|d([]) }}'
    - '{{ postgresql__dependent_roles }}'
  become: True
  become_user: '{{ postgresql__user }}'
  delegate_to: '{{ postgresql__delegate_to }}'
  when: (item.state|d('present') == 'present') and
        (item.db|d() and item.priv|d())
  no_log: True

- name: Make sure required system groups exist
  group:
    name: '{{ item.group | d(item.owner) }}'
    state: 'present'
    system: '{{ item.system | d(True) }}'
  with_flattened:
    - '{{ postgresql__pgpass }}'
    - '{{ postgresql_pgpass|d([]) }}'
    - '{{ postgresql__dependent_pgpass }}'
  no_log: True

- name: Make sure required system accounts exist
  user:
    name: '{{ item.owner }}'
    group: '{{ item.group | d(item.owner) }}'
    home: '{{ item.home | d(omit) }}'
    state: 'present'
    system: '{{ item.system | d(True) }}'
  with_flattened:
    - '{{ postgresql__pgpass }}'
    - '{{ postgresql_pgpass|d([]) }}'
    - '{{ postgresql__dependent_pgpass }}'
  no_log: True

- name: Populate ~/.pgpass file
  lineinfile:
    dest: '{{ "~" + item.owner }}/.pgpass'
    regexp: '{{ "^" + ([
                        ((item.server  | d(postgresql__server if postgresql__server else "localhost"))
                         | replace(".","\.")),
                        (item.port     | d(postgresql__port)),
                        (item.database | d("\*")),
                        (item.name     | d(item.role | d(item.owner | d("\*"))))
                       ] | join(":")
                      ) + ":" }}'
    line: '{{ [
               (item.server   | d(postgresql__server if postgresql__server else "localhost")),
               (item.port     | d(postgresql__port)),
               (item.database | d("*")),
               (item.role     | d(item.owner)),
               (item.password | d(lookup("password",
                                  secret + "/postgresql/"
                                  + (item.server | d(postgresql__password_hostname)) + "/"
                                  + (item.port | d(postgresql__port)) + "/credentials/"
                                  + item.name | d(item.role | d(item.owner))
                                  + "/password length=" + postgresql__password_length)
                                 ) | regex_replace("\\", "\\\\" ) | regex_replace(":", "\:" ))
               ] | join(":") }}'
    state: 'present'
    create: True
    owner: '{{ item.owner }}'
    group: '{{ item.owner }}'
    mode: '0600'
  with_flattened:
    - '{{ postgresql__pgpass }}'
    - '{{ postgresql_pgpass|d([]) }}'
    - '{{ postgresql__dependent_pgpass }}'
  no_log: True

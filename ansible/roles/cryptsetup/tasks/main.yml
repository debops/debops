---
# vim: foldmarker=[[[,]]]:foldmethod=marker

## Preparation and error checking (((

- import_role:
    name: 'secret'

- name: Check for Ansible version without known vulnerabilities
  assert:
    that:
      - 'ansible_version.full is version_compare("2.2.3.0", ">=")'
    msg: |
      VULNERABLE or unsupported Ansible version DETECTED, please update to
      Ansible >= v2.2.3 or a newer!
      To skip, add "--skip-tags play::security-assertions" parameter. Refer to
      the changelog of debops.cryptsetup for details. Exiting.
  run_once: True
  delegate_to: 'localhost'
  tags:
    - 'play::security-assertions'
    - 'role::cryptsetup:backup'

- name: Assert that combined device configuration is valid
  assert:
    that:
      - '(cryptsetup__combined_devices | map(attribute="ciphertext_block_device")
          | unique | length) == (cryptsetup__combined_devices | length)'
      - '(cryptsetup__combined_devices | map(attribute="name")
          | unique | length) == (cryptsetup__combined_devices | length)'
  run_once: True
  delegate_to: 'localhost'

- name: Assert that /dev/shm/ is stored in RAM (assumed to be non-persistent)
  ## Also assuming that the keyfile is not swapped out in the short time it is
  ## going to exist in tmpfs.
  command: df /dev/shm --type tmpfs
  changed_when: False

- name: Ensure specified packages are in there desired state
  package:
    name: '{{ q("flattened", cryptsetup__base_packages) }}'
    state: 'present'
  register: cryptsetup__register_packages
  until: cryptsetup__register_packages is succeeded

- name: Create keyfile and backup directories on the remote system
  file:
    path: '{{ item.path }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0700'
  when: item.condition
  with_flattened:
    - path: '{{ cryptsetup__keyfile_remote_location }}'
      condition: '{{ (cryptsetup__combined_devices
                      | selectattr("remote_keyfile", "undefined") | list | length) > 0 }}'
    - path: '{{ cryptsetup__header_backup_remote_location }}'
      condition: '{{ ((cryptsetup__combined_devices
                       | selectattr("backup_header", "defined")
                       | selectattr("backup_header") | list | length) > 0) or
                     (cryptsetup__header_backup|bool and ((cryptsetup__combined_devices
                                                           | selectattr("backup_header", "undefined")
                                                           | list | length) > 0)) }}'

# Making the execution_strategy configurable per device would also be possible
# using Jinja filters but that seems to fail for some reason:
#
# - debug:
#     msg: '{{ ([{"execution_strategy": "serial"}, {"some":23}])
#              | selectattr("execution_strategy", "equalto", "serial") | list }}'
#
- include: 'manage_devices.yml'
  when: cryptsetup__devices_execution_strategy == 'parallel'
  vars:
    cryptsetup__process_devices: '{{ cryptsetup__combined_devices }}'

- include: 'manage_devices.yml'
  when: cryptsetup__devices_execution_strategy == 'serial'
  with_items: '{{ cryptsetup__combined_devices }}'
  loop_control:
    loop_var: cryptsetup__process_device

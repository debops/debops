---
# Copyright (C) 2019 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2019 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  import_role:
    name: 'secret'

- name: Get list of local GPG key fingerprints on Ansible Controller
  set_fact:
    keyring__fact_local_keys: '{{ (q("fileglob", (keyring__local_path + "/*.asc"))
                                     | map("basename") | map("replace"," ","")
                                     | map("regex_replace","^0x(.*)\.asc","\1")
                                     | list) if keyring__local_path|d() else [] }}'

- name: Install required packages
  package:
    name: '{{ q("flattened", (keyring__base_packages + keyring__packages)) }}'
    state: 'present'
  when: keyring__enabled|bool and ansible_pkg_mgr == 'apt'

- name: Make sure that Ansible local fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save keyring local facts
  template:
    src: 'etc/ansible/facts.d/keyring.fact.j2'
    dest: '/etc/ansible/facts.d/keyring.fact'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Re-read local facts if they have been modified
  meta: 'flush_handlers'

- name: Import specified GPG keys to APT keyring
  apt_key:
    id: '{{ (item.id | d(item)) | replace(" ","") }}'
    data: '{{ item.data | d((lookup("file", keyring__local_path + "/0x" + ((item.id | d(item)) | replace(" ","")) + ".asc"))
                            if (item.state | d("present") != "absent" and item.url is undefined and item.keybase is undefined and
                                ((item.id | d(item)) | replace(" ","")) in keyring__fact_local_keys)
                            else omit) }}'
    keyserver: '{{ item.keyserver | d(keyring__keyserver
                                      if (keyring__keyserver|d() and item.url is undefined and item.keybase is undefined and
                                          ((item.id | d(item)) | replace(" ","")) not in keyring__fact_local_keys)
                                      else omit) }}'
    url: '{{ item.url | d((keyring__keybase_api + item.keybase
                           + "/pgp_keys.asc?fingerprint=" + ((item.id | d(item)) | replace(" ","")))
                          if item.keybase|d() else omit) }}'
    state: '{{ item.state | d("present") }}'
  loop: '{{ q("flattened", (keyring__dependent_apt_keys)) }}'
  register: keyring__register_apt_key
  until: keyring__register_apt_key is succeeded
  when: keyring__enabled|bool and ansible_pkg_mgr == 'apt' and
        (item.id|d() or item is string) and
        (item.extrepo is undefined or
         item.extrepo not in (ansible_local.extrepo.sources|d([])))
  tags: [ 'role::keyring:apt_key' ]

- name: Configure specified upstream APT repositories
  apt_repository:
    repo: '{{ item.repo }}'
    filename: '{{ item.filename | d(omit) }}'
    state: '{{ item.state | d("present") }}'
    update_cache: False
  loop: '{{ q("flattened", (keyring__dependent_apt_keys)) }}'
  register: keyring__register_apt_repository
  when: keyring__enabled|bool and ansible_pkg_mgr == 'apt' and item.repo|d() and
        (item.extrepo is undefined or
         item.extrepo not in (ansible_local.extrepo.sources|d([])))
  tags: [ 'role::keyring:apt_repository' ]

- name: Remove APT auth configuration if requested
  file:
    path: '{{ "/etc/apt/auth.conf.d/" + (item.name | regex_replace(".conf$","")) + ".conf" }}'
    state: 'absent'
  loop: '{{ q("flattened", (keyring__dependent_apt_auth_files)) }}'
  when: keyring__enabled|bool and ansible_pkg_mgr == 'apt' and
        item.state|d('present') == 'absent'
  no_log: '{{ debops__no_log | d(True) }}'

- name: Generate APT auth configuration
  template:
    src: 'etc/apt/auth.conf.d/template.conf.j2'
    dest: '{{ "/etc/apt/auth.conf.d/" + (item.name | regex_replace(".conf$","")) + ".conf" }}'
    mode: '0640'
  loop: '{{ q("flattened", (keyring__dependent_apt_auth_files)) }}'
  when: keyring__enabled|bool and ansible_pkg_mgr == 'apt' and
        item.machine|d() and item.login|d() and item.password|d() and
        item.state|d('present') not in [ 'absent', 'ignore' ]
  no_log: '{{ debops__no_log | d(True) }}'

- name: Update APT cache when needed
  apt:  # noqa no-handler
    update_cache: True
  when: keyring__enabled|bool and ansible_pkg_mgr == 'apt' and
        keyring__register_apt_repository is changed
  tags: [ 'role::keyring:apt_repository' ]

- name: Ensure that required UNIX groups exist
  group:
    name: '{{ item.group | d(item.user) }}'
    state: 'present'
    system: '{{ item.system | d(True) }}'
  loop: '{{ q("flattened", (keyring__dependent_gpg_keys)) }}'
  when: keyring__enabled|bool and (item.create_user|d(True))|bool and
        item.user|d() and item.state|d('present') not in [ 'absent', 'ignore' ]

- name: Ensure that required UNIX accounts exist
  user:
    name: '{{ item.user }}'
    group: '{{ item.group | d(item.user) }}'
    home: '{{ item.home | d(omit) }}'
    system: '{{ item.system | d(True) }}'
    state: 'present'
  loop: '{{ q("flattened", (keyring__dependent_gpg_keys)) }}'
  when: keyring__enabled|bool and (item.create_user|d(True))|bool and
        item.user|d() and item.state|d('present') not in [ 'absent', 'ignore' ]

- name: Gather information about existing UNIX accounts
  getent:
    database: 'passwd'
  check_mode: False

  # In some cases 'apt-key' command refuses to work complaining that it has to
  # be run by root. This task should handle these cases gracefully.
- name: Import specified GPG keys to account keyring
  vars:
    gpg_command: '{{ "gpg --batch"
                     if (keyring__gpg_version is version("2.0.0", "<"))
                     else "gpg --no-autostart --batch" }}'
  shell: set -o nounset -o pipefail -o errexit &&
         {{ gpg_command }} --list-keys '{{ (item.id | d(item)) | replace(" ","") }}'
         {% if item.state | d('present') == 'absent' %}
         && ( printf "Removing key...\n" && {{ gpg_command }} --delete-key {{ (item.id | d(item)) | replace(" ","") }} )
         || true
         {% else %}
         {%   if ((item.id | d(item)) | replace(" ","")) not in keyring__fact_local_keys %}
         {%     if item.url|d() %}
         || ( printf "Adding key...\n" && curl {{ item.url }} | {{ gpg_command }} --import - )
         {%     elif item.keybase|d() %}
         || ( printf "Adding key...\n" && curl {{ keyring__keybase_api + item.keybase
                                                  + '/pgp_keys.asc?fingerprint='
                                                  + ((item.id | d(item)) | replace(" ","")) }} | {{ gpg_command }} --import - )
         {%     elif (item.keyserver | d(keyring__keyserver if keyring__keyserver|d() else False)) %}
         || ( printf "Adding key...\n" && gpg --keyserver {{ item.keyserver | d(keyring__keyserver if keyring__keyserver else "") }} \
                                              --batch --recv-key {{ (item.id | d(item)) | replace(" ","") }} && gpgconf --kill all )
         {%     endif %}
         {%   else %}
         || ( printf "Adding key...\n" && {{ gpg_command }} --import - )
         {%   endif %}
         {% endif %}
  args:
    executable: 'bash'
    stdin: '{{ item.data | d((lookup("file", keyring__local_path + "/0x" + ((item.id | d(item)) | replace(" ","")) + ".asc"))
                             if (item.state | d("present") != "absent" and
                                 ((item.id | d(item)) | replace(" ","")) in keyring__fact_local_keys)
                             else omit) }}'
  become: True
  become_user: '{{ item.user | d(keyring__dependent_gpg_user if keyring__dependent_gpg_user|d() else "root") }}'
  loop: '{{ q("flattened", (keyring__dependent_gpg_keys)) }}'
  register: keyring__register_gpg_key
  until: keyring__register_gpg_key.rc|d(0) == 0
  when: (keyring__enabled|bool and (item.id|d() or item is string) and
         (item.user | d(keyring__dependent_gpg_user if keyring__dependent_gpg_user|d() else "root")) in getent_passwd.keys())
  changed_when: '("Adding key..." in keyring__register_gpg_key.stdout_lines) or
                 ("Removing key..." in keyring__register_gpg_key.stdout_lines)'

---

- import_role:
    name: 'secret'

- name: Ensure that required packages are installed
  package:
    name: '{{ q("flattened", (root_account__base_packages
                              + root_account__shell_packages
                              + root_account__packages)) }}'
    state: 'present'
  register: root_account__register_packages
  until: root_account__register_packages is succeeded
  when: root_account__enabled|bool

- name: Check available SSH key types
  shell: ssh -Q key 2>/dev/null || echo "ssh-rsa"
  register: root_account__register_key_types
  changed_when: False
  check_mode: False

- name: Check if preferred shell exists
  stat: path="{{ root_account__shell }}"
  register: root_account__register_shell
  when: root_account__enabled|bool and root_account__shell|d(False)

- name: Fail if setting a shell that does not exist
  fail:
    msg: "Trying to set a shell that does not exist, this can lock you out!"
  when: root_account__enabled|bool and root_account__shell|d(False) and not root_account__register_shell.stat.exists

- name: Enforce root system group
  group:
    name: 'root'
    gid: '0'
    system: True
    state: 'present'
  when: root_account__enabled|bool

- name: Enforce root system account
  user:
    name: 'root'
    state: 'present'
    home: '/root'
    uid: '0'
    groups: ''
    append: False
    system: True
    group:            '{{ root_account__group }}'
    generate_ssh_key: '{{ root_account__generate_ssh_key | bool }}'
    ssh_key_bits:     '{{ root_account__ssh_key_bits }}'
    ssh_key_type:     '{{ root_account__ssh_key_type }}'
    ssh_key_file:     '{{ root_account__ssh_key_file }}'
    ssh_key_comment:  '{{ root_account__ssh_key_comment }}'
    update_password:  '{{ "always" if root_account__password_update | bool else "on_create" }}'
    password:         '{{ root_account__password if root_account__password else omit }}'
    shell:            '{{ root_account__shell if root_account__shell else omit }}'
  when: root_account__enabled|bool
  no_log: '{{ True if root_account__password else False }}'

- name: Enforce root home permissions
  file:
    path: '/root'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0700'
  when: root_account__enabled|bool

- name: Configure authorized SSH keys for root account
  authorized_key:
    key: "{{ q('flattened', root_account__combined_authorized_keys)
              | join('\n') }}"
    exclusive: '{{ root_account__authorized_keys_exclusive|bool }}'
    state: 'present'
    user: 'root'
  when: root_account__enabled|bool and root_account__combined_authorized_keys|d() and
        root_account__authorized_keys_state != 'absent'

- name: Remove /root/.ssh/authorized_keys file if requested
  file:
    path: '/root/.ssh/authorized_keys'
    state: 'absent'
  when: root_account__enabled|bool and root_account__authorized_keys_state == 'absent'

- name: Check subuid presence for root account
  shell: grep -E '^root:' /etc/subuid || true
  register: root_account__register_subuid
  check_mode: False
  changed_when: False
  when: root_account__enabled|bool and root_account__subuid_enabled|bool

- name: Add subuids and subgids for root account
  command: usermod --add-subuids {{ (item|string + "-" + (item|int + root_account__subuid_count|int)|string) }}
                   --add-subgids {{ (item|string + "-" + (item|int + root_account__subuid_count|int)|string) }} root
  with_items: '{{ root_account__subuid_start }}'
  when: root_account__enabled|bool and root_account__subuid_enabled|bool and
        not root_account__register_subuid.stdout|d()

- name: Fix shell usage without TTY present
  lineinfile:
    dest: '/root/.profile'
    regexp: "^.*mesg n.*$"
    line: 'tty -s && mesg n || true'
    state: 'present'
  when: root_account__enabled|bool and root_account__fix_no_tty|bool

- name: Manage root dotfiles
  shell: |
    if ! [ -e "$HOME/.yadm/repo.git" ] ; then
        yadm clone --bootstrap "{{ root_account__dotfiles_repo }}"
    else
        yadm pull
    fi
  register: root_account__register_dotfiles
  changed_when: ('Already up to date.' not in root_account__register_dotfiles.stdout_lines|regex_replace('-', ' '))
  when: ((ansible_local|d() and ansible_local.yadm|d() and (ansible_local.yadm.installed|d())|bool) and
         root_account__dotfiles_enabled|bool)
  check_mode: False

- name: Make sure Ansible fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Setup root account local facts
  template:
    src: 'etc/ansible/facts.d/root_account.fact.j2'
    dest: '/etc/ansible/facts.d/root_account.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  register: root_account__register_facts

- name: Reload facts if they were modified
  action: setup
  when: root_account__register_facts is changed

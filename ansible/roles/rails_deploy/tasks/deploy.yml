---

- name: Clone the app's source code
  git: repo={{ rails_deploy_git_location }} dest={{ rails_deploy_src }}
       version={{ rails_deploy_git_version }}
       remote={{ rails_deploy_git_remote }} accept_hostkey=yes
  register: rails_deploy_register_repo_status
  when: rails_deploy_git_location is defined and rails_deploy_git_location
  become: True
  become_user: '{{ rails_deploy_service }}'

- name: Detect a temporary public deploy page
  stat: path={{ rails_deploy_src }}/public/deploy.html
  register: register_rails_deploy_public_deploy_page

- name: Enable the temporary deploy page
  command: cp public/deploy.html public/index.html
           chdir={{ rails_deploy_src }}
  when: register_rails_deploy_public_deploy_page.stat.exists and
        rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed
  changed_when: False
  become: True
  become_user: '{{ rails_deploy_service }}'

- name: Update gems
  command: bundle install --deployment
           --without={{ rails_deploy_bundle_without | difference([rails_deploy_system_env]) | join(',') }}
           chdir={{ rails_deploy_src }}
  changed_when: False
  when: rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed
  become: True
  become_user: '{{ rails_deploy_service }}'

- name: Restart the background worker asynchronously
  service: name={{ rails_deploy_worker }} state=restarted
  async: 90
  when: rails_deploy_worker_enabled and
        rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed

- name: Prepare the database
  shell: '{{ rails_deploy_env_source }} && bundle exec rake db:schema:load db:seed
           chdir={{ rails_deploy_src }}'
  when: (rails_deploy_database_create and rails_deploy_register_database_created is defined and
        rails_deploy_register_database_created is changed and
        rails_app_database_prepare) and
        inventory_hostname == rails_deploy_hosts_master and
        rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed
  become: True
  become_user: '{{ rails_deploy_service }}'

- name: Store mtime of the config folder
  stat: path={{ rails_deploy_src }}/config
  register: rails_deploy_register_mtime_config
  when: inventory_hostname == rails_deploy_hosts_master and
        rails_deploy_git_location is defined and rails_deploy_git_location

- name: Store mtime of the db/schema.rb file
  stat: path={{ rails_deploy_src }}/db/schema.rb
  register: rails_deploy_register_mtime_schema
  when: inventory_hostname == rails_deploy_hosts_master and
        rails_deploy_git_location is defined and rails_deploy_git_location

- name: Execute shell commands before migration
  shell: '{{ rails_deploy_env_source }} && {{ item }} chdir={{ rails_deploy_src }}'
  when: rails_deploy_pre_migrate_shell_commands and rails_deploy_git_location and
        rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed
  with_items: '{{ rails_deploy_pre_migrate_shell_commands }}'
  become: True
  become_user: '{{ rails_deploy_service }}'

- name: Migrate the database
  shell: '{{ rails_deploy_env_source }} && bundle exec rake db:migrate chdir={{ rails_deploy_src }}'
  when: inventory_hostname == rails_deploy_hosts_master and
        (rails_deploy_database_force_migrate or
        (rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed and
        (rails_deploy_register_mtime_schema.stat.mtime !=
         ansible_local.rails_deploy[rails_deploy_service].mtime.schema) or
        ansible_local.rails_deploy[rails_deploy_service].mtime.schema is undefined))
  register: rails_deploy_register_migration
  become: True
  become_user: '{{ rails_deploy_service }}'

- name: Execute shell commands after migration
  shell: '{{ rails_deploy_env_source }} && {{ item }} chdir={{ rails_deploy_src }}'
  when: rails_deploy_post_migrate_shell_commands and rails_deploy_git_location and
        rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed
  with_items: '{{ rails_deploy_post_migrate_shell_commands }}'
  become: True
  become_user: '{{ rails_deploy_service }}'

- name: Reload the backend server
  service: name={{ rails_deploy_service }} state=reloaded
  when: rails_deploy_backend and (rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed and
        (inventory_hostname == rails_deploy_hosts_master or
        inventory_hostname != item) and
        not rails_deploy_register_migration is changed and
        rails_deploy_register_mtime_config.stat.mtime == ansible_local.rails_deploy[rails_deploy_service].mtime.config
        and
        not rails_deploy_backend_always_restart)
  delegate_to: '{{ item }}'
  with_items: '{{ groups[rails_deploy_hosts_group] }}'

- name: Restart the backend server
  service: name={{ rails_deploy_service }} state=restarted
  when: rails_deploy_backend and (rails_deploy_database_force_migrate or
        ((rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed) and rails_deploy_register_migration is changed) and
        (inventory_hostname == rails_deploy_hosts_master or
        inventory_hostname != item)
        or
        rails_deploy_register_mtime_config.stat.mtime != ansible_local.rails_deploy[rails_deploy_service].mtime.config
        or
        (rails_deploy_backend_always_restart and rails_deploy_git_location and
        rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed))
  delegate_to: '{{ item }}'
  with_items: '{{ groups[rails_deploy_hosts_group] }}'

- name: Set the extra services state
  service: name={{ item.name }}
           state={{ item.changed_state | default('reloaded') }}
  when: rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed and rails_deploy_extra_services
  with_items: '{{ rails_deploy_extra_services }}'

- name: Set the initial backend server state
  service: name={{ rails_deploy_service }}
           state={{ rails_deploy_backend_state }}
           enabled={{ rails_deploy_backend_enabled }}
  when: rails_deploy_git_location is defined and rails_deploy_git_location and rails_deploy_backend

- name: Set the initial background worker state
  service: name={{ rails_deploy_worker }}
           state={{ rails_deploy_worker_state }}
           enabled={{ rails_deploy_worker_enabled }}
  when: rails_deploy_worker_enabled and
        rails_deploy_git_location is defined and rails_deploy_git_location

- name: Set the initial extra services state
  service: name={{ item.name }}
           state={{ item.state | default('started') }}
           enabled={{ item.enabled | default(True) }}
  when: rails_deploy_git_location is defined and rails_deploy_git_location and
        rails_deploy_extra_services
  with_items: '{{ rails_deploy_extra_services }}'

- name: Execute shell commands after the backend is ready
  shell: '{{ rails_deploy_env_source }} && {{ item }} chdir={{ rails_deploy_src }}'
  when: rails_deploy_post_restart_shell_commands and rails_deploy_git_location and
        rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed
  with_items: '{{ rails_deploy_post_restart_shell_commands }}'
  become: True
  become_user: '{{ rails_deploy_service }}'

- name: Disable the temporary deploy page
  file:
    path: '{{ rails_deploy_src + "/public/index.html" }}'
    state: 'absent'
  when: register_rails_deploy_public_deploy_page.stat.exists and
        rails_deploy_register_repo_status is defined and
        rails_deploy_register_repo_status is changed
  changed_when: False
  become: True
  become_user: '{{ rails_deploy_service }}'

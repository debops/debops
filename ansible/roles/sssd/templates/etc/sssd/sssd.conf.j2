{# Copyright (C) 2019 Maciej Delmanowski <drybjed@gmail.com>
 # Copyright (C) 2021 David HÃ¤rdeman <david@hardeman.nu>
 # Copyright (C) 2019-2021 DebOps <https://debops.org/>
 # SPDX-License-Identifier: GPL-3.0-only
 #}
# {{ ansible_managed }}

# /etc/sssd/sssd.conf	Configuration file for sssd.
#
#			For more information, see sssd.conf(5)
{% for section in sssd__combined_configuration_sections | parse_kv_config %}
{%   if section.name|d() and section.state|d('present') not in [ 'absent', 'init', 'ignore' ] %}
{%     set section_config = (sssd__combined_configuration | parse_kv_config
                             | selectattr("section", "equalto", section.name) | list) %}
{%     if section_config|d() %}
{%       if section.state != 'hidden' %}
{%         if (['present', 'comment'] | intersect(section_config | map(attribute='state') | list)) %}
{%           set section_title = (' ' + ((section.title | d(section.name)) | upper) + ' ') %}
{%           set section_width = section_title | length + 8 %}
{{           '' }}
{{           '' }}
{{           ("{:#^" + section_width|string + "}").format('#') }}
{{           ("{:#^" + section_width|string + "}").format(section_title) }}
{{           ("{:#^" + section_width|string + "}").format('#') }}
{{           ("[{}]").format(section.name) }}
{{           '' }}
{%         endif %}
{%       else %}
{{         '' }}
{%       endif %}
{%       for element in section_config %}
{%         if element.state|d('present') not in [ 'absent', 'ignore', 'init' ] %}
{%           if element.comment|d() %}
{%             if not loop.first %}
{{               '' }}
{%             endif %}
{{             element.comment | regex_replace('\n$', '') | comment(prefix='', decoration='#', postfix='') -}}
{%           endif %}
{%           if element.raw|d() %}
{%             if element.state|d('present') == 'comment' %}
{{               '{}'.format(element.raw | regex_replace('\n$', '') | comment(prefix='', decoration='#', postfix='')) -}}
{%             else %}
{{               '{}'.format(element.raw | regex_replace('\n$', '')) }}
{%             endif %}
{%           else %}
{{ '{}{} = {}'.format(('#' if (element.state|d('present') == 'comment') else ''), element.name, (element.value if element.value is string else (element.value | selectattr("name", "defined") | map(attribute="name") | list | join(' ')))) }}
{%           endif %}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endif %}
{% endfor %}

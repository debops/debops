---
# vim: foldmarker=[[[,]]]:foldmethod=marker

# Copyright (C) 2015-2016 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2015      Hartmut Goebel <h.goebel@crazy-compilers.com>
# Copyright (C) 2015-2019 Robin Schneider <ypid@riseup.net>
# Copyright (C) 2015-2019 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Enable required Apache modules
  community.general.apache2_module:
    name: 'php5'
    state: 'present'
  when: owncloud__webserver == "apache"
  loop: '{{ q("flattened", owncloud__apache_modules) }}'

- name: Ensure restrictive permissions are set for the data directory
  ansible.builtin.file:
    path: '{{ owncloud__data_path }}'
    state: 'directory'
    owner: '{{ owncloud__app_user }}'
    group: '{{ owncloud__app_group }}'
    mode: '0770'

# ownCloud ./config/ [[[

- name: Install ownCloud config file
  ansible.builtin.template:
    src: 'srv/www/sites/config/debops.config.php.j2'
    dest: '{{ owncloud__deploy_path }}/config/debops.config.php'
    owner: '{{ owncloud__app_user }}'
    group: '{{ owncloud__app_group }}'
    mode: '0640'
    validate: 'php -f %s'

- name: Install ownCloud mail config file
  ansible.builtin.template:
    src: 'srv/www/sites/config/mail.config.php.j2'
    dest: '{{ owncloud__deploy_path }}/config/mail.config.php'
    owner: '{{ owncloud__app_user }}'
    group: '{{ owncloud__app_group }}'
    mode: '0640'
    validate: 'php -f %s'
  when: ((owncloud__mail_conf_map.keys() | length) >= 1)
  tags: [ 'role::owncloud:mail' ]

- name: Ensure the ownCloud mail config file is absent
  ansible.builtin.file:
    path: '{{ owncloud__deploy_path }}/config/mail.config.php'
    state: 'absent'
  when: ((owncloud__mail_conf_map.keys() | length) == 0)

- name: Ensure deprecated configuration files are absent
  ansible.builtin.file:
    path: '{{ item }}'
    state: 'absent'
  loop:
    - '{{ owncloud__deploy_path }}/config/custom.config.php'

# .. ]]]

# Setup the occ command [[[

- name: Remove legacy files
  ansible.builtin.file:
    state: 'absent'
    path: '{{ ansible_local.php.etc_base | d("/etc/php") + "/cli/conf.d/enable_apc.ini" }}'
  tags: [ 'role::owncloud:occ' ]

- name: Setup shortcut for the occ command
  ansible.builtin.template:
    src: 'usr/local/bin/occ.j2'
    dest: '{{ owncloud__occ_bin_file_path }}'
    owner: 'root'
    group: '{{ owncloud__app_group }}'
    mode: '0755'
  tags: [ 'role::owncloud:occ' ]

# .. ]]]

# Auto setup [[[

- name: Get ownCloud setup status
  ansible.builtin.command: '{{ owncloud__occ_bin_file_path | quote }} check'
  register: owncloud__register_occ_check
  changed_when: False

- name: Determine if ownCloud autosetup should be done
  ansible.builtin.set_fact:
    owncloud__do_autosetup: '{{ (owncloud__autosetup and
                                 owncloud__admin_username | d() and
                                 (owncloud__register_occ_check is not skipped) and
                                 (("is not installed" in owncloud__register_occ_check.stdout) or
                                  ("is not installed" in owncloud__register_occ_check.stderr))) }}'

- name: Automatically finish setup via the occ tool
  ansible.builtin.command: |
           {{ owncloud__occ_bin_file_path | quote }} maintenance:install
           '--data-dir={{ owncloud__data_path }}'
           '--database={{ owncloud__database_map[owncloud__database].dbtype }}'
           '--database-name={{ owncloud__database_map[owncloud__database].dbname }}'
           '--database-host={{ owncloud__database_map[owncloud__database].dbhost }}'
           '--database-user={{ owncloud__database_map[owncloud__database].dbuser }}'
           '--database-pass={{ owncloud__database_map[owncloud__database].dbpass }}'
           {% if owncloud__admin_username %}
           '--admin-user={{ owncloud__admin_username }}'
           '--admin-pass={{ owncloud__admin_password }}'
           {% endif %}
  register: owncloud__register_occ_install
  changed_when: owncloud__register_occ_install.changed | bool
  when: owncloud__do_autosetup | bool

# .. ]]]

# ownCloud applications configuration [[[1

- name: Get current ownCloud configuration via occ config:list
  ansible.builtin.include_tasks: 'run_occ.yml'
  loop_control:
    loop_var: 'owncloud__occ_item'
  tags: [ 'role::owncloud:occ_config' ]
  when: (owncloud__apps_config_combined is mapping and owncloud__apps_config_combined.keys() | length)
  loop:
    - command: 'config:list'
      get_output: True

- name: Capture occ output in variable
  ansible.builtin.set_fact:
    owncloud__occ_config_current: '{{ owncloud__occ_run_output }}'
  when: (owncloud__do_autosetup | bool and owncloud__apps_config_combined is mapping and owncloud__apps_config_combined.keys() | length and
         (not ansible_check_mode))
  tags: [ 'role::owncloud:occ_config' ]

- name: Set ownCloud apps configuration for each app
  ansible.builtin.include_tasks: 'run_occ_app_set.yml'
  loop_control:
    loop_var: 'owncloud__apps_item'
  with_dict: '{{ owncloud__apps_config_combined | d({}) }}'
  when: (owncloud__do_autosetup | d() | bool and not ansible_check_mode)
  tags: [ 'role::owncloud:occ_config' ]

# .. ]]]

# Run occ commands as specified in the inventory [[[
- name: Run occ commands as specified in the inventory
  ansible.builtin.include_tasks: 'run_occ.yml'
  loop_control:
    loop_var: 'owncloud__occ_item'
  tags: [ 'role::owncloud:occ' ]
  loop: '{{ q("flattened", owncloud__role_occ_cmd_list
                           + owncloud__occ_cmd_list
                           + owncloud__group_occ_cmd_list
                           + owncloud__host_occ_cmd_list
                           + owncloud__dependent_occ_cmd_list) }}'
# .. ]]]

# Configure cron job for background tasks [[[

- name: Setup cron service (nextcloud)
  ansible.builtin.cron:
    name: 'ownCloud Background Jobs'
    minute: '{{ owncloud__cron_minute }}'
    user: '{{ owncloud__app_user }}'
    job: 'test -x /usr/bin/php && test -e {{ (owncloud__deploy_path + "/cron.php") | quote }}
          && /usr/bin/php -f {{ (owncloud__deploy_path + "/cron.php") | quote }}'
    cron_file: 'owncloud'
  when: owncloud__variant == "nextcloud"

- name: Setup cron service (owncloud)
  ansible.builtin.cron:
    name: 'ownCloud Background Jobs'
    minute: '{{ owncloud__cron_minute }}'
    user: '{{ owncloud__app_user }}'
    job: 'test -x /usr/bin/php && test -e {{ (owncloud__deploy_path + "/occ") | quote }}
          && /usr/bin/php {{ (owncloud__deploy_path + "/occ") | quote }} system:cron'
    cron_file: 'owncloud'
  when: owncloud__variant == "owncloud"

# .. ]]]

# ownCloud upgrades [[[

- name: Disable the package manager hook script for ownCloud
  ansible.builtin.file:
    path: '/etc/apt/apt.conf.d/80owncloud-dpkg-hook'
    state: 'absent'

# .. ]]]

# ownCloud integrity check [[[

- name: Check ownCloud core integrity
  ansible.builtin.command: '{{ owncloud__occ_bin_file_path | quote }} integrity:check-core'
  register: owncloud__register_occ_integrity_check_core
  failed_when: (owncloud__register_occ_integrity_check_core.rc != 0 or
                owncloud__register_occ_integrity_check_core.stdout_lines | length != 0)
  changed_when: False
  when: owncloud__do_autosetup | bool

# ]]]

---
# Copyright (C) 2020 Pedro Luis Lopez <pedroluis.lopezsanchez@gmail.com>
# Copyright (C) 2020 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-or-later

- import_role:
    name: 'ansible_plugins'

- name: Install Prometheus alertmanager packages
  package:
    name: '{{ q("flattened", (prometheus_alertmanager__base_packages
                              + prometheus_alertmanager__packages)) }}'
    state: 'present'
  register: prometheus_alertmanager__register_install_status
  until: prometheus_alertmanager__register_install_status is succeeded

- name: Add Prometheus alertmanager user to specified groups
  user:
    name: 'prometheus'
    groups: '{{ prometheus_alertmanager__append_groups | join(",") | default(omit) }}'
    append: True
    createhome: False
  when: prometheus_alertmanager__pki|bool

- name: Fetch Ghostunnel release
  get_url:
    url: '{{ prometheus_alertmanager__ghostunnel_resource }}'
    dest: '{{ "/usr/local/bin/ghostunnel" }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: prometheus_alertmanager__pki|bool

- name: Divert the original prometheus configuration files
  dpkg_divert:
    path: '{{ item }}'
    state: 'present'
    delete: True
  with_items:
    - '/etc/default/prometheus-alertmanager'
    - '/etc/prometheus/alertmanager.yml'
  tags: [ 'role::prometheus_alertmanager:config' ]

- name: Configure Ghostunnel for Prometheus alertmanager
  template:
    src: 'etc/default/{{ item }}.j2'
    dest: '/etc/default/{{ item }}'
    owner: 'root'
    group: 'prometheus'
    mode: '0640'
  with_items:
    - 'ghostunnel-alertmanager'
    - 'ghostunnel-alertmanager-cluster'
  tags: [ 'role::prometheus_alertmanager:config' ]
  notify: restart ghostunnel prometheus alertmanager
  when: prometheus_alertmanager__pki|bool

- name: Configure Prometheus alertmanager
  template:
    src: '{{ item }}.j2'
    dest: '/{{ item }}'
    owner: 'root'
    group: 'prometheus'
    mode: '0640'
  with_items:
    - 'etc/default/prometheus-alertmanager'
    - 'etc/prometheus/alertmanager.yml'
  tags: [ 'role::prometheus_alertmanager:config' ]
  notify: restart prometheus alertmanager

- name: Configure discovery files for Prometheus server
  template:
    src: 'etc/prometheus/file_sd_configs.d/alertmanager.json.j2'
    dest: '/etc/prometheus/file_sd_configs.d/alertmanager.{{ inventory_hostname }}.json'
    owner: 'root'
    group: 'root'
    mode: '0644'
  delegate_to: '{{ prometheus_alertmanager__delegate_to }}'
  when: prometheus_alertmanager__server is defined and prometheus_alertmanager__server and
        prometheus_alertmanager__server_file_based_discovery_service

- name: Generate Ghostunnel systemd service unit
  template:
    src: 'etc/systemd/system/{{ item }}.service.j2'
    dest: '/etc/systemd/system/{{ item }}.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items:
    - 'ghostunnel-alertmanager'
    - 'ghostunnel-alertmanager-cluster'
  register: prometheus_alertmanager__register_ghostunnel_systemd
  notify: restart ghostunnel prometheus alertmanager
  when: prometheus_alertmanager__pki|bool

- name: Reload systemd configuration
  systemd:
    daemon_reload: True
  when: (ansible_service_mgr == 'systemd' and
         prometheus_alertmanager__register_ghostunnel_systemd is changed)

- name: Enable and start Ghostunnel Prometheus alertmanager
  service:
    name: '{{ item }}'
    state: 'started'
    enabled: True
  with_items:
    - 'ghostunnel-alertmanager'
    - 'ghostunnel-alertmanager-cluster'
  when: ansible_service_mgr == 'systemd' and
        prometheus_alertmanager__register_ghostunnel_systemd is changed

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save Prometheus alertmanager local facts
  template:
    src: 'etc/ansible/facts.d/prometheus_alertmanager.fact.j2'
    dest: '/etc/ansible/facts.d/prometheus_alertmanager.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: prometheus_alertmanager__register_local_facts

- name: Re-read local facts if they have been modified
  action: setup
  when: prometheus_alertmanager__register_local_facts is change

---
# Copyright (C) 2013-2016 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2015-2017 Robin Schneider <ypid@riseup.net>
# Copyright (C) 2014-2017 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  ansible.builtin.import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  ansible.builtin.import_role:
    name: 'secret'

- name: Pre hooks
  ansible.builtin.include_tasks: '{{ lookup("debops.debops.task_src", "sshd/pre_main.yml") }}'

- name: Make sure that Ansible local fact directory exists
  ansible.builtin.file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save Ansible local fact script
  ansible.builtin.template:
    src: 'etc/ansible/facts.d/sshd.fact.j2'
    dest: '/etc/ansible/facts.d/sshd.fact'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Reload Ansible local facts
  ansible.builtin.meta: 'flush_handlers'

- name: Make sure that OpenSSH configuration directory exists
  ansible.builtin.file:
    path: '/etc/ssh'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Block OpenSSH server from starting immediately when installed
  #
  # SSH server must not start, until security options are configured!
  # https://unix.stackexchange.com/questions/321621/configuring-my-sshd-securely-with-automation
  #
  # However, SSH might already be configured, started, and in use.
  # In this case we should not block it.  Something could try to restart
  # SSH e.g. unattended-upgrades.  We would end up locking ourselves out.
  #
  # In-between states could result from an failed upgrade.  The upgrade is
  # retried when we demand a package be installed.  The service would be
  # restarted, so once again we must not block it.
  #
  # In-between states could also result from a failed install.  We can't
  # tell the difference.  (Note if the failed install was from this role,
  # then we blocked the SSH server already).
  #
  # Users are responsible for avoiding situations, where a retried install
  # starts an SSH server which does not meet their current security
  # requirements.  Again, the trigger for the retry would be an install
  # of _any_ package.  This may be considered further illustration of the
  # problem with how Debian packages work.  It can be prevented by
  # remembering to remove the failed package first.  Fortunately, it is not
  # common for a package to fail to install.
  #
  # The state "config-files" is the result of `apt-get remove` without
  # `--purge`; the SSH server will not be running in this state.
  ansible.builtin.copy:
    dest: /etc/ssh/sshd_not_to_be_run
    content: |
      This file disables the ssh server.  It was created by debops.sshd.
      This file will be removed when configuration is successfully completed.
    mode: '0644'
  when: (ansible_local | d() and ansible_local.sshd | d() and
         not (ansible_local.sshd.installed | d()) | bool)

  # In a case where the OpenSSH server is installed by the role but not started
  # due to conditions specified above, this task will ensure that the runtime
  # directory exists. Without this, configuration check before the daemon is
  # restarted fails and stops the playbook execution.
- name: Ensure that the '/run/sshd' directory exists on first install
  ansible.builtin.file:
    path: '/run/sshd'
    state: 'directory'
    mode: '0755'

- name: Ensure OpenSSH support is installed
  ansible.builtin.apt:
    name: '{{ (sshd__base_packages
             + sshd__recommended_packages
             + sshd__optional_packages
             + sshd__ldap_packages
             + sshd__packages)
             | flatten }}'
    state: '{{ "present"
               if (ansible_local | d() and ansible_local.sshd | d())
               else "latest" }}'
    install_recommends: False
  register: sshd__register_packages
  notify: [ 'Refresh host facts' ]
  until: sshd__register_packages is succeeded

- name: Reload Ansible local facts
  ansible.builtin.meta: 'flush_handlers'

- name: Ensure that Ed25519 host key is present
  ansible.builtin.command: ssh-keygen -q -t ed25519 -N "" -f ssh_host_ed25519_key
  args:
    chdir: '/etc/ssh'
    creates: '/etc/ssh/ssh_host_ed25519_key'
  when: sshd__version is version('6.5', '>=')
  tags: [ 'role::sshd:config' ]

- name: Configure authorized_keys lookup
  ansible.builtin.include_tasks: authorized_keys_lookup.yml
  when: sshd__version is version('6.2', '>=') and
        sshd__authorized_keys_lookup | bool
  tags: [ 'role::sshd:config' ]

- name: Get list of available host keys
  ansible.builtin.shell: find /etc/ssh -maxdepth 1 -type f -name 'ssh_host_*_key.pub' -exec basename {} .pub \;
  register: sshd__register_host_keys
  changed_when: False
  check_mode: False
  tags: [ 'role::sshd:config' ]

- name: Get list of available host certs
  ansible.builtin.shell: find /etc/ssh -maxdepth 1 -type f -name 'ssh_host_*_key-cert.pub' -exec basename {} .pub \;
  register: sshd__register_host_certs
  changed_when: False
  check_mode: False
  when: sshd__scan_for_host_certs | bool
  tags: [ 'role::sshd:config' ]

- name: Setup trusted user CA key file
  ansible.builtin.template:
    src:      '{{ lookup("debops.debops.template_src", "etc/ssh/trusted_user_ca_file.pem.j2") }}'
    dest:     '{{ sshd__trusted_user_ca_keys_file }}'
    owner:    'root'
    group:    'root'
    mode:     '0644'
  when: sshd__trusted_user_ca_keys | d() | length > 0 and
        sshd__trusted_user_ca_keys_file is defined
  tags: [ 'role::sshd:config' ]

- name: Setup /etc/ssh/sshd_config
  ansible.builtin.template:
    src:    '{{ lookup("debops.debops.template_src", "etc/ssh/sshd_config.j2") }}'
    dest:   '/etc/ssh/sshd_config'
    owner:  'root'
    group:  'root'
    mode:   '0644'
  notify: [ 'Test sshd configuration and restart' ]
  tags: [ 'role::sshd:config' ]

- name: Configuration of additional SSH ports with socket activation
  when: (sshd__ports | length > 1 and ansible_service_mgr == 'systemd' and
         (ansible_local.sshd.socket_activation | d('disabled')) == 'enabled')
  block:

    - name: Create systemd override directory if needed
      ansible.builtin.file:
        path: '/etc/systemd/system/ssh.socket.d'
        state: 'directory'
        mode: '0755'

    - name: Generate systemd socket configuration
      ansible.builtin.template:
        src: 'etc/systemd/system/ssh.socket.d/listen.conf.j2'
        dest: '/etc/systemd/system/ssh.socket.d/listen.conf'
        mode: '0644'
      notify: [ 'Reload systemd daemon' ]

- name: Make sure the system-wide known_hosts file exists
  ansible.builtin.command: touch {{ sshd__known_hosts_file }}
  args:
    creates: '{{ sshd__known_hosts_file }}'
  tags: [ 'role::sshd:known_hosts' ]

- name: Get list of already scanned host fingerprints
  ansible.builtin.shell: set -o nounset -o pipefail -o errexit &&
         ssh-keygen -f {{ sshd__known_hosts_file }} -F {{ item }} | grep -q '^# Host {{ item }} found'
  args:
    executable: 'bash'
  loop: '{{ q("flattened", sshd__known_hosts
                           + sshd__group_known_hosts
                           + sshd__host_known_hosts) }}'
  when: item is defined and item
  register: sshd__register_known_hosts
  changed_when: False
  failed_when: False
  check_mode: False
  tags: [ 'role::sshd:known_hosts' ]

- name: Scan SSH fingerprints of specified hosts
  ansible.builtin.shell: '{{ sshd__known_hosts_command }} {{ item.item }} >> {{ sshd__known_hosts_file }}'
  with_items: '{{ sshd__register_known_hosts.results | d([]) }}'
  register: sshd__register_known_hosts_scan
  changed_when: sshd__register_known_hosts_scan.changed | bool
  when: item is defined and item.rc > 0
  tags: [ 'role::sshd:known_hosts' ]

- name: Check if /etc/ssh/moduli contains weak DH parameters
  ansible.builtin.shell: awk '$5 < {{ (sshd__moduli_minimum | int - 1) }}' /etc/ssh/moduli
  register: sshd__register_moduli
  changed_when: sshd__register_moduli.stdout
  check_mode: False

- name: Remove DH parameters smaller than the requested size
  ansible.builtin.shell: awk '$5 >= {{ (sshd__moduli_minimum | int - 1) }}' /etc/ssh/moduli > /etc/ssh/moduli.new ;
         [ -r /etc/ssh/moduli.new -a -s /etc/ssh/moduli.new ] && mv /etc/ssh/moduli.new /etc/ssh/moduli || true
  notify: [ 'Test sshd configuration and restart' ]
  register: sshd__register_moduli
  changed_when: sshd__register_moduli.changed | bool
  when: sshd__register_moduli.stdout

- name: Remove block on OpenSSH server startup
  ansible.builtin.file:
    name: '/etc/ssh/sshd_not_to_be_run'
    state: 'absent'
  notify: [ 'Test sshd configuration and restart' ]

- name: Add/remove diversion of /etc/pam.d/sshd
  debops.debops.dpkg_divert:
    path: '/etc/pam.d/sshd'
    state: '{{ "present"
               if sshd__pam_deploy_state | d("present") != "absent"
               else "absent" }}'
    delete: True

- name: Generate /etc/pam.d/sshd configuration
  ansible.builtin.template:
    src: '{{ lookup("debops.debops.template_src", "etc/pam.d/sshd.j2") }}'
    dest: '/etc/pam.d/sshd'
    mode: '0644'
  when: sshd__pam_deploy_state == 'present'

- name: Post hooks
  ansible.builtin.include_tasks: '{{ lookup("debops.debops.task_src", "sshd/post_main.yml") }}'

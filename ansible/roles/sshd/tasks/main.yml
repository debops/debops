---

- import_role:
    name: 'ansible_plugins'

- import_role:
    name: 'secret'

- name: Pre hooks
  include: '{{ lookup("task_src", "sshd/pre_main.yml") }}'

- name: Make sure that Ansible local fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save Ansible local fact script
  template:
    src: 'etc/ansible/facts.d/sshd.fact.j2'
    dest: '/etc/ansible/facts.d/sshd.fact'
    mode: '0755'
  register: sshd__register_fact_script

- name: Reload Ansible local facts
  setup:
    filter: ansible_local
  when: sshd__register_fact_script is changed

- name: Make sure that OpenSSH configuration directory exists
  file:
    path: '/etc/ssh'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Block OpenSSH server from starting immediately when installed
  #
  # SSH server must not start, until security options are configured!
  # http://unix.stackexchange.com/questions/321621/configuring-my-sshd-securely-with-automation
  #
  # However, SSH might already be configured, started, and in use.
  # In this case we should not block it.  Something could try to restart
  # SSH e.g. unattended-upgrades.  We would end up locking ourselves out.
  #
  # In-between states could result from an failed upgrade.  The upgrade is
  # retried when we demand a package be installed.  The service would be
  # restarted, so once again we must not block it.
  #
  # In-between states could also result from a failed install.  We can't
  # tell the difference.  (Note if the failed install was from this role,
  # then we blocked the SSH server already).
  #
  # Users are responsible for avoiding situations, where a retried install
  # starts an SSH server which does not meet their current security
  # requirements.  Again, the trigger for the retry would be an install
  # of _any_ package.  This may be considered further illustration of the
  # problem with how Debian packages work.  It can be prevented by
  # remembering to remove the failed package first.  Fortunately, it is not
  # common for a package to fail to install.
  #
  # The state "config-files" is the result of `apt-get remove` without
  # `--purge`; the SSH server will not be running in this state.
  copy:
    dest: /etc/ssh/sshd_not_to_be_run
    content: |
      This file disables the ssh server.  It was created by debops.sshd.
      This file will be removed when configuration is successfully completed.
  when: (ansible_local|d() and ansible_local.sshd|d() and
         not (ansible_local.sshd.installed|d())|bool)

  # In a case where the OpenSSH server is installed by the role but not started
  # due to conditions specified above, this task will ensure that the runtime
  # directory exists. Without this, configuration check before the daemon is
  # restarted fails and stops the playbook execution.
- name: Ensure that the '/run/sshd' directory exists on first install
  file:
    path: '/run/sshd'
    state: 'directory'
    mode: '0755'
  when: (ansible_local|d() and ansible_local.sshd|d() and
         not (ansible_local.sshd.installed|d())|bool)

- name: Ensure OpenSSH support is installed
  apt:
    name: '{{ (sshd__base_packages
             + sshd__recommended_packages
             + sshd__optional_packages
             + sshd__ldap_packages
             + sshd__packages)
             | flatten }}'
    state: '{{ "present"
               if (ansible_local|d() and ansible_local.sshd|d())
               else "latest" }}'
    install_recommends: False
  register: sshd__register_packages
  until: sshd__register_packages is succeeded

- name: Reload Ansible local facts
  setup:
    filter: ansible_local
  when: sshd__register_packages is changed

- name: Check OpenSSH server version
  environment:
    LC_MESSAGES: 'C'
  shell: 'set -o nounset -o pipefail -o errexit &&
          dpkg-query -W -f="\${Version}\n" "openssh-server" | sed -re "s/^.*:([0-9]+\.[0-9]+).*/\1/"'
  args:
    executable: 'bash'
  register: sshd__register_version
  changed_when: False
  check_mode: False
  tags: [ 'role::sshd:config' ]

- name: Ensure that Ed25519 host key is present
  command: ssh-keygen -q -t ed25519 -N "" -f ssh_host_ed25519_key
  args:
    chdir: '/etc/ssh'
    creates: '/etc/ssh/ssh_host_ed25519_key'
  when: sshd__register_version.stdout|d() and
        sshd__register_version.stdout is version_compare('6.5', '>=')
  tags: [ 'role::sshd:config' ]

- name: Configure authorized_keys lookup
  include: authorized_keys_lookup.yml
  when: sshd__register_version.stdout|d() and
        sshd__register_version.stdout is version_compare('6.2', '>=') and
        sshd__authorized_keys_lookup|bool
  tags: [ 'role::sshd:config' ]

- name: Get list of available host keys
  shell: find /etc/ssh -maxdepth 1 -type f -name 'ssh_host_*_key.pub' -exec basename {} .pub \;
  register: sshd__register_host_keys
  changed_when: False
  check_mode: False
  tags: [ 'role::sshd:config' ]

- name: Get list of available host certs
  shell: find /etc/ssh -maxdepth 1 -type f -name 'ssh_host_*_key-cert.pub' -exec basename {} .pub \;
  register: sshd__register_host_certs
  changed_when: False
  check_mode: False
  when: sshd__scan_for_host_certs|bool
  tags: [ 'role::sshd:config' ]

- name: Setup trusted user CA key file
  template:
    src:      '{{ lookup("template_src", "etc/ssh/trusted_user_ca_file.pem.j2") }}'
    dest:     '{{ sshd__trusted_user_ca_keys_file }}'
    owner:    'root'
    group:    'root'
    mode:     '0644'
  when: sshd__trusted_user_ca_keys | d() | length > 0  and
        sshd__trusted_user_ca_keys_file is defined
  tags: [ 'role::sshd:config' ]

- name: Setup /etc/ssh/sshd_config
  template:
    src:    '{{ lookup("template_src", "etc/ssh/sshd_config.j2") }}'
    dest:   '/etc/ssh/sshd_config'
    owner:  'root'
    group:  'root'
    mode:   '0644'
  notify: [ 'Test sshd configuration and restart' ]
  tags: [ 'role::sshd:config' ]

- name: Make sure the system-wide known_hosts file exists
  command: touch {{ sshd__known_hosts_file }}
  args:
    creates: '{{ sshd__known_hosts_file }}'
    warn: False
  tags: [ 'role::sshd:known_hosts' ]

- name: Get list of already scanned host fingerprints
  shell: set -o nounset -o pipefail -o errexit &&
         ssh-keygen -f {{ sshd__known_hosts_file }} -F {{ item }} | grep -q '^# Host {{ item }} found'
  args:
    executable: 'bash'
  with_flattened:
    - '{{ sshd__known_hosts }}'
    - '{{ sshd__group_known_hosts }}'
    - '{{ sshd__host_known_hosts }}'
  when: item is defined and item
  register: sshd__register_known_hosts
  changed_when: False
  failed_when: False
  check_mode: False
  tags: [ 'role::sshd:known_hosts' ]

- name: Scan SSH fingerprints of specified hosts
  shell: '{{ sshd__known_hosts_command }} {{ item.item }} >> {{ sshd__known_hosts_file }}'
  with_items: '{{ sshd__register_known_hosts.results|d([]) }}'
  when: item is defined and item.rc > 0
  tags: [ 'role::sshd:known_hosts' ]

- name: Check if /etc/ssh/moduli contains weak DH parameters
  shell: awk '$5 < {{ (sshd__moduli_minimum|int -1) }}' /etc/ssh/moduli
  register: sshd__register_moduli
  changed_when: sshd__register_moduli.stdout
  check_mode: False

- name: Remove DH parameters smaller than the requested size
  shell: awk '$5 >= {{ (sshd__moduli_minimum|int - 1) }}' /etc/ssh/moduli > /etc/ssh/moduli.new ;
         [ -r /etc/ssh/moduli.new -a -s /etc/ssh/moduli.new ] && mv /etc/ssh/moduli.new /etc/ssh/moduli || true
  notify: [ 'Test sshd configuration and restart' ]
  when: sshd__register_moduli.stdout

- name: Remove block on OpenSSH server startup
  file:
    name: '/etc/ssh/sshd_not_to_be_run'
    state: 'absent'
  notify: [ 'Test sshd configuration and restart' ]

- name: Divert PAM configuration for sshd
  command: dpkg-divert --quiet --local
           --divert "/etc/pam.d/sshd.dpkg-divert"
           --rename "/etc/pam.d/sshd"
  args:
    creates: '/etc/pam.d/sshd.dpkg-divert'
  when: sshd__pam_deploy_state == 'present'

- name: Generate PAM configuration for sshd
  template:
    src: 'etc/pam.d/sshd.j2'
    dest: '/etc/pam.d/sshd'
    mode: '0644'
  when: sshd__pam_deploy_state == 'present'

- name: Revert default sshd PAM configuration if requested
  shell: set -o nounset -o pipefail -o errexit &&
         rm -f /etc/pam.d/sshd &&
         dpkg-divert --quiet --local --rename --remove /etc/pam.d/sshd
  args:
    executable: 'bash'
    removes: '/etc/pam.d/sshd.dpkg-divert'
  when: sshd__pam_deploy_state != 'present'

- name: Post hooks
  include: '{{ lookup("task_src", "sshd/post_main.yml") }}'

---

- name: Prepare OpenLDAP installation to use the rfc2307bis schema
  include_tasks: 'prepare_rfc2307bis.yml'
  when: (slapd__rfc2307bis_enabled|bool and
         (ansible_local is undefined or ansible_local.slapd is undefined))

- name: Initialize BaseDN value in debconf using a DNS domain
  debconf:
    name: 'slapd'
    question: '{{ item }}'
    vtype: 'string'
    value: '{{ slapd__domain }}'
  loop: [ 'slapd/domain', 'shared/organization' ]

- name: Install OpenLDAP packages
  package:
    name: '{{ q("flattened", (slapd__base_packages
                              + slapd__schema_packages
                              + slapd__packages)) }}'
    state: 'present'
  register: slapd__register_packages
  until: slapd__register_packages is succeeded

- name: Allow access to additional UNIX groups by the OpenLDAP service
  user:
    name: '{{ slapd__user }}'
    groups: '{{ slapd__additional_groups }}'
    append: True
    state: 'present'
  register: slapd__register_unix_groups

- name: Restart slapd if UNIX groups were modified
  service:
    name: 'slapd'
    state: 'restarted'
  when: slapd__register_unix_groups is changed

- name: Ensure that the log directory exists
  file:
    path: '{{ slapd__log_dir }}'
    state: 'directory'
    owner: '{{ slapd__user }}'
    group: '{{ slapd__group }}'
    mode: '0750'

- name: Install helper scripts
  copy:
    src: 'usr/local/sbin/'
    dest: '/usr/local/sbin/'
    mode: '0755'
  tags: [ 'role::slapd:scripts' ]

- name: Ensure that DebOps schema directory exists
  file:
    path: '{{ slapd__debops_schema_path }}'
    state: 'directory'
    mode: '0755'

- name: Copy custom DebOps schemas to the OpenLDAP host
  copy:
    src: 'etc/ldap/schema/debops/'
    dest: '{{ slapd__debops_schema_path + "/" }}'
    mode: '0644'

- name: Load custom LDAP schemas
  script: 'script/ldap-load-schema {{ item }}'
  loop: '{{ q("flattened", slapd__combined_schemas) }}'
  register: slapd__register_load_schemas
  changed_when: (slapd__register_load_schemas.stdout|d() and
                 (item | basename | regex_replace('.schema$','') + ' already exists in the LDAP, skippingâ€¦')
                 not in slapd__register_load_schemas.stdout_lines)
  tags: [ 'role::slapd:schema' ]

- name: Ensure that additional database directories exist
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: '{{ slapd__user }}'
    group: '{{ slapd__group }}'
    mode: '0755'
  loop: '{{ slapd__additional_database_dirs }}'

- name: Configure backup snapshots as cron jobs
  cron:
    name: 'Create {{ item }} backup snapshots of OpenLDAP databases'
    special_time: '{{ item }}'
    cron_file: 'slapd-snapshot'
    user: 'root'
    state: '{{ slapd__snapshot_deploy_state
               if (item in slapd__snapshot_cron_jobs)
               else "absent" }}'
    job: '/usr/local/sbin/slapd-snapshot {{ item }}'
  loop: [ 'daily', 'weekly', 'monthly' ]
  loop_control:
    label: '{{ {"state": (slapd__snapshot_deploy_state
                          if (item in slapd__snapshot_cron_jobs)
                          else "absent"),
                "cron_job": item} }}'

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save OpenLDAP server local facts
  template:
    src: 'etc/ansible/facts.d/slapd.fact.j2'
    dest: '/etc/ansible/facts.d/slapd.fact'
    mode: '0755'
  register: slapd__register_facts

- name: Update Ansible facts if they were modified
  action: setup
  when: slapd__register_facts is changed

- name: Perform OpenLDAP tasks
  include_tasks: 'slapd_tasks.yml'
  loop: '{{ q("flattened", slapd__combined_tasks) | parse_kv_items }}'
  loop_control:
    label: '{{ {"state": item.state,
                "dn": item.dn,
                "attributes": item.attributes|d({})} }}'
  when: item.name|d() and item.dn|d() and
        item.state|d('present') not in [ 'init', 'ignore' ]
  no_log: '{{ item.no_log | d(True
                              if ("userPassword" in (item.attributes|d({})).keys() or
                                  "olcRootPW"    in (item.attributes|d({})).keys())
                              else False) }}'

- name: Configure enabled services
  lineinfile:
    dest: '/etc/default/slapd'
    regexp: '^SLAPD_SERVICES='
    line: 'SLAPD_SERVICES="{{ slapd__default_services | join(" ") }}"'
    state: 'present'
  notify: [ 'Restart slapd' ]

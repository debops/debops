---
# Copyright (C) 2016 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2016 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import DebOps secret role
  ansible.builtin.import_role:
    name: 'secret'

- name: Create required groups
  ansible.builtin.group:
    name: '{{ item.name if item.name | d() else item }}'
    system: '{{ item.system | bool if item.system is defined else gitlab_runner__system | bool }}'
    state: 'present'
  loop: '{{ q("flattened", [gitlab_runner__group]
                           + gitlab_runner__additional_groups) }}'

- name: Create gitlab-runner user
  ansible.builtin.user:
    name: '{{ gitlab_runner__user }}'
    group: '{{ gitlab_runner__group }}'
    groups: '{{ gitlab_runner__additional_groups | map(attribute="name") | list | join(",") }}'
    append: True
    home: '{{ gitlab_runner__home }}'
    system: '{{ gitlab_runner__system | bool }}'
    comment: '{{ gitlab_runner__comment }}'
    shell: '{{ gitlab_runner__shell }}'
    state: 'present'
    generate_ssh_key: '{{ gitlab_runner__ssh_generate | bool }}'
    ssh_key_bits: '{{ gitlab_runner__ssh_generate_bits }}'
    skeleton: null

- name: Remove '~/.bash_logout' to avoid conflicts with the shell runner
  ansible.builtin.file:
    state: 'absent'
    path: "{{ gitlab_runner__home }}/.bash_logout"

- name: Allow Docker access for gitlab-runner user
  ansible.builtin.user:
    name: '{{ gitlab_runner__user }}'
    groups: 'docker'
    append: True
  when: (ansible_local | d() and ansible_local.docker_server | d() and
         (ansible_local.docker_server.installed | d()) | bool)

- name: Copy custom files to GitLab Runner host
  ansible.builtin.copy:
    src: '{{ item.src | d(omit) }}'
    content: '{{ item.content | d(omit) }}'
    dest: '{{ item.dest }}'
    owner: '{{ item.owner | d(omit) }}'
    group: '{{ item.group | d(omit) }}'
    mode: '{{ item.mode | d(omit) }}'
    directory_mode: '{{ item.directory_mode | d(omit) }}'
    follow: '{{ item.follow | d(omit) }}'
    force: '{{ item.force | d(omit) }}'
  loop: '{{ q("flattened", gitlab_runner__custom_files
                           + gitlab_runner__group_custom_files
                           + gitlab_runner__host_custom_files) }}'
  when: ((item.src | d() or item.content | d()) and item.dest | d())

- name: Make sure APT can access HTTPS repositories
  ansible.builtin.apt:
    name: [ 'apt-transport-https', 'openssl', 'ca-certificates' ]
    state: 'present'
    install_recommends: False
    update_cache: True
    cache_valid_time: '{{ ansible_local.core.cache_valid_time | d("86400") }}'
  register: gitlab_runner__register_apt_https
  until: gitlab_runner__register_apt_https is succeeded

- name: Install gitlab-runner packages
  ansible.builtin.apt:
    name: "{{ query('flattened', gitlab_runner__base_packages +
                                 gitlab_runner__packages) }}"
    state: 'present'
    install_recommends: False
  register: gitlab_runner__register_packages
  until: gitlab_runner__register_packages is succeeded

- name: Register new GitLab Runners
  ansible.builtin.uri:
    url: '{{ (item.api_url | d(gitlab_runner__api_url)) + "api/v4/user/runners" }}'
    method: 'POST'
    headers:
      'PRIVATE-TOKEN': '{{ item.api_token | d(gitlab_runner__api_token) }}'
    body_format: 'form-urlencoded'
    body:
      runner_type: '{{ item.runner_type | d(gitlab_runner__runner_type) }}'
      group_id: '{{ item.group_id | d(gitlab_runner__group_id) | d(omit) }}'
      project_id: '{{ item.project_id | d(gitlab_runner__project_id) | d(omit) }}'
      description: '{{ item.name }}'
      tag_list: '{{ (item.tags | d([])
                     + (gitlab_runner__shell_tags
                        if (item.executor == "shell") else [])
                     + gitlab_runner__combined_tags)
                     | unique | join(",") }}'
      run_untagged: '{{ item.run_untagged | d(gitlab_runner__run_untagged) }}'
      paused: '{{ item.paused | d(omit) }}'
      locked: '{{ item.locked | d(omit) }}'
      access_level: '{{ item.access_level | d(omit) }}'
      maximum_timeout: '{{ item.maximum_timeout | d(omit) }}'
      maintenance_note: '{{ item.maintenance_note | d(omit) }}'
    status_code: '200,201'
  register: gitlab_runner__register_new_instances
  loop: '{{ q("flattened", gitlab_runner__default_instances
                           + gitlab_runner__instances
                           + gitlab_runner__group_instances
                           + gitlab_runner__host_instances) }}'
  when: ((item.api_token | d() or gitlab_runner__api_token) and item.name and
         (item.state is undefined or item.state != 'absent') and
         (ansible_local is undefined or
          (ansible_local | d() and (ansible_local.gitlab_runner is undefined or
           (ansible_local.gitlab_runner | d() and ansible_local.gitlab_runner.instances is defined and
            item.name not in ansible_local.gitlab_runner.instances)))))

- name: Generate GitLab Runner configuration files
  ansible.builtin.template:
    src: 'etc/gitlab-runner/{{ item }}.j2'
    dest: '/etc/gitlab-runner/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0600'
  with_items: [ 'config.toml', 'ansible.json' ]

- name: Delete GitLab Runners if requested
  ansible.builtin.uri:
    url: '{{ (item.0.api_url | d(gitlab_runner__api_url)) + "api/v4/runners/" + item.1.id | string }}'
    method: 'DELETE'
    headers:
      'PRIVATE-TOKEN': '{{ item.0.api_token | d(gitlab_runner__api_token) }}'
  with_together:
    - '{{ gitlab_runner__default_instances + gitlab_runner__instances
          + gitlab_runner__group_instances + gitlab_runner__host_instances }}'
    - '{{ ansible_local.gitlab_runner.instance_tokens | d([]) }}'
  when: ((item.0.api_token | d() or gitlab_runner__api_token)
         and item.0.name | d() and item.1.name | d() and item.0.name == item.1.name and
         (item.0.state | d() and item.0.state == 'absent'))
  failed_when: False
  no_log: '{{ debops__no_log | d(True) }}'

- name: Get the SSH key from the remote host
  ansible.builtin.slurp:
    src: '~{{ gitlab_runner__user }}/.ssh/id_rsa.pub'
  register: gitlab_runner__register_ssh_key
  when: gitlab_runner__ssh_generate | bool

- name: Distribute SSH key to other hosts
  ansible.posix.authorized_key:
    key: '{{ gitlab_runner__register_ssh_key.content | b64decode | trim }}'
    user: '{{ item.user }}'
    state: 'present'
    key_options: '{{ item.options | d() }}'
  delegate_to: '{{ item.host }}'
  become: '{{ item.become | d(True) }}'
  with_items: '{{ gitlab_runner__ssh_install_to }}'
  when: gitlab_runner__ssh_generate | bool and item.user | d() and item.host | d()

- name: Make sure that the ~/.ssh directory exists
  ansible.builtin.file:
    path: '{{ gitlab_runner__home }}/.ssh'
    state: 'directory'
    owner: '{{ gitlab_runner__user }}'
    group: '{{ gitlab_runner__group }}'
    mode: '0700'
  when: gitlab_runner__ssh_known_hosts | d()

- name: Make sure the ~/.ssh/known_hosts file exists
  ansible.builtin.copy:
    content: ''
    dest: '{{ gitlab_runner__home }}/.ssh/known_hosts'
    owner: '{{ gitlab_runner__user }}'
    group: '{{ gitlab_runner__group }}'
    mode: '0644'
    force: False
  when: gitlab_runner__ssh_known_hosts | d()

- name: Get list of already scanned host fingerprints
  ansible.builtin.shell: set -o nounset -o pipefail -o errexit &&
         ssh-keygen -f {{ gitlab_runner__home }}/.ssh/known_hosts -F {{ item }} | grep -q '^# Host {{ item }} found'
  args:
    executable: 'bash'
  with_items: '{{ gitlab_runner__ssh_known_hosts }}'
  when: gitlab_runner__ssh_known_hosts | d()
  register: gitlab_runner__register_known_hosts
  changed_when: False
  failed_when: False
  check_mode: False

- name: Scan SSH fingerprints of specified hosts
  ansible.builtin.shell: 'ssh-keyscan -H -T 10 {{ item.item }} >> {{ gitlab_runner__home + "/.ssh/known_hosts" }}'
  with_items: '{{ gitlab_runner__register_known_hosts.results }}'
  register: gitlab_runner__register_keyscan
  changed_when: gitlab_runner__register_keyscan.changed | bool
  when: gitlab_runner__ssh_known_hosts and item is defined and item.rc > 0
  failed_when: False

- name: Configure Vagrant libvirt access
  ansible.builtin.user:
    name: '{{ gitlab_runner__user }}'
    append: True
    groups: '{{ ([ansible_local.libvirtd.unix_sock_group
                  if (ansible_local.libvirtd.unix_sock_group | d())
                  else "libvirt"]
                 + (["kvm"]
                    if (ansible_local | d() and ansible_local.libvirtd | d() and
                        (ansible_local.libvirtd.hw_virt | d()) | bool)
                    else [])) | join(",") }}'
  when: gitlab_runner__vagrant_libvirt | bool

- name: Configure Vagrant libvirt sudo access
  ansible.builtin.template:
    src: 'etc/sudoers.d/gitlab-runner-vagrant-libvirt.j2'
    dest: '/etc/sudoers.d/gitlab-runner-vagrant-libvirt'
    owner: 'root'
    group: 'root'
    mode: '0440'
  when: (ansible_local | d() and ansible_local.sudo | d() and
         (ansible_local.sudo.installed | d()) | bool and
         gitlab_runner__vagrant_libvirt | bool)

- name: Find 'vagrant-libvirt' source code
  ansible.builtin.command: find /usr/share/rubygems-integration/all/gems -maxdepth 1 -type d -name 'vagrant-libvirt-*'
  register: gitlab_runner__register_libvirt_source
  when: gitlab_runner__vagrant_libvirt_patch | bool
  changed_when: False
  check_mode: False
  tags: [ 'role::gitlab_runner:patch' ]

- name: Patch 'vagrant-libvirt' source code
  ansible.posix.patch:
    src: '{{ "patches/package_domain-keep-ssh-host-keys-"
             + (item | basename | replace("vagrant-libvirt-", "")) + ".patch" }}'
    basedir: '{{ item }}'
    state: '{{ gitlab_runner__vagrant_libvirt_patch_state }}'
  with_items: '{{ gitlab_runner__register_libvirt_source.stdout_lines }}'
  when: gitlab_runner__vagrant_libvirt_patch | bool
  tags: [ 'role::gitlab_runner:patch' ]

- name: Configure Vagrant LXC sudo access
  ansible.builtin.template:
    src: 'etc/sudoers.d/gitlab-runner-vagrant-lxc.j2'
    dest: '/etc/sudoers.d/gitlab-runner-vagrant-lxc'
    owner: 'root'
    group: 'root'
    mode: '0440'
  when: (ansible_local | d() and ansible_local.sudo | d() and
         (ansible_local.sudo.installed | d()) | bool and
         gitlab_runner__vagrant_lxc | bool)

- name: Make sure that Ansible fact directory exists
  ansible.builtin.file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save GitLab Runner local facts
  ansible.builtin.template:
    src: 'etc/ansible/facts.d/gitlab_runner.fact.j2'
    dest: '/etc/ansible/facts.d/gitlab_runner.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags: [ 'meta::facts' ]

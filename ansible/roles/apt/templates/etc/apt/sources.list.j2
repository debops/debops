{# Copyright (C) 2013-2023 Maciej Delmanowski <drybjed@gmail.com>
 # Copyright (C) 2015-2017 Robin Schneider <ypid@riseup.net>
 # Copyright (C) 2014-2023 DebOps <https://debops.org/>
 # SPDX-License-Identifier: GPL-3.0-only
 #}
# {{ ansible_managed }}

{% for element in apt__combined_sources | debops.debops.parse_kv_items(merge_keys=['types', 'uris', 'suites', 'components']) %}
{%   if element.state not in ['absent', 'ignore', 'init'] %}
{%     set element_comment = ('#' if (element.state == 'comment') else '') %}
{%     if element.comment | d() %}
{{       element.comment | regex_replace('\n$', '') | comment(prefix='', postfix='') -}}
{%     endif %}
{%     if element.raw | d() %}
{%       if element_comment %}
{{         element.raw | regex_replace('\n$', '') | comment(decoration='#', prefix='', postfix='') -}}
{%       else %}
{{         element.raw | regex_replace('\n$', '') }}
{%       endif %}
{%     else %}
{%       set types = [] %}
{%       set uris = [] %}
{%       set suites = [] %}
{%       set components = [] %}
{%       if element.type | d() %}
{%         set _ = types.append(element.type) %}
{%       endif %}
{%       if element.types | d() %}
{%         set _ = types.extend(element.types | selectattr('state', 'equalto', 'present') | map(attribute='name') | list) %}
{%       endif %}
{%       if not types %}
{%         set _ = types.extend(apt__archive_types) %}
{%       endif %}
{%       if element.uri | d() %}
{%         set _ = uris.append(element.uri) %}
{%       endif %}
{%       if element.uris | d() %}
{%         set _ = uris.extend(element.uris | selectattr('state', 'equalto', 'present') | map(attribute='name') | list) %}
{%       endif %}
{%       if element.suite | d() %}
{%         set _ = suites.append(element.suite) %}
{%       endif %}
{%       if element.suites | d() %}
{%         set suites = element.suites | selectattr('state', 'equalto', 'present') | map(attribute='name') | list %}
{%       endif %}
{%       if element.component | d() %}
{%         set _ = components.append(element.component) %}
{%       endif %}
{%       if element.components | d() %}
{%         set components = element.components | selectattr('state', 'equalto', 'present') | map(attribute='name') | list %}
{%       endif %}
{%       set source_options = '' %}
{%       set parsed_options = [] %}
{%       if element.options | d() %}
{%         for option in element.options %}
{%           if option.value is string %}
{%             set option_string = option.name + '=' + option.value %}
{%           else %}
{%             set option_string = option.name + '=' + option.value | selectattr('state', 'equalto', 'present') | map(attribute='name') | list | join(',') %}
{%           endif %}
{%           set _ = parsed_options.append(option_string) %}
{%         endfor %}
{%       endif %}
{%       if parsed_options %}
{%         set source_options = ' [' + parsed_options | join(' ') + ']' %}
{%       endif %}
{%       for uri in uris %}
{%         for suite in suites %}
{%           for type in types %}
{%             if type == 'deb-src' and apt__archive_sources_disabled | bool %}
{%                 set element_comment = '#' %}
{%               else %}
{%                 set element_comment = ('#' if (element.state == 'comment') else '') %}
{%             endif %}
{{             '{}{}{} {} {} {}'.format(element_comment, type, source_options, uri, suite, components | join(' ')) }}
{%           endfor %}
{%         endfor %}
{%       endfor %}
{%     endif %}
{%     if element.separate | d(True) and not loop.last %}
{{       '' }}
{%     endif %}
{%   endif %}
{% endfor %}

---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# debops.discourse default variables [[[
# ===================================

# .. contents:: Sections
#    :local:
#
# .. include:: ../../../includes/global.rst


# Discourse version configuration [[[
# --------------------------------

# These variables define what Discourse release branch will be used to install
# Discourse. The :envvar:`discourse_release` variable is used to enable/disable
# specific features dependent on the Discourse version, but does not correspond to
# the actual specific version number.
#
# Both of these variables should be kept in sync.

# .. envvar:: discourse__release_map [[[
#
# This is the dictionary that keeps track of supported Discourse releases per OS
# distribution/release. Older OS releases might not have the required
# environment support, for example old Ruby version.
discourse__release_map:
  'buster':  'v2.3.2'

                                                                   # ]]]
# .. envvar:: discourse__distribution_release [[[
#
# Specify the OS release which is used to select the version of Discourse to
# install and APT package names.
discourse__distribution_release: '{{ ansible_local.core.distribution_release
                                  if (ansible_local|d() and ansible_local.core|d() and
                                      ansible_local.core.distribution_release|d())
                                  else ansible_distribution_release }}'

                                                                   # ]]]
# .. envvar:: discourse_release [[[
#
# Specify the Discourse release to install or manage. The role checks what release
# is currently installed and can perform automatic upgrade if the installed
# release is older than the specified. Downgrades are not supported.
discourse_release: '{{ discourse__release_map[discourse__distribution_release] }}'

                                                                   # ]]]
                                                                   # ]]]
# Application features [[[
# ------------------------

# .. envvar:: discourse__database [[[
#
# What database to use for Discourse instance? Supported options:
#
# - ``postgresql``: use PostgreSQL database
#
# The role expects the selected database server to be configured. See the
# documentation of the :ref:`debops.postgresql_server` role for information about
# its features.
discourse__database: '{{ ansible_local.discourse.database
                      if (ansible_local|d() and ansible_local.discourse|d() and
                          ansible_local.discourse.database|d())
                      else ("postgresql"
                            if (ansible_local|d() and ansible_local.postgresql is defined)
                            else ("mariadb-is-deprecated"
                                  if (ansible_local|d() and ansible_local.mariadb is defined)
                                  else "no-database-detected")) }}'

                                                                   # ]]]
# Application FQDN and DNS addresses [[[
# --------------------------------------

# .. envvar:: discourse__instance_name [[[
#
# The name of this discourse instance.
discourse__instance_name: 'discourse'


# .. envvar:: discourse__fqdn [[[
#
# The Fully Qualified Domain Name of the Discourse application. This
# address is used to configure the webserver frontend. Discourse
# requires a DNS hostname. IP addresses are unsupported and will not
# work.
discourse__fqdn: 'discourse.{{ discourse_domain }}'

                                                                   # ]]]
# .. envvar:: discourse_domain [[[
#
# Domain which will be used for nginx server and discourse access
# Discourse will be configured with HTTPS enabled by default
discourse_domain: '{{ ansible_local.core.domain
                   if (ansible_local|d() and ansible_local.core|d() and
                       ansible_local.core.domain|d())
                   else (ansible_domain if ansible_domain else ansible_hostname) }}'
                                                                   # ]]]
                                                                   # ]]]
# nginx webserver options [[[
# ---------------------------

# .. envvar:: discourse_nginx_auth_realm [[[
#
# Webserver authentication realm.
discourse_nginx_auth_realm: 'Discourse access is restricted'

                                                                   # ]]]
# .. envvar:: discourse_nginx_access_policy [[[
#
# Name of webserver access policy to enable. Refer to :ref:`debops.nginx` for
# details.
discourse_nginx_access_policy: ''

                                                                   # ]]]
# .. envvar:: discourse_nginx_client_max_body_size [[[
#
# Maximum file upload size (nginx client_max_body_size value.). Keep
# up to date when changing the corresponding site setting in
# config/site_settings.yml.
discourse_nginx_client_max_body_size: '10m'

                                                                   # ]]]
# .. envvar:: discourse_nginx_proxy_timeout [[[
#
# nginx - discourse proxy timeout in seconds
discourse_nginx_proxy_timeout: '300'
                                                                   # ]]]
                                                                   # ]]]
# E-mail configuration [[[
# ------------------------

# .. envvar:: discourse_admin_emails [[[
#
# List of default admin account e-mail addresses (Discourse calls this
# "developers email").
discourse_admin_emails:
  - 'admin@{{ discourse_domain }}'
                                                                   # ]]]
# .. envvar:: discourse__smtp_host [[[
#
# SMTP server to use.
discourse__smtp_host: 'mail.{{ discourse_domain }}'
                                                                   # ]]]
# .. envvar:: discourse__smtp_port [[[
#
# SMTP server port to use.
discourse__smtp_port: '{{ 25 }}'
                                                                   # ]]]
# .. envvar:: discourse__smtp_user [[[
#
# Username for authenticating the SMTP connection
discourse__smtp_user: ''
                                                                   # ]]]
# .. envvar:: discourse__smtp_password [[[
#
# Password for authenticating the SMTP connection
discourse__smtp_password: ''
                                                                   # ]]]
# .. envvar:: discourse__smtp_auth_mechanism [[[
#
# SMTP authentication mechanism to use
discourse__smtp_auth_mechanism: 'plain'
                                                                   # ]]]
# .. envvar:: discourse__smtp_start_tls [[[
#

# Enable TLS encryption for smtp connections. Please note: Despite the
# name of this option, this does not *enforce* ``STARTTLS`.
discourse__smtp_start_tls: True
                                                                   # ]]]
                                                                   # ]]]
# Database configuration [[[
# --------------------------

# .. envvar:: discourse_database_server [[[
#
# FQDN of the database server. It will be configured by the
# :ref:`debops.postgresql` role.
discourse_database_server: '{{ ansible_local[discourse__database].server }}'

                                                                   # ]]]
# .. envvar:: discourse_database_port [[[
#
# Port the database is listening on.
discourse_database_port: '{{ ansible_local[discourse__database].port }}'

                                                                   # ]]]
# .. envvar:: discourse_database_user [[[
#
# Name of the database account to use for the Discourse application.
discourse_database_user: '{{discourse__instance_name}}'

                                                                   # ]]]
# .. envvar:: discourse_database_name [[[
#
# Name of the database to use for the Discourse data.
discourse_database_name: '{{discourse__instance_name}}_production'

                                                                   # ]]]
# .. envvar:: discourse_database_password_path [[[
#
# Path to database password file located on the Ansible Controller. See the
# :ref:`debops.secret` role for more details.
discourse_database_password_path: '{{ secret + "/" + discourse__database + "/" +
                                   ansible_local[discourse__database].delegate_to }}{%
                                     if discourse__database=="postgresql" %}/{{ ansible_local[discourse__database].port }}{% endif
                                   %}{{ "/credentials/" + discourse_database_user +
                                   "/password" }}'

                                                                   # ]]]
# .. envvar:: discourse_database_password [[[
#
# Database password for Discourse.
discourse_database_password: "{{ lookup('password', discourse_database_password_path
                              + ' length=48 chars=ascii_letters,digits,.:-_') }}"

                                                                   # ]]]
# .. envvar:: discourse_postgresql_database_connection [[[
#
# Connection type for PostgreSQL database (choices: socket, port)
discourse_database_connection: 'socket'
                                                                   # ]]]
                                                                   # ]]]
# Discourse backup options [[[
# -------------------------

# .. envvar:: discourse_backup_frequency [[[
#
# Backup frequency (daily, weekly, monthly)
discourse_backup_frequency: 'daily'

                                                                   # ]]]
# .. envvar:: discourse_backup_keep_time [[[
#
# How long to store backups for, in seconds. Default: 7 days.
discourse_backup_keep_time: '{{ (60 * 60 * 24 * 7) }}'
                                                                   # ]]]
                                                                   # ]]]
# Redis configuration [[[
# -----------------------

# .. envvar:: discourse_redis_host [[[
#
# Define hostname of redis server to use.
discourse_redis_host: '{{ ansible_local.redis_server.host
                       if (ansible_local|d() and ansible_local.redis_server|d() and
                           ansible_local.redis_server.host|d())
                       else "localhost" }}'

                                                                   # ]]]
# .. envvar:: discourse_redis_port [[[
#
# Define port of redis server to use.
discourse_redis_port: '{{ ansible_local.redis_server.port
                       if (ansible_local|d() and ansible_local.redis_server|d() and
                           ansible_local.redis_server.port|d())
                       else "6379" }}'

                                                                   # ]]]
# .. envvar:: discourse_redis_password [[[
#
# Define the Redis authentication password to use
discourse_redis_password: '{{ ansible_local.redis_server.password
                           if (ansible_local|d() and ansible_local.redis_server|d() and
                               ansible_local.redis_server.password|d())
                           else "" }}'

                                                                   # ]]]
# .. envvar:: discourse_redis_database [[[
#
# Specify which Redis database to use for Discourse
discourse_redis_database: '0'
                                                                   # ]]]
                                                                   # ]]]
# Discourse directory layout [[[
# ---------------------------

# .. envvar:: discourse_home [[[
#
# Home directory of the discourse user
discourse_home: '{{ (ansible_local.root.home
                  if (ansible_local|d() and ansible_local.root|d() and
                      ansible_local.root.home|d())
                  else "/var/local") + "/" + discourse_user }}'

                                                                   # ]]]
# .. envvar:: discourse_app_root_path [[[
#
# Directory where the instance of the application gets installed.
discourse_app_root_path: '{{ (ansible_local.root.app
                           if (ansible_local|d() and ansible_local.root|d() and
                               ansible_local.root.app|d())
                           else "/var/local") + "/" + discourse_user + "/" + discourse__instance_name }}'

                                                                   # ]]]
# .. envvar:: discourse_backup_path [[[
#
# The path where backups are stored for this instance.
discourse_backup_path: '{{ (ansible_local.root.backup
                         if (ansible_local|d() and ansible_local.root|d() and
                             ansible_local.root.backup|d())
                         else "/var/backups") + "/discourse/{{discourse__instance_name}}" }}'

                                                                   # ]]]
# .. envvar:: discourse_src_path [[[
#
# Discourse sources root path. The source is unpacked resp. cloned
# here from the remote location.
discourse_src_path: '{{ (ansible_local.root.src
                      if (ansible_local|d() and ansible_local.root|d() and
                          ansible_local.root.src|d())
                      else "/usr/local/src") + "/discourse" }}'

                                                                   # ]]]
                                                                   # ]]]
# System user, group, additional groups [[[
# -----------------------------------------

# .. envvar:: discourse_user [[[
#
# System UNIX account used by the Discourse application. It will be visible in the
# :command:`git+ssh` remote URLs.
discourse_user: '{{discourse__instance_name}}'

                                                                   # ]]]
# .. envvar:: discourse_group [[[
#
# System UNIX group used by the Discourse application.
discourse_group: '{{discourse__instance_name}}'

                                                                   # ]]]
# .. envvar:: discourse_user_append_groups [[[
#
# List of additional system groups to add to the Discourse user account.
# The ``sshusers`` UNIX group is used in DebOps to limit SSH access. See the
# :ref:`debops.system_groups` role for more details.
discourse_user_append_groups: []

                                                                   # ]]]
# .. envvar:: discourse__shell [[[
#
# The default shell used by the Discourse UNIX account.
discourse__shell: '/bin/bash'
                                                                   # ]]]
                                                                   # ]]]
# Internal application options [[[
# --------------------------------

# .. envvar:: discourse_unicorn_workers [[[
#
# Number of Unicorn workers to start.
# If you only have 1GB RAM, use 2 workers. Otherwise increase to 3 or 4.
discourse_unicorn_workers: 2

                                                                   # ]]]
# .. envvar:: discourse_unicorn_connection [[[
#
# Connection type for unicorn (choices: socket, port)
discourse_unicorn_connection: 'socket'
                                                                   # ]]]
# .. envvar:: discourse_unicorn_port [[[
#
# Unicorn port on ``localhost`` interface. Unused if
# :var:`discourse_unicorn_connection` is set to ``socket``.
discourse_unicorn_port: '18082'

                                                                   # ]]]
                                                                   # ]]]
# Compatibility workarounds [[[
# -----------------------------

# .. envvar:: discourse_support_filesystem_acl [[[
#
# Enable or disable ACL configuration for the webserver
discourse_support_filesystem_acl: True
                                                                   # ]]]
                                                                   # ]]]
# Discourse source code [[[
# -------------------------

# .. envvar:: discourse_git_repo [[[
#
# URL of the Discourse repository.
discourse_git_repo: 'https://github.com/discourse/discourse.git'

                                                                   # ]]]
# .. envvar:: discourse_git_dest [[[
#
# Path where the Discourse source code will be cloned into a bare repository.
discourse_git_dest: '{{ discourse_src_path + "/" + discourse_git_repo.split("://")[1] }}'

                                                                   # ]]]
# .. envvar:: discourse_git_checkout [[[
#
# Path where the Discourse source code will be checked out.
discourse_git_checkout: '{{ discourse_app_root_path + "/" + discourse__instance_name }}'
                                                                   # ]]]
                                                                   # ]]]
# Build and deployment commands [[[
# Different versions of Discourse might require different command parameters to
# build and deploy the service. The variables below define the commands
# according to the selected version or feature.

# .. envvar:: discourse_bundle_install_without [[[
#
# YAML dictionary which maps Bundler parameters to the selected database
# backend.
discourse_bundle_install_without: 'development test aws mysql'
                                                                   # ]]]
                                                                   # ]]]
# APT packages [[[
# ----------------

# .. envvar:: discourse__base_packages [[[
#
# List of base APT packages required by Discourse.
discourse__base_packages: [
  'gawk', 'curl', # used by some helper ruby scripts
  'jhead', 'jpegoptim', 'libjpeg-turbo-progs', 'optipng',
  'gifsicle', 'pngcrush', 'pngquant',
  'imagemagick-6.q16', 'libmagickcore-6.q16-6-extra',
  'npm', # for installing nodes packages
  'brotli',
  ]


                                                                   # ]]]
# .. envvar:: discourse__nodejs_packages [[[
#
# List of base node packages required by Discourse to be installed
# globally using npm (since no matching APT package is available).
# TODO: Depend on Discourse release
discourse__nodejs_packages:
  'uglify-js': '<3'
  'svgo': ''

                                                                   # ]]]
# .. envvar:: discourse__release_packages [[[
#
# List of base APT packages required by Discourse depending on the distribution release.
discourse__release_packages:
  buster:  [ 'zlib1g-dev' ] # for building uby-nokogiri


                                                                   # ]]]
# .. envvar:: discourse__database_packages [[[
#
# YAML dictionary which contains list of APT packages required by a particular
# database server.
discourse__database_packages:
  buster:
    postgresql: [ 'libpq-dev', 'ruby-pg' ]
                                                                   # ]]]
                                                                   # ]]]

# Configuration for other Ansible roles [[[
# -----------------------------------------

# .. envvar:: discourse__etc_services__dependent_list [[[
#
# List of custom :file:`/etc/services` to configure for the :ref:`debops.etc_services`
# Ansible role.
discourse__etc_services__dependent_list:

  - name: 'discourse-{{discourse__instance_name}}'
    port: '{{ discourse_unicorn_port }}'
    comment: 'Discourse instance {{discourse__instance_name}}'
                                                                   # ]]]
# .. envvar:: discourse__apt_preferences__dependent_list [[[
#
# Configuration for the :ref:`debops.apt_preferences` role.
discourse__apt_preferences__dependent_list:

  - package: 'git git-*'
    backports: [ 'jessie' ]
    reason:  'Meet version requirement of Discourse 8.17 (Git version >= 2.7.3) on Debian Jessie.'
    by_role: 'debops.discourse'

                                                                   # ]]]
# .. envvar:: discourse__logrotate__dependent_config [[[
#
# Configuration for the :ref:`debops.logrotate` Ansible role.
# TODO: Verify this is the correct way to rotate the logs
discourse__logrotate__dependent_config:

  - filename: 'discourse-{{discourse__instance_name}}'
    sections:

      # FIXME …/log/*.log …/log/rails/*.log
      - log: '{{ discourse_home }}/{{discourse__instance_name}}/log/*.log'
        comment: |
          Discourse logrotate settings
          based on discourse/config/logrotate.conf
        options: |
          daily
          dateext
          rotate 32
          create
          compress
          delaycompress
          missingok
          notifempty
          sharedscripts
        postrotate:
          systemd reload discourse
          # FIXME: what is the best way to to this?
          #/bin/systemctl kill --kill-who=main --signal=SIGUSR1 discourse || :
        state: 'present'

                                                                   # ]]]
# .. envvar:: discourse__postgresql__dependent_roles [[[
#
# Configuration of PostgreSQL roles for :ref:`debops.postgresql` Ansible role.
discourse__postgresql__dependent_roles:

  # Owner of the ``{{discourse__instance_name}}_production`` database
  - name: '{{ discourse_database_name }}'
    flags: [ 'NOLOGIN' ]
    ## FIXME: priv: "ALL" required?

  # Discourse user account role
  - name: '{{ discourse_database_user }}'
    password: '{{ discourse_database_password }}'

                                                                   # ]]]
# .. envvar:: discourse__postgresql__dependent_databases [[[
#
# Configuration of PostgreSQL databases for the :ref:`debops.postgresql` Ansible
# role.
discourse__postgresql__dependent_databases:

  - name:  '{{ discourse_database_name }}'
    owner: '{{ discourse_database_name }}'

                                                                   # ]]]
# .. envvar:: discourse__postgresql__dependent_groups [[[
#
# Configuration of PostgreSQL groups for the :ref:`debops.postgresql` Ansible role.
discourse__postgresql__dependent_groups:

  - roles:  [ '{{ discourse_database_user }}' ]
    groups: [ '{{ discourse_database_name }}' ]
    database: '{{ discourse_database_name }}'

                                                                   # ]]]
# .. envvar:: discourse__postgresql__dependent_extensions [[[
#
# Configuration of PostgreSQL extensions for the :ref:`debops.postgresql` Ansible
# role.
discourse__postgresql__dependent_extensions:

  - database: '{{ discourse_database_name }}'
    extension: 'pg_trgm'
  - database: '{{ discourse_database_name }}'
    extension: 'hstore'

                                                                   # ]]]
# .. envvar:: discourse__postgresql__dependent_pgpass [[[
#
# The ``~/.pgpass`` configuration for :ref:`debops.postgresql` Ansible role.
discourse__postgresql__dependent_pgpass:

  - owner: '{{ discourse_user }}'
    home: '{{ discourse_home }}'
    database: '{{ discourse_database_name }}'
    role: '{{ discourse_database_user }}'

                                                                   # ]]]
# .. envvar:: discourse__nginx_upstream_name [[[
#
# Name of the first :command:`nginx` upstream.
discourse__nginx_upstream_name: 'discourse-{{discourse__instance_name}}'
                                                                   # ]]]
# .. envvar:: discourse__nginx__dependent_upstreams [[[
#
# List of :command:`nginx` upstreams for the :ref:`debops.nginx`
# Ansible role.
discourse__nginx__dependent_upstreams:

  - name: '{{ discourse__nginx_upstream_name }}'
    server: '{{ "unix:" + discourse_git_checkout + "/tmp/sockets/discourse.socket"
             if discourse_unicorn_connection == "socket"
             else "127.0.0.1:" + discourse_unicorn_port }}'

                                                                   # ]]]
# .. envvar:: discourse__nginx__dependent_servers [[[
#
# List of :command:`nginx` servers for the :ref:`debops.nginx` Ansible role.
discourse__nginx__dependent_servers:

  - '{{ discourse__nginx_server }}'

                                                                   # ]]]
# .. envvar:: discourse__nginx__dependent_maps [[[
#
#
discourse__nginx__dependent_maps:

  - name: thescheme
    # Attempt to preserve the proto
    # TODO: Is this useful for debops roles?
    map: $http_x_forwarded_proto $thescheme
    mapping: |
      default $scheme;
      https https;
                                                                   # ]]]

discourse__nginx_http_extra_options: >-
  proxy_cache_path /var/lib/nginx/cache
  keys_zone={{ discourse__nginx_upstream_name }}:10m max_size=200m;


# .. envvar:: discourse__nginx_server [[[
#
# Configuration of the Discourse :command:`nginx` proxy for the
# :ref:`debops.nginx` Ansible role. This is based on
# :file:`config/nginx.sample.conf` from the Discourse source.
discourse__nginx_server:
  by_role: 'debops.discourse'
  enabled: True
  type: 'rails'
  name: '{{ discourse__fqdn }}'
  root: '{{ discourse_git_checkout }}/public'
  maintenance: True

  keepalive: 65

  #deny_hidden: False

  access_policy: '{{ discourse_nginx_access_policy }}'
  auth_basic_realm: '{{ discourse_nginx_auth_realm }}'

  error_pages:
    '404': '/404.html'
    '422': '/422.html'
    '500': '/500.html'
    '503': '/503.html'

  options: |
    types {
        text/csv csv;
    }

    client_max_body_size {{ discourse_nginx_client_max_body_size }};

    #access_log /var/log/nginx/access.log log_discourse;

    #gzip_min_length 1000;
    # Additional gzip_types from config/nginx.sample.conf
    # TODO: Use a set to ensure all are included, even after changes
    # to debops.
    gzip_types
       {{ nginx_http_options | regex_search("(?<=gzip_types\s)[^;]*", multiline=True) }}
       text/javascript application/x-javascript ;

    server_tokens off;

    # without weak etags we get zero benefit from etags on dynamically
    # compressed content further more etags are based on the file in
    # nginx not sha of data use dates, it solves the problem fine even
    # cross server
    etag off;

    # Som variables to be used in the snippet (to make the snippet
    # agnostic to the instance)
    # path to discourse's public directory
    set $public {{ discourse_git_checkout }}/public;
    set $upstream {{ discourse__nginx_upstream_name }};
    set $proxy_cache_key_zone {{ discourse__nginx_upstream_name }};

    include snippets/discourse-locations.conf;

  location_list:
    # bypass rails stack with a cheap 204 for favicon.ico requests
    # same for robots.txt
    - pattern: "/robots.txt"
      options: |
        try_files /robots.txt =204;
        access_log off;
        log_not_found off;

# ]]]
                                                                   # ]]]
                                                                   # ]]]

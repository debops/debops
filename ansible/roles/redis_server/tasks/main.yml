---
# Copyright (C) 2018 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2018 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  ansible.builtin.import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  ansible.builtin.import_role:
    name: 'secret'

- name: Install Redis Server packages
  ansible.builtin.package:
    name: '{{ q("flattened", (redis_server__base_packages
                              + redis_server__packages)) }}'
    state: 'present'
  register: redis_server__register_packages
  until: redis_server__register_packages is succeeded

- name: Ensure that standalone Redis Server is stopped on install
  ansible.builtin.systemd:
    name: 'redis-server.service'
    state: 'stopped'
  when: ((ansible_local is undefined or
          ansible_local.redis_server is undefined) and
         ansible_service_mgr == 'systemd')

- name: Make sure Ansible fact directory exists
  ansible.builtin.file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Setup Redis local facts
  ansible.builtin.template:
    src: 'etc/ansible/facts.d/redis_server.fact.j2'
    dest: '/etc/ansible/facts.d/redis_server.fact'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Reload facts if they were modified
  ansible.builtin.meta: 'flush_handlers'

- name: Install custom Redis scripts
  ansible.builtin.copy:
    src: 'usr/local/bin/'
    dest: '/usr/local/bin/'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Create Redis auth UNIX group
  ansible.builtin.group:
    name: '{{ redis_server__auth_group }}'
    state: 'present'
    system: True

- name: Create Redis instance directories
  ansible.builtin.file:
    path: '/etc/redis/{{ item.name }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: item.name | d() and item.state | d('present') not in ['absent', 'init', 'ignore']
  no_log: '{{ debops__no_log | d(True) }}'

- name: Install the original Redis config file to instance
  ansible.builtin.command: 'install -o {{ redis_server__user }} -g {{ redis_server__auth_group }} -m 0640
            /etc/redis/redis.conf /etc/redis/{{ item.name }}/redis.conf'
  args:
    creates: '/etc/redis/{{ item.name }}/redis.conf'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: item.name | d() and item.state | d('present') not in ['absent', 'init', 'ignore']
  no_log: '{{ debops__no_log | d(True) }}'

- name: Generate dynamic Redis configuration scripts
  ansible.builtin.template:
    src: 'etc/redis/instance/ansible-redis-dynamic.conf.j2'
    dest: '/etc/redis/{{ item.name }}/ansible-redis-dynamic.conf'
    owner: 'root'
    group: '{{ redis_server__group }}'
    mode: '0750'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: item.name | d() and item.state | d('present') not in ['absent', 'init', 'ignore']
  register: redis_server__register_config_dynamic
  notify: [ 'Refresh host facts' ]
  no_log: '{{ debops__no_log | d(True) }}'

- name: Generate static Redis configuration files
  ansible.builtin.template:
    src: 'etc/redis/instance/ansible-redis-static.conf.j2'
    dest: '/etc/redis/{{ item.name }}/ansible-redis-static.conf'
    owner: 'root'
    group: '{{ redis_server__group }}'
    mode: '0640'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: item.name | d() and item.state | d('present') not in ['absent', 'init', 'ignore']
  register: redis_server__register_config_static
  notify: [ 'Refresh host facts' ]
  no_log: '{{ debops__no_log | d(True) }}'

- name: Remove include line from redis.conf
  ansible.builtin.lineinfile:  # noqa no-handler
    dest: '/etc/redis/{{ item.item.name }}/redis.conf'
    regexp: '^include\s+/etc/redis/{{ item.item.name }}/ansible-redis-static.conf'
    state: 'absent'
  with_items: '{{ redis_server__register_config_static.results }}'
  when: item is changed
  no_log: '{{ debops__no_log | d(True) }}'

- name: Add include line into redis.conf
  ansible.builtin.lineinfile:  # noqa no-handler
    dest: '/etc/redis/{{ item.item.name }}/redis.conf'
    regexp: '^include\s+/etc/redis/{{ item.item.name }}/ansible-redis-static.conf'
    line: 'include /etc/redis/{{ item.item.name }}/ansible-redis-static.conf'
    insertafter: 'EOF'
    state: 'present'
    mode: '0640'
  with_items: '{{ redis_server__register_config_static.results }}'
  when: not ansible_check_mode | bool and item is changed
  no_log: '{{ debops__no_log | d(True) }}'

- name: Install custom systemd unit files
  ansible.builtin.template:
    src: '{{ item }}.j2'
    dest: '/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items:
    - 'etc/systemd/system/redis-server@.service'
    - 'etc/systemd/system/redis-server.service'
  notify: [ 'Reload service manager' ]

- name: Create systemd override directories for instances
  ansible.builtin.file:
    path: '/etc/systemd/system/redis-server@{{ item.name }}.service.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: item.name | d() and item.state | d('present') not in ['absent', 'init', 'ignore'] and
        item.systemd_override | d()
  no_log: '{{ debops__no_log | d(True) }}'

- name: Generate systemd instance override files
  ansible.builtin.template:
    src: 'etc/systemd/system/redis-server@.service.d/ansible-override.conf.j2'
    dest: '/etc/systemd/system/redis-server@{{ item.name }}.service.d/ansible-override.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: item.name | d() and item.state | d('present') not in ['absent', 'init', 'ignore'] and
        item.systemd_override | d()
  notify: [ 'Reload service manager' ]
  no_log: '{{ debops__no_log | d(True) }}'

- name: Stop Redis instances if requested
  ansible.builtin.systemd:
    name: 'redis-server@{{ item.name }}.service'
    state: 'stopped'
    enabled: False
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: ansible_service_mgr == 'systemd' and item.name | d() and
        item.state | d('present') == 'absent'
  no_log: '{{ debops__no_log | d(True) }}'

- name: Remove Redis instance systemd override if requested
  ansible.builtin.file:
    path: '/etc/systemd/system/redis-server@{{ item.name }}.service.d'
    state: 'absent'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  notify: [ 'Reload service manager' ]
  when: ansible_service_mgr == 'systemd' and item.name | d() and
        item.state | d('present') == 'absent'
  no_log: '{{ debops__no_log | d(True) }}'

- name: Remove Redis instance configuration if requested
  ansible.builtin.file:
    path: '/etc/redis/{{ item.name }}'
    state: 'absent'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: ansible_service_mgr == 'systemd' and item.name | d() and
        item.state | d('present') == 'absent'
  no_log: '{{ debops__no_log | d(True) }}'

- name: Reload systemd configuration when needed
  ansible.builtin.meta: 'flush_handlers'

- name: Ensure that Redis instances are started
  ansible.builtin.systemd:
    name: 'redis-server@{{ item.name }}.service'
    state: 'started'
    enabled: True
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: ansible_service_mgr == 'systemd' and item.name | d() and
        item.state | d('present') not in ['absent', 'init', 'ignore']
  no_log: '{{ debops__no_log | d(True) }}'

- name: Restart Redis instances if their configuration changed
  ansible.builtin.systemd:  # noqa no-handler
    name: 'redis-server@{{ item.item.name }}.service'
    state: 'restarted'
  with_items: '{{ redis_server__register_config_static.results }}'
  when: item is changed
  no_log: '{{ debops__no_log | d(True) }}'

- name: Apply dynamic configuration to Redis instances
  ansible.builtin.command: '/etc/redis/{{ item.item.name }}/ansible-redis-dynamic.conf config'  # noqa no-handler
  with_items: '{{ redis_server__register_config_dynamic.results }}'
  when: item is changed
  no_log: '{{ debops__no_log | d(True) }}'

- name: Set Redis Server slave status on first install
  community.general.redis:
    command: 'slave'
    master_host: '{{ item.master_host }}'
    master_port: '{{ item.master_port }}'
    login_port: '{{ item.port }}'
    login_password: '{{ item.requirepass | d(omit) }}'
  with_items: '{{ redis_server__combined_configuration | debops.debops.parse_kv_items }}'
  when: ((ansible_local is undefined or
          (ansible_local.redis_server is undefined or
           (ansible_local.redis_server.instances is undefined or
            (item.name not in
             (ansible_local.redis_server.instances
              | selectattr('name', 'defined') | list
              | map(attribute='name') | list))))) and
         item.state | d('present') not in ['absent', 'ignore', 'init'] and
         item.master_host | d() and item.master_port | d())
  no_log: '{{ debops__no_log | d(True) }}'

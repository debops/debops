---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# Copyright (C) 2015-2017 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2016-2017 Robin Schneider <ypid@riseup.net>
# Copyright (C) 2015-2017 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  import_role:
    name: 'secret'

# Package installation [[[1
- name: Install required packages
  package:
    name: '{{ q("flattened", (tinc__base_packages
                              + tinc__packages)) }}'
    state: 'present'
  register: tinc__register_install
  until: tinc__register_install is succeeded

# Create user [[[1
- name: Create system group for VPN service
  group:
    name: '{{ tinc__group }}'
    state: 'present'
    system: True

- name: Create system user for VPN service
  user:
    name: '{{ tinc__user }}'
    state: 'present'
    system: True
    comment: 'tinc VPN service'
    home: '{{ tinc__home }}'
    group: '{{ tinc__group }}'
    shell: '/bin/false'
    createhome: False

# Kernel modules [[[1
- name: Load the required kernel modules
  modprobe:
    name: '{{ item }}'
    state: 'present'
  with_items: '{{ tinc__modprobe_modules }}'
  when: (tinc__modprobe|bool and
         (((ansible_system_capabilities_enforced|d())|bool and
          "cap_sys_admin" in ansible_system_capabilities) or
         not (ansible_system_capabilities_enforced|d(True))|bool))

- name: Make sure that required modules are loaded on boot
  lineinfile:
    dest: '/etc/modules'
    regexp: '^{{ item }}$'
    line: '{{ item }}'
    state: 'present'
    mode: '0644'
  with_items: '{{ tinc__modprobe_modules }}'
  when: (tinc__modprobe|bool and
         (((ansible_system_capabilities_enforced|d())|bool and
          "cap_sys_admin" in ansible_system_capabilities) or
         not (ansible_system_capabilities_enforced|d(True))|bool))

# Tinc configuration [[[1
- name: Set tincd default environment
  template:
    src: 'etc/default/tinc.j2'
    dest: '/etc/default/tinc'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  notify: [ 'Reload tinc' ]

- name: Disable tinc networks in systemd if requested
  service:  # noqa no-handler
    name: 'tinc@{{ item.value.name | d(item.key) }}'
    enabled: False
    state: '{{ (item.state|d("present") in ["absent"]) | ternary("started", "stopped") }}'
  with_dict: '{{ tinc__combined_networks }}'
  when: tinc__systemd|bool and item.value.state|d('present') == 'absent' and
        not tinc__register_install is changed

- name: Remove tinc network configuration if requested
  file:
    path: '/etc/tinc/{{ item.value.name | d(item.key) }}'
    state: 'absent'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') == 'absent'

- name: Create required directories
  file:
    path: '/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.hostname | d(tinc__hostname))
                                                                  | replace("-","_") }}.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'

- name: Generate main configuration file
  template:
    src: 'etc/tinc/network/tinc.conf.j2'
    dest: '/etc/tinc/{{ item.value.name | d(item.key) }}/tinc.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent' and item.value.tinc_options|d()
  notify: [ 'Reload tinc' ]

- name: Remove deprecated dhclient hook script
  file:
    dest: '/etc/dhcp/dhclient-enter-hooks.d/00debops-tinc'
    state: 'absent'

- name: Generate tinc-up network scripts
  template:
    src: 'etc/tinc/network/tinc-up.j2'
    dest: '/etc/tinc/{{ item.value.name | d(item.key) }}/tinc-up'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0750'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  with_dict: '{{ tinc__combined_networks }}'
  when: (item.value.state|d('present') != 'absent' and item.value.generate_tinc_up|d(True)|bool)

- name: Generate tinc-down network scripts
  template:
    src: 'etc/tinc/network/tinc-down.j2'
    dest: '/etc/tinc/{{ item.value.name |d(item.key) }}/tinc-down'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0750'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  with_dict: '{{ tinc__combined_networks }}'
  when: (item.value.state|d('present') != 'absent' and item.value.generate_tinc_up|d(True)|bool)

- name: Configure which networks are started at boot
  template:
    src: 'etc/tinc/nets.boot.j2'
    dest: '/etc/tinc/nets.boot'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'

# RSA key management [[[1

- name: Ensure that sensitive files are excluded from version control
  template:
    src: 'etc/tinc/gitignore.j2'
    dest: '/etc/tinc/.gitignore'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'

- name: Initialize RSA key pairs
  shell: set -o nounset -o pipefail -o errexit &&
         sh -c 'yes || true' | tincd -n {{ item.value.name | d(item.key) }}
                                     -K {{ item.value.rsa_key_length | d(tinc__rsa_key_length) }}
  args:
    executable: 'bash'
    creates: '/etc/tinc/{{ item.value.name | d(item.key) }}/rsa_key.priv'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'

- name: Create persistent copy of host public key
  command: cp /etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname))
                                                                     | replace("-","_") }}
              /etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname))
                                                                     | replace("-","_") + ".d/99_rsa-public-key" }}
  args:
    creates: /etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname))
                                                                    | replace("-","_") + ".d/99_rsa-public-key" }}
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'

# Tinc host configuration [[[1
- name: Generate host configuration file
  template:
    src: 'etc/tinc/network/hosts/host-config.j2'
    dest: '/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname))
                                                                  | replace("-","_") }}.d/00_host-config'
    owner: 'root'
    group: 'root'
    mode: '0640'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'

- name: Assemble host configuration file from parts
  assemble:
    src: '/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname))
                                                                 | replace("-","_") }}.d'
    dest: '/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname))
                                                                  | replace("-","_") }}'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'
  notify: [ 'Reload tinc' ]

# Tinc host configuration distribution [[[1
- name: Upload public keys from hosts to Ansible Controller
  fetch:
    src: '/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/{{ (item.value.hostname | d(tinc__hostname))
                                                                 | replace("-","_") }}'
    dest: '{{ secret + "/tinc/networks/" + item.value.name | d(item.key)
              + "/by-network/" + item.value.name | d(item.key) + "/hosts/"
              + (item.value.hostname | d(tinc__hostname) | replace("-","_")) }}'
    flat: True
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'

- name: Download public keys per network
  copy:
    src: '{{ secret + "/tinc/networks/" + item.value.name | d(item.key)
             + "/by-network/" + item.value.name | d(item.key) + "/hosts/" }}'
    dest: '/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'
  notify: [ 'Reload tinc' ]

- name: Download public keys for all hosts
  copy:
    src: '{{ secret + "/tinc/networks/" + item.value.name | d(item.key) + "/by-group/all/hosts/" }}'
    dest: '/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'
  notify: [ 'Reload tinc' ]

- name: Download public keys per group
  copy:
    src: '{{ secret + "/tinc/networks/" + item.0.name + "/by-group/" + item.1 + "/hosts/" }}'
    dest: '/etc/tinc/{{ item.0.name }}/hosts/'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_nested:
    - '{{ lookup("template", "lookup/tinc__network_list.j2", convert_data=False) | from_yaml }}'
    - '{{ lookup("template", "lookup/tinc__inventory_groups.j2", convert_data=False) | from_yaml }}'
  when: (item.0.name|d() and item.0.state|d('present') != 'absent' and
         item.1 in item.0.inventory_groups|d([]) and item.1 in group_names)
  notify: [ 'Reload tinc' ]

- name: Download public keys per host
  copy:
    src: '{{ secret + "/tinc/networks/" + item.value.name | d(item.key)
             + "/by-host/" + ((item.value.inventory_hostname | d(tinc__inventory_hostname))) + "/hosts/" }}'
    dest: '/etc/tinc/{{ item.value.name | d(item.key) }}/hosts/'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_dict: '{{ tinc__combined_networks }}'
  when: item.value.state|d('present') != 'absent'
  notify: [ 'Reload tinc' ]

# systemd configuration [[[1
- name: Configure systemd default variables
  template:
    src: 'etc/default/tinc-network.j2'
    dest: '/etc/default/tinc-{{ item.value.name | d(item.key) }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  with_dict: '{{ tinc__combined_networks }}'
  when: tinc__systemd|bool and item.value.state|d('present') != 'absent'
  notify: [ 'Reload tinc' ]

- name: Configure tinc-down wrapper script
  template:
    src: 'usr/local/lib/tinc-down-wrapper.j2'
    dest: '/usr/local/lib/tinc-down-wrapper'
    owner: 'root'
    group: 'root'
    mode: '0755'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  when: tinc__systemd | bool

- name: Clean up old systemd configuration
  file:
    path: '/etc/systemd/system/network.target.wants/tinc.service'
    state: 'absent'

- name: Configure systemd unit files
  template:
    src: 'etc/systemd/system/{{ item }}.j2'
    dest: '/etc/systemd/system/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  with_items: [ 'tinc.service', 'tinc@.service' ]
  register: tinc__register_systemd
  when: tinc__systemd | bool

- name: Reload systemd daemon configuration
  systemd:  # noqa no-handler
    daemon_reload: True
    name: 'tinc.service'
    enabled: True
  when: tinc__register_systemd is changed

- name: Start tinc VPN networks on first install
  service:  # noqa no-handler
    name: 'tinc'
    state: 'restarted'
  when: not tinc__systemd|bool and tinc__register_install is changed

- name: Configure tinc network services in systemd
  service:
    name: 'tinc@{{ item.value.name | d(item.key) }}'
    enabled: '{{ (item.value.boot|d(True))|bool }}'
    state: '{{ (item.value.state|d("present") in ["absent"]) | ternary("stopped", "started") }}'
  with_dict: '{{ tinc__combined_networks }}'
  when: tinc__systemd|bool and item.value.state|d('present') != 'absent' and
        item.value.port|d()

# Ansible facts [[[1

- name: Make sure Ansible fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Create local facts of tinc
  template:
    src: 'etc/ansible/facts.d/tinc.fact.j2'
    dest: '/etc/ansible/facts.d/tinc.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
    unsafe_writes: '{{ True if (core__unsafe_writes|d(ansible_local.core.unsafe_writes|d()) | bool) else omit }}'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Reload facts if they were modified
  meta: 'flush_handlers'

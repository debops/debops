---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# .. _owncloud__ref_defaults:

# Default variables
# =================

# .. include:: ../../../../includes/global.rst
# .. include:: ../includes/role.rst

# .. contents:: Sections
#    :local:
#
# .. Role maintainer note:
# .. The official ownCloud documentation is also written is RST.
# .. https://github.com/owncloud/documentation/tree/master/admin_manual
# .. https://github.com/nextcloud/documentation/tree/master/admin_manual

# .. Packages and installation [[[1
#
# -----------------------------
#   Packages and installation
# -----------------------------

# .. envvar:: owncloud__base_packages
#
# List of base packages required by ownCloud.
owncloud__base_packages:
  - '{{ [ "owncloud-files" ]
        if (owncloud__variant == "owncloud")
        else [] }}'
  - '{{ [ "curl", "unzip" ]
        if (owncloud__variant == "nextcloud")
        else [] }}'

  # There are no Debian packages for Nextcloud yet unfortunately.

  ## https://doc.owncloud.org/server/9.0/admin_manual/installation/source_installation.html
  ## https://doc.owncloud.org/server/9.0/admin_manual/configuration_files/collaborative_documents_configuration.html
  ## FIXME: Is it necessary to install all LibreOffice packages? https://github.com/owncloud/documents#known-issues
  ## Upstream documentation does not specify it more clearly. Installing ``libreoffice`` just to be sure.
  - '{{ [ "libreoffice" ] if (owncloud__app_documents_libreoffice_enabled|bool) else [] }}'

  ## Useful for debugging. Refer to `owncloud__base_php_packages` for the PHP packages
  - '{{ [ "smbclient" ] if (owncloud__smb_support|bool) else [] }}'
  - '{{ [ "libsmbclient" ] if (owncloud__smb_support|bool and owncloud__release is version_compare("9.0", ">=")) else [] }}'


# .. envvar:: owncloud__required_php_packages
#
# List of PHP packages required by Nextcloud.
# Refer to the `official Nextcloud documentation <https://docs.nextcloud.com/server/stable/admin_manual/installation/source_installation.html#prerequisites-for-manual-installation>`__ for details.
owncloud__required_php_packages:
  # Included in base install:
  # - 'ctype'

  # - 'dom'
  # - 'iconv'

  - 'gd'
  - 'json'

  - 'xml'
  # Included in the `xml` Debian package:
  # - 'SimpleXML'
  # - 'XMLWriter'

  # - 'posix'
  # - 'zlib'


# .. envvar:: owncloud__recommended_php_packages
#
# List of PHP packages recommended by Nextcloud.
# Refer to the `official Nextcloud documentation <https://docs.nextcloud.com/server/stable/admin_manual/installation/source_installation.html#prerequisites-for-manual-installation>`__ for details.
owncloud__recommended_php_packages:
  - 'curl'
  - 'bz2'
  - 'mcrypt'

  # Recommended/Optional: SFTP storage
  - 'gmp'


# .. envvar:: owncloud__base_php_packages
#
# List of base PHP packages required by ownCloud.
owncloud__base_php_packages:
  - '{{ owncloud__required_php_packages
        if (owncloud__variant == "nextcloud")
        else [] }}'

  - 'mbstring'
  - 'zip'

  ## Required for the "OpenOTP Two Factor Authentication" (twofactor_rcdevsopenotp) as of NC 14.
  - 'ldap'
  - 'soap'

  - '{{ [ "apcu" ] if (owncloud__apcu_enabled|bool) else [] }}'
  - '{{ [ "mysql" ] if (owncloud__database in [ "mariadb", "mysql" ]) else [] }}'
  - '{{ [ "pgsql" ] if (owncloud__database in [ "postgresql" ]) else [] }}'
  - '{{ [ "redis" ] if (owncloud__redis_enabled | bool) else [] }}'

  ## Seems to be required at least for PHP7.0 to fix:
  ## PHP Warning: PHP Startup: Unable to load dynamic library '/usr/lib/php/20151012/redis.so'
  ## - /usr/lib/php/20151012/redis.so: undefined symbol: igbinary_serialize in Unknown on line 0
  - '{{ [ "igbinary" ]
        if (not (ansible_distribution == "Ubuntu" and (ansible_distribution_version is version_compare("15.10", "<"))))
        else [] }}'

  - '{{ [ "libsmbclient" ] if (owncloud__smb_support|bool and owncloud__release is version_compare("8.9.9", "<=")) else [] }}'

  ## Included in normal PHP installations but require it here because it is
  ## used internally by the role:
  - 'json'


# .. envvar:: owncloud__optional_php_packages
#
# List of recommended/optional PHP packages for ownCloud.
owncloud__optional_php_packages:
  - '{{ owncloud__recommended_php_packages
        if (owncloud__variant == "nextcloud")
        else [] }}'
  - 'intl'
  - 'imagick'


# .. envvar:: owncloud__packages
#
# List of global packages for ownCloud.
# This variable is intended to be used in Ansibleâ€™s global inventory.
owncloud__packages: []


# .. envvar:: owncloud__group_packages
#
# List of group packages for ownCloud.
# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported).
owncloud__group_packages: []


# .. envvar:: owncloud__host_packages
#
# List of host packages for ownCloud.
# This variable is intended to be used in the inventory of hosts.
owncloud__host_packages: []


# .. envvar:: owncloud__dependent_packages
#
# List of APT packages to install for other Ansible roles, for usage as
# a dependent role.
owncloud__dependent_packages: []


# .. envvar:: owncloud__deploy_state
#
# What is the desired state which this role should achieve? Possible options:
#
# ``present``
#   Default. Ensure that ownCloud is installed and configured as requested.
#
# ``absent``
#   Ensure that owncloud is uninstalled and it's configuration is removed.
#   Not fully supported yet.
#   FIXME: This would remove all packages that are installed by the role!
#   Package lists need to be split.
#
owncloud__deploy_state: 'present'


# .. Nextcloud user account [[[
#
# --------------------------
#   Nextcloud user account
# --------------------------

# .. envvar:: owncloud__system_user [[[
#
# Name of the system account which will perform archive
# verification using the OpenPGP signature.
owncloud__system_user: 'nextcloud'

                                                                   # ]]]
# .. envvar:: owncloud__system_group [[[
#
# Name of the primary system group of the Nextcloud account.
owncloud__system_group: 'nextcloud'

                                                                   # ]]]
# .. envvar:: owncloud__system_home [[[
#
# Path to the home directory of the Nextcloud account.
owncloud__system_home: '{{ (ansible_local.root.home
                             if (ansible_local|d() and ansible_local.root|d() and
                                 ansible_local.root.home|d())
                             else "/var/local") + "/" + owncloud__system_user }}'

                                                                   # ]]]
# .. envvar:: owncloud__comment [[[
#
# The GECOS string set for the Nextcloud account.
owncloud__comment: 'Nextcloud Application Manager'

                                                                   # ]]]
# .. envvar:: owncloud__shell [[[
#
# The default shell of the Nextcloud account.
owncloud__shell: '/usr/sbin/nologin'
                                                                   # ]]]
                                                                   # ]]]
# .. Base directory paths [[[
#
# ------------------------
#   Base directory paths
# ------------------------

# .. envvar:: owncloud__src [[[
#
# Base path to the directory with application archives, their hash
# signatures and OpenPGP signatures.
owncloud__src: '{{ (ansible_local.root.src
                     if (ansible_local|d() and ansible_local.root|d() and
                         ansible_local.root.src|d())
                     else "/usr/local/src") + "/" + owncloud__system_user }}'

                                                                   # ]]]
                                                                   # ]]]
# .. Nextcloud installation [[[
#
# --------------------------
#   Nextcloud installation
# --------------------------

# .. envvar:: owncloud__upstream_key_fingerprint [[[
#
# The OpenPGP key fingerprint for the key by which the upstream release
# tarballs are signed.
owncloud__upstream_key_fingerprint: '2880 6A87 8AE4 23A2 8372 792E D758 99B9 A724 937A'
                                                                   # ]]]
# .. envvar:: owncloud__keyserver [[[
#
# URL of the OpenPGP keyserver used to obtain OpenPGP keys.
owncloud__keyserver: '{{ ansible_local.core.keyserver
                          if (ansible_local|d() and ansible_local.core|d() and
                              ansible_local.core.keyserver|d())
                          else "hkp://pool.sks-keyservers.net" }}'
                                                                   # ]]]
                                                                   # ]]]
# .. ownCloud upgrades [[[1
#
# ---------------------
#   ownCloud upgrades
# ---------------------

# .. envvar:: owncloud__auto_database_upgrade_enabled
#
# On each update of ownCloud, a database update must be performed before
# ownCloud can be used again.
# The ownCloud package maintainers have not automated this setup so that even
# security upgrades can not be installed unattended.
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/maintenance/package_upgrade.html#upgrade-quickstart>`__ for details.
#
# When this option is set to ``True``, the role enables a hook script for
# :command:`dpkg` so that when :command:`dpkg` upgrades ownCloud, the database upgrade is
# automatically performed.
#
# Change to ``False`` when you want to do database upgrades manually after upgrading the ownCloud packages.
#
# .. note:: :envvar:`owncloud__auto_database_upgrade_enabled` depends on
#    automatic database upgrades to be enabled.
#
owncloud__auto_database_upgrade_enabled: '{{ True if (owncloud__variant == "owncloud") else False }}'


# .. envvar:: owncloud__dpkg_hook_script
#
# File path where the package manager hook script is stored.
owncloud__dpkg_hook_script: '{{
  (ansible_local.root.lib
  if (ansible_local|d() and ansible_local.root|d() and
      ansible_local.root.lib|d())
  else "/usr/local/lib") + "/owncloud_dpkg_hook" }}'


# .. envvar:: owncloud__auto_database_upgrade_migration_test
#
# Whether database schema migration should be simulated before upgrading the production database.
# For Nextcloud it cannot be configured and this variable is ignored.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/maintenance/upgrade.html#migration-test>`__ for details.
owncloud__auto_database_upgrade_migration_test: True


# .. envvar:: owncloud__auto_database_upgrade_3party_app_disable
#
# Should third party apps by disabled during/after upgrades? The upstream default as of ownCloud 9.0
# is ``True``. For Nextcloud it cannot be configured and this variable is ignored.
owncloud__auto_database_upgrade_3party_app_disable: True


# .. envvar:: owncloud__auto_database_upgrade_hook_script_packages_trigger
#
# List of packages for which the package manager hook script should attempt to
# do a database upgrade when :envvar:`owncloud__auto_database_upgrade_enabled`
# is ``True``.
#
# This variable is currently not being used.
# The check if ownCloud needs an upgrade is performed for each
# installed/upgraded package but in an very efficient way.
owncloud__auto_database_upgrade_hook_script_packages_trigger:
  - 'owncloud'


# .. envvar:: owncloud__auto_security_updates_enabled
#
# Whether automatic ownCloud upgrades should be performed by
# ``unattended_upgrades``.
#
# FIXME: Needs more testing before the role maintainers feel confident to enable this by default.
# Refer to: https://github.com/debops/ansible-owncloud/issues/28
owncloud__auto_security_updates_enabled: False


# .. envvar:: owncloud__post_upgrade_hook_role_list
#
# List of script file paths which should be executed after every ownCloud
# update.
# For more information refer to :ref:`owncloud__ref_post_upgrade_hook`.
# This variable is used internally, controlled by other variables of this role.
owncloud__post_upgrade_hook_role_list: []


# .. envvar:: owncloud__post_upgrade_hook_list
#
# List of script file paths which should be executed after every ownCloud
# update.
# For more information refer to :ref:`owncloud__ref_post_upgrade_hook`.
# This variable is intended to be used in Ansibleâ€™s global inventory.
owncloud__post_upgrade_hook_list: []


# .. envvar:: owncloud__post_upgrade_hook_group_list
#
# List of script file paths which should be executed after every ownCloud
# update.
# For more information refer to :ref:`owncloud__ref_post_upgrade_hook`.
# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported).
owncloud__post_upgrade_hook_group_list: []


# .. envvar:: owncloud__post_upgrade_hook_host_list
#
# List of script file paths which should be executed after every ownCloud
# update.
# For more information refer to :ref:`owncloud__ref_post_upgrade_hook`.
# This variable is intended to be used in the inventory of hosts.
owncloud__post_upgrade_hook_host_list: []


# .. ownCloud source and deployment [[[1
#
# ----------------------------------
#   ownCloud source and deployment
# ----------------------------------

# .. envvar:: owncloud__variant
#
# Which variant of the application should be used?
#
# Supported variants:
#
# * ``owncloud`` (legacy variant, not recommended for new deployments, not well tested)
# * ``nextcloud`` (Main supported variant in the future. Currently supported on Debian stretch, refer to `issue 45 <https://github.com/debops/ansible-owncloud/issues/45>`_ for details)
#
owncloud__variant: '{{ ansible_local.owncloud.variant
                       if (ansible_local|d() and ansible_local.owncloud|d() and
                           ansible_local.owncloud.variant|d())
                       else "nextcloud" }}'


# .. envvar:: owncloud__variant_download_url_map
#
# URL map for :envvar:`owncloud__variant`.
# Used to download the software.
owncloud__variant_download_url_map:
  nextcloud: 'https://download.nextcloud.com/server/releases'


# .. envvar:: owncloud__variant_url_map
#
# Homepage URL map for :envvar:`owncloud__variant`.
# Used when referring to the software.
owncloud__variant_url_map:
  owncloud: 'https://owncloud.org/'
  nextcloud: 'https://nextcloud.com/'


# .. envvar:: owncloud__variant_name_map
#
# Name map for :envvar:`owncloud__variant`.
# Used when referring to the software.
owncloud__variant_name_map:
  owncloud: 'ownCloud'
  nextcloud: 'Nextcloud'


# .. envvar:: owncloud__release
#
# Defaults to the latest stable release supported and tested with this role.
# This may not always be the latest stable release.
#
# Supported releases:
#
# * ownCloud ``10.0``
#
# * Nextcloud ``15.0``
# * Nextcloud ``16.0``
#
# For Nextcloud refer to the `Nextcloud Maintenance and Release Schedule <https://github.com/nextcloud/server/wiki/Maintenance-and-Release-Schedule>`_.
# and the `Nextcloud Server Changelog <https://nextcloud.com/changelog/>`_.
#
# For ownCloud refer to the `ownCloud Maintenance and Release Schedule <https://github.com/owncloud/core/wiki/Maintenance-and-Release-Schedule>`_
# and the `package index <https://download.owncloud.org/download/repositories/>`_ for more details.
owncloud__release: '{{ "10.0"
                       if (owncloud__variant == "owncloud")
                       else "15.0" }}'


# .. envvar:: owncloud__distribution
#
# Name and version of OS distribution to use for ownCloud packages.
owncloud__distribution: '{{ owncloud__distribution_name + "_" +
                            owncloud__distribution_version }}'


# .. envvar:: owncloud__distribution_name
#
# Name of the OS distribution to use for ownCloud URLs.
owncloud__distribution_name: '{{ ansible_distribution }}'


# .. envvar:: owncloud__distribution_version
#
# Version number of the OS distribution for ownCloud URLs.
owncloud__distribution_version: '{{ (ansible_distribution_major_version + ".0")
                                    if ansible_distribution in [ "Debian" ]
                                    else ansible_distribution_version }}'


# .. envvar:: owncloud__apt_repo_base
#
# Base APT repository URL starting at the authority part.
owncloud__apt_repo_base: 'download.owncloud.org/download/repositories/{{ owncloud__release }}'


# .. envvar:: owncloud__apt_repo_key_id
#
# OpenPGP public key specified by fingerprint which is used to sign the APT
# repository.
owncloud__apt_repo_key_id: 'DDA2C105C4B73A6649AD2BBD47AE7F72479BC94B'


# .. envvar:: owncloud__old_apt_repo_keys
#
# Old or unused OpenPGP public keys specified by fingerprint which where
# previously used to sign the APT repository.
# The keys listed here are ensured to be absent to reduce the risk if one of
# the keys gets compromised.
owncloud__old_apt_repo_keys:
  - 'F9EA4996747310AE79474F44977C43A8BA684223'
  - 'BCECA90325B072AB1245F739AB7C32C35180350A'


# .. envvar:: owncloud__src_remote_dir
#
# File path used to store application sources on the remote system.
# This is currently only used to copy the OpenPGP public key to the remote.
owncloud__src_remote_dir: '{{
  (ansible_local.root.src
  if (ansible_local|d() and ansible_local.root|d() and
      ansible_local.root.src|d())
  else "/usr/local/src") + "/owncloud" }}'


# .. envvar:: owncloud__apt_repo_source
#
# APT ``sources.list`` URL of the ownCloud ``.deb`` repository.
owncloud__apt_repo_source: '{{ "deb http://" + owncloud__apt_repo_base + "/" +
                               owncloud__distribution + "/ /" }}'


# .. envvar:: owncloud__app_user
#
# User that will be used for the ownCloud instance.
owncloud__app_user: '{{ ansible_local.nginx.user
                        if (ansible_local|d() and ansible_local.nginx|d() and
                            ansible_local.nginx.user|d())
                        else "www-data" }}'


# .. envvar:: owncloud__app_group
#
# Group that will be used for the ownCloud instance.
owncloud__app_group: '{{ owncloud__app_user }}'


# .. envvar:: owncloud__app_home
#
# Directory under which ownCloud will be installed.
owncloud__app_home: '{{ "/var/www/owncloud"
                        if (owncloud__variant == "owncloud")
                        else (
                          (ansible_local.nginx.www
                          if (ansible_local|d() and ansible_local.nginx|d()
                              and ansible_local.nginx.www|d())
                          else "/srv/www") + "/" + owncloud__system_user
                        ) }}'


# .. envvar:: owncloud__data_path
#
# Path where ownCloud data directory and files are stored.
owncloud__data_path: '{{ owncloud__app_home }}/data'


# .. envvar:: owncloud__temp_path
#
# Directory which ownCloud will use as temp directory.
#
# In case :file:`/tmp` has limited space (for example is a ramdisk) or is otherwise
# restricted then it is a good idea to change the temp directory that ownCloud
# uses to a path with more space available.
#
# The default (empty string) is to let ownCloud figure out which temp directory
# it should use which probably results in :file:`/tmp/owncloudtemp` unless
# otherwise influenced by environment variables and such.

# See also :envvar:`owncloud__php_temp_path`.
owncloud__temp_path: ''


# .. envvar:: owncloud__deploy_path
#
# Where the ownCloud instance will be deployed (web root).
owncloud__deploy_path: '{{ owncloud__app_home }}'

# .. envvar:: owncloud__deploy_path_mode
#
# Octal permissions for ownCloud web root.
owncloud__deploy_path_mode: '0750'

# .. In memory caching [[[1
#
# ---------------------
#   In memory caching
# ---------------------
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/caching_configuration.html>`__ for details.

# .. envvar:: owncloud__apcu_enabled
#
# Whether ``APCu`` should be used for local caching.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/caching_configuration.html#id2>`__ for details.
owncloud__apcu_enabled: True


# .. envvar:: owncloud__redis_enabled
#
# Use Redis for file locking as recommended for small and large installations.
# The default is to auto detect if Redis is enabled on the remote server and in
# that case automatically use it for file locking.
# Note that ownCloud requires version 2.2.5+ of the ``redis`` PHP package. This
# requirement is not meet for Ubuntu trusty (neither in the release repos nor
# in backports) thus Redis will not be enabled automatically by the role.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/caching_configuration.html#id4>`__ for details.
owncloud__redis_enabled: '{{ ansible_local|d() and ansible_local.redis_server|d() and
                             ansible_local.redis_server.installed|d() | bool and
                             (not (ansible_distribution == "Ubuntu" and ansible_distribution_release == "trusty")) }}'


# .. envvar:: owncloud__redis_host
#
# Redis server to use when :envvar:`owncloud__redis_enabled` is ``True``.
owncloud__redis_host: '{{ ansible_local.redis_server.host
                          if (ansible_local|d() and ansible_local.redis_server|d() and
                              ansible_local.redis_server.host|d())
                          else "localhost" }}'


# .. envvar:: owncloud__redis_port
#
# Network port on which the Redis server is listening on.
owncloud__redis_port: '{{ ansible_local.redis_server.port
                          if (ansible_local|d() and ansible_local.redis_server|d() and
                              ansible_local.redis_server.port|d())
                          else "6379" }}'


# .. envvar:: owncloud__redis_password
#
# Redis server authentication password.
owncloud__redis_password: '{{ ansible_local.redis_server.password
                              if (ansible_local|d() and ansible_local.redis_server|d() and
                                  ansible_local.redis_server.password|d())
                              else omit }}'

# .. Database configuration [[[1
#
# --------------------------
#   Database configuration
# --------------------------

# .. envvar:: owncloud__database
#
# ownCloud recommends MySQL or MariaDB as database management system.
# Set to ``False`` to use SQLite.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_database/linux_database_configuration.html>`__ for details.
# See the :envvar:`owncloud__database_map` for the databases support by this role.
owncloud__database: 'mariadb'


# .. envvar:: owncloud__database_server
#
# FQDN of the database server. It will be configured by
# the :ref:`debops.mariadb` or :ref:`debops.postgresql` role.
owncloud__database_server: '{{ ansible_local[owncloud__database].server }}'


# .. envvar:: owncloud__database_port
#
# Port database is listening on.
owncloud__database_port: '{{ ansible_local[owncloud__database].port }}'


# .. envvar:: owncloud__database_user
#
# Database user to use for ownCloud.
owncloud__database_user: '{{ owncloud__variant }}'


# .. envvar:: owncloud__database_name
#
# Name of the database to use for ownCloud.
owncloud__database_name: '{{ owncloud__variant }}'


# .. envvar:: owncloud__database_password_path
#
# Path to database password file.
owncloud__database_password_path: '{{ secret + "/" + owncloud__database + "/"
                                      + ansible_local[owncloud__database].delegate_to
                                      + (("/" + ansible_local[owncloud__database].port)
                                         if (owncloud__database == "postgresql")
                                         else "")
                                      + "/credentials/" + owncloud__database_user + "/password" }}'


# .. envvar:: owncloud__database_password
#
# Database password for ownCloud.
owncloud__database_password: '{{ lookup("password", owncloud__database_password_path + " length=48") }}'


# .. envvar:: owncloud__database_map
#
owncloud__database_map:

  # MySQL/MariaDB database.
  mariadb:
    dbtype: 'mysql'
    dbname: '{{ owncloud__database_name|d(owncloud__app_user) }}'
    dbuser: '{{ owncloud__database_user|d(owncloud__app_user) }}'
    dbpass: '{{ owncloud__database_password }}'
    dbhost: '{{ owncloud__database_server|d("localhost") }}'
    dbtableprefix: ''

  # PostgreSQL database on localhost, connection through Unix socket, no default password.
  postgresql:
    dbtype: 'pgsql'
    dbname: '{{ owncloud__database_name|d(owncloud__app_user) }}'
    dbuser: '{{ owncloud__database_user|d(owncloud__app_user) }}'
    dbpass: ''
    dbhost: '{{ owncloud__database_server|d("/var/run/postgresql") }}'
    dbtableprefix: ''

  sqlite:
    dbtype: 'sqlite'


# .. ownCloud admin login/password [[[1
#
# ---------------------------------
#   ownCloud admin login/password
# ---------------------------------

# .. envvar:: owncloud__admin_username
#
# Default admin username, in the form 'admin-$USER'.
# Set to ``False`` to disable automatic username and password.
owncloud__admin_username: 'admin-{{ lookup("env","USER") }}'


# .. envvar:: owncloud__admin_password_path
#
# Path to database password file.
owncloud__admin_password_path: '{{ secret + "/credentials/" + ansible_fqdn +
                                  "/owncloud/admin/" + owncloud__admin_username +
                                  "/password" }}'


# .. envvar:: owncloud__password_length
#
# Length of randomly generated admin password.
owncloud__password_length: 20


# .. envvar:: owncloud__admin_password
#
# Default admin password.
# A random password will be generate by default as documented by the :ref:`debops.secret` role.
owncloud__admin_password: '{{ lookup("password", owncloud__admin_password_path
                              + " length=" + (owncloud__password_length|string)) }}'


# .. envvar:: owncloud__autosetup
#
# Should Ansible automatically finish the ownCloud setup on
# it's own? If this feature is disabled, some of the installation tasks will
# have to be performed manually by the ownCloud/Nextcloud administrator.
owncloud__autosetup: True


# .. envvar:: owncloud__autosetup_url
#
# URL which will be called to finish autosetup of ownCloud 8.0. For newer
# ownCloud versions :command:`occ` will be used which is more reliable because
# it does not depend on the webserver nor network.
owncloud__autosetup_url: 'http://{{ owncloud__fqdn if owncloud__fqdn is string else owncloud__fqdn[0] }}/index.php'


# .. ownCloud configuration [[[1
#
# --------------------------
#   ownCloud configuration
# --------------------------

# .. envvar:: owncloud__fqdn
#
# The Fully Qualified Domain Name to use for the ownCloud instance.
owncloud__fqdn: 'cloud.{{ owncloud__domain }}'


# .. envvar:: owncloud__domain
#
# Domain that will be configured for the ownCloud instance.
owncloud__domain: '{{ ansible_local.core.domain
                      if (ansible_local|d() and ansible_local.core|d() and
                          ansible_local.core.domain|d())
                      else ansible_domain }}'


# .. envvar:: owncloud__upload_size
#
# Max upload size set in :program:`nginx` and PHP, with amount as M or G.
# Before you change this be sure to understand
# `Uploading big files > 512MB of the official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_files/big_file_upload_configuration.html>`__.
owncloud__upload_size: '2G'


# .. envvar:: owncloud__cron_minute
#
# At what time cron should execute background jobs
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/developer_manual/app/backgroundjobs.html>`__ for details.
owncloud__cron_minute: '*/15'


# .. envvar:: owncloud__timeout
#
# Timeouts in seconds for application requests.
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_files/big_file_upload_configuration.html>`__ for details.
owncloud__timeout: 3600


# .. envvar:: owncloud__app_user_webfinger_support
#
# Should the ``Webfinger`` application be supported?
# Set this to ``True`` if you are planning to use this app.
owncloud__app_user_webfinger_support: False


# .. ownCloud config.php configuration [[[1
#
# -------------------------------------
#   ownCloud config.php configuration
# -------------------------------------
#
# The dicts of this section ends up in :file:`owncloud/config/debops.config.php` and override the values
# from :file:`owncloud/config/config.php`.
#
# TODO: Note that as of ownCloud 9.0, you can not unset a setting which was
# once set in :file:`debops.config.php` because ownCloud might copies it to
# :file:`config.php`. Possible fix: `occ config:system:set`
#
# For more information refer to :ref:`owncloud__ref_config`.


# .. envvar:: owncloud__role_config
#
# See `ownCloud config.php configuration`_.
# This variable is used internally, controlled by other variables of this role.
owncloud__role_config:

  trusted_domains: '{{ [ owncloud__fqdn ] if owncloud__fqdn is string else owncloud__fqdn }}'

  ## https://github.com/owncloud/core/issues/22257
  ## TODO: Temporary workaround until all package maintainers have caught up.
  ## Edit: Have caught up as of 9.0.2-1.1. Remove this config in a while when
  ## it is expected that all users are running 9.0.2 or later.
  'updatechecker': '{{ True if (owncloud__variant in ["nextcloud"]) else False }}'

  'memcache.local':
    state: '{{ "present" if (owncloud__apcu_enabled|bool or owncloud__redis_enabled|bool) else "absent" }}'
    value: '{{ "\\OC\\Memcache\\Redis" if (owncloud__redis_enabled|bool) else "\\OC\\Memcache\\APCu" }}'

  'memcache.locking':
    state: '{{ "present" if (owncloud__redis_enabled|bool) else "absent" }}'
    value: '\\OC\\Memcache\\Redis'

  'redis':
    state: '{{ "present" if (owncloud__redis_enabled|bool) else "absent" }}'
    value:
      host: '{{ owncloud__redis_host }}'
      port: '{{ owncloud__redis_port|int }}'
      password: '{{ owncloud__redis_password }}'

  'tempdirectory':
    state: '{{ "present" if (owncloud__temp_path != "") else "absent" }}'
    value: '{{ owncloud__temp_path }}'


# .. envvar:: owncloud__role_recommended_config
#
# See `ownCloud config.php configuration`_.
# This variable is a set of optional settings for ownCloud recommended by the
# maintainers of this role.
# Set:
#
# .. code-block:: yaml
#    :linenos:
#
#    owncloud__role_recommended_config: {}
#
# in your inventory when you want to disable it.
owncloud__role_recommended_config:

  ## The default timezone for logfiles is UTC.
  logtimezone: '{{ ansible_local.timezone if (ansible_local|d() and ansible_local.timezone|d()) else "Etc/UTC" }}'

  ## Loglevel to start logging at. Valid values are: 0 = Debug, 1 = Info,
  ##  2 = Warning, 3 = Error, and 4 = Fatal. The default value is Warning.
  loglevel: 2

  ## ISO 8601 datetime: 2004-02-12T15:19:21+00:00
  logdateformat: 'Y-m-d H:i:s.u'

  ## Default is "stable" as of Nextcloud 11.
  ## "production" is the most conservative channel which is preferred by the role maintainers.
  ## https://owncloud.org/release-channels/
  'updater.release.channel': 'production'


# .. envvar:: owncloud__config
#
# See `ownCloud config.php configuration`_.
# This variable is intended to be used in Ansibleâ€™s global inventory.
# More specific variables can overrule less specific variables.
owncloud__config: {}


# .. envvar:: owncloud__group_config
#
# See `ownCloud config.php configuration`_.
# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported).
owncloud__group_config: {}


# .. envvar:: owncloud__host_config
#
# See `ownCloud config.php configuration`_.
# This variable is intended to be used in the inventory of hosts.
owncloud__host_config: {}


# .. envvar:: owncloud__combined_config
#
# See `ownCloud config.php configuration`_.
# Variable which combines all of the other Owncloud configuration
# and is used in the configuration template.
owncloud__combined_config: '{{ owncloud__role_config
                               | combine(owncloud__role_recommended_config,
                                         owncloud__config,
                                         owncloud__group_config,
                                         owncloud__host_config) }}'


# .. ownCloud applications configuration [[[1
#
# ---------------------------------------
#   ownCloud applications configuration
# ---------------------------------------

# Dictionary of ownCloud application settings.
# Check the output of :command:`occ config:list` to see how the settings are called.
# You might need to change a particular setting via the web interface in order
# for it to appear in the output.
#
# Note that :command:`occ` can also change ownCloud system settings but this should
# be done via `ownCloud config.php configuration`_.
#
# Examples:
#
# .. code-block:: yaml
#    :linenos:
#
#    owncloud__apps_config:
#
#      ## Set the default quota for all users which donâ€™t have more explicit
#      ## quota settings to 100 MB.
#      files:
#        default_quota: '100 MB'
#
#      ## Disable Federated Cloud Sharing:
#      ## * Allow users on this server to send shares to other servers
#      ## * Allow users on this server to receive shares from other servers
#      core:
#        incoming_server2server_share_enabled: 'no'
#        outgoing_server2server_share_enabled: 'no'
#      files_sharing:
#        incoming_server2server_share_enabled: 'no'
#        outgoing_server2server_share_enabled: 'no'
#
#      ## Disable Federation:
#      ## * Add server automatically once a federated share was created successfully
#      federation:
#        autoAddServers: '0'
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/occ_command.html#config-commands-label>`__ for details.

# .. envvar:: owncloud__optional_apps_config
#
# See `ownCloud applications configuration`_.
# Role dictionary of ownCloud application settings.
# This variable is a set of optional settings for ownCloud recommended by the
# maintainers of this role.
owncloud__role_apps_config:
  documents:
    enabled: '{{ "yes" if (owncloud__app_documents_enabled | bool) else "no" }}'
    converter: 'local'

  password_policy:
    ## Default is 6 as of Nextcloud 11 which is not state of the art.
    ## Default is 8 as of Nextcloud 12+.
    ## https://github.com/nextcloud/password_policy/blob/master/lib/PasswordPolicyConfig.php
    minLength: 8


# .. envvar:: owncloud__apps_config
#
# See `ownCloud applications configuration`_.
# Global dictionary of ownCloud application settings.
# This variable is intended to be used in Ansibleâ€™s global inventory.
# More specific variables can overrule less specific variables.
owncloud__apps_config: {}


# .. envvar:: owncloud__group_apps_config
#
# See `ownCloud applications configuration`_.
# Group dictionary of ownCloud application settings.
# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported).
owncloud__group_apps_config: {}


# .. envvar:: owncloud__host_apps_config
#
# See `ownCloud applications configuration`_.
# Host dictionary of ownCloud application settings.
# This variable is intended to be used in the inventory of hosts.
owncloud__host_apps_config: {}


# .. envvar:: owncloud__dependent_apps_config
#
# See `ownCloud applications configuration`_.
# This variable is intended to be used from other Ansible roles, for usage as
# a dependent role.
owncloud__dependent_apps_config: {}


# .. envvar:: owncloud__apps_config_combined
#
# See `ownCloud applications configuration`_.
# Variable which combines all of the apps variables
# and is used in the configuration template.
owncloud__apps_config_combined: '{{ owncloud__dependent_apps_config
                                    | combine(owncloud__role_apps_config,
                                              owncloud__apps_config,
                                              owncloud__group_apps_config,
                                              owncloud__host_apps_config) }}'


# .. envvar:: owncloud__app_documents_enabled
#
# Whether the `ownCloud documents application`_ should be enabled.
# Not enabled by default because, as of ownCloud 9.0, the application is not shipped by default.
# Note that this will install LibreOffice plus dependencies on the server.
owncloud__app_documents_enabled: False


# .. envvar:: owncloud__app_documents_libreoffice_enabled
#
# Should LibreOffice be installed on the server so that the documents app can
# work with proprietary document formats such as Microsoft Office?
owncloud__app_documents_libreoffice_enabled: False


# .. External storage [[[1
#
# --------------------
#   External storage
# --------------------

# Refer to the :ref:`owncloud__ref_external_storage` section for more details.

# .. envvar:: owncloud__smb_support
#
# Should SMB/CIFS be support by installing the required system packages and
# enabling the required ownCloud application?
owncloud__smb_support: False


# .. ownCloud raw occ commands [[[1
#
# -----------------------------
#   ownCloud raw occ commands
# -----------------------------

# List of :command:`occ` commands to run.
# It can be used to enable apps, add users and more which can be useful when
# deploying ownCloud.
#
# Examples:
#
# .. code-block:: yaml
#    :linenos:
#
#    owncloud__occ_cmd_list:
#
#      - command: 'app:enable external'
#
#      - command: 'app:install calendar'
#        when: '{{ owncloud__variant in ["nextcloud"] and owncloud__release is version_compare("13.0", ">=") }}'
#      - command: 'app:enable calendar'
#
#      ## Create an additional admin account.
#      - command: 'user:add --password-from-env --display-name="Administrator" --group="admin" admin'
#        env:
#          OC_PASS: "{{ lookup('password', secret + '/credentials/' +
#                       ansible_fqdn + '/owncloud/admin/' + 'admin' +
#                       '/password length=' + owncloud__password_length) }}"
#
#      ## Create an regular user. Note that you probably want to use an existing
#      ## user database like LDAP.
#      - command: 'user:add --password-from-env --display-name="Normal user" user'
#        when: '{{ owncloud__release is version_compare("8.1", ">=") }}'
#        env:
#          OC_PASS: "{{ lookup('password', secret + '/credentials/' +
#                       ansible_fqdn + '/owncloud/users/' + 'user' +
#                       '/password length=' + owncloud__password_length) }}"
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/occ_command.html>`__ for details.

# .. envvar:: owncloud__role_occ_cmd_list
#
# Default list of :command:`occ` commands to run.
# Command present of role to automate certain tasks.
# See `ownCloud raw occ commands`_.
owncloud__role_occ_cmd_list:
  ## Disable the updater because it does not work anyway with the way ownCloud
  ## is setup by this role using packages.
  ## Since ownCloud 9 it is called `updatenotification`.
  - command: 'app:disable updater'
    when: '{{ owncloud__release is version_compare("8.2", "<=") }}'

  - command: 'app:enable user_ldap'
    when: '{{ owncloud__ldap_enabled|bool }}'

  - command: 'app:enable files_external'
    when: '{{ owncloud__smb_support|bool }}'


# .. envvar:: owncloud__occ_cmd_list
#
# See `ownCloud raw occ commands`_.
# This variable is intended to be used in Ansibleâ€™s global inventory.
owncloud__occ_cmd_list: []


# .. envvar:: owncloud__group_occ_cmd_list
#
# See `ownCloud raw occ commands`_.
# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported).
owncloud__group_occ_cmd_list: []


# .. envvar:: owncloud__host_occ_cmd_list
#
# See `ownCloud raw occ commands`_.
# This variable is intended to be used in the inventory of hosts.
owncloud__host_occ_cmd_list: []


# .. envvar:: owncloud__dependent_occ_cmd_list
#
# See `ownCloud raw occ commands`_.
# This variable is intended to be used from other Ansible roles, for usage as
# a dependent role.
owncloud__dependent_occ_cmd_list: []


# .. envvar:: owncloud__occ_bin_file_path
#
# Where the :command:`occ` wrapper script should be installed.
owncloud__occ_bin_file_path: '{{ (ansible_local.root.bin
                                  if (ansible_local|d() and ansible_local.root|d() and
                                      ansible_local.root.bin|d())
                                  else "/usr/local/bin") + "/occ" }}'


# .. ownCloud user files [[[1
#
# -----------------------
#   ownCloud user files
# -----------------------

# These lists allow you to manage files for ownCloud users, either by
# copying files from the Ansible Controller or providing the contents directly
# in Ansible inventory. You can use all parameters supported by the `Ansible
# copy module`_.
#
# See :ref:`owncloud__ref_owncloud__user_files` for more details.

# .. envvar:: owncloud__user_files
#
# Manage ownCloud user files on all hosts in Ansibleâ€™s inventory.
owncloud__user_files: []


# .. envvar:: owncloud__user_files_group
#
# Manage ownCloud user files on hosts in a specific Ansible inventory
# group.
owncloud__user_files_group: []


# .. envvar:: owncloud__user_files_host
#
# Manage ownCloud user files on specific hosts in Ansibleâ€™s inventory.
owncloud__user_files_host: []


# .. LDAP authentication [[[1
#
# .. _owncloud__ref_ldap_defaults:
#
# -----------------------
#   LDAP authentication
# -----------------------
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/go.php?to=admin-ldap>`__
# and to the :ref:`owncloud__ref_external_users` section for more details.

# .. envvar:: owncloud__ldap_enabled
#
# Enable LDAP support. ownCloud support multiple LDAP servers but this role
# configures only default one. If you need something more complex you can
# use :envvar:`owncloud__occ_cmd_list`.
owncloud__ldap_enabled: '{{ True
                            if (ansible_local|d() and ansible_local.ldap|d() and
                                (ansible_local.ldap.enabled|d())|bool)
                            else False }}'


# .. envvar:: owncloud_ldap_update_settings
#
# Ensure that the settings listed in :envvar:`owncloud__ldap_combined_config`
# are up-to-date on the remote system.
# Set to ``False`` to only configure LDAP settings in ownCloud when ownCloud
# currently has no LDAP configuration.
owncloud_ldap_update_settings: True


# .. envvar:: owncloud__ldap_base_dn [[[
#
# The base Distinguished Name which should be used to create Distinguished
# Names of the LDAP directory objects, defined as a YAML list. If this variable
# is empty, automated Nextcloud LDAP configuration will not be performed.
owncloud__ldap_base_dn: '{{ ansible_local.ldap.base_dn
                            if (ansible_local|d() and ansible_local.ldap|d() and
                                ansible_local.ldap.base_dn|d())
                            else [] }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_device_dn [[[
#
# The Distinguished Name of the current host LDAP object, defined as a YAML
# list. It will be used as a base for the Nextcloud service account LDAP
# object. If the list is empty, the role will not create the account LDAP
# object automatically.
owncloud__ldap_device_dn: '{{ ansible_local.ldap.device_dn
                              if (ansible_local|d() and ansible_local.ldap|d() and
                                  ansible_local.ldap.device_dn|d())
                              else [] }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_self_rdn [[[
#
# The Relative Distinguished Name of the account LDAP object used by the
# Nextcloud service to access the LDAP directory.
owncloud__ldap_self_rdn: 'uid=nextcloud'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_self_object_classes [[[
#
# List of the LDAP object classes which will be used to create the LDAP object
# used by the Nextcloud service to access the LDAP directory.
owncloud__ldap_self_object_classes: [ 'account', 'simpleSecurityObject' ]

                                                                   # ]]]
# .. envvar:: owncloud__ldap_self_attributes [[[
#
# YAML dictionary that defines the attributes of the LDAP object used by the
# Nextcloud service to access the LDAP directory.
owncloud__ldap_self_attributes:
  uid: '{{ owncloud__ldap_self_rdn.split("=")[1] }}'
  userPassword: '{{ owncloud__ldap_bindpw }}'
  host: '{{ [ ansible_fqdn, ansible_hostname ] | unique }}'
  description: 'Account used by the "Nextcloud" service to access the LDAP directory'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_binddn [[[
#
# The Distinguished Name of the account LDAP object used by the
# Nextcloud service to bind to the LDAP directory.
owncloud__ldap_binddn: '{{ ([ owncloud__ldap_self_rdn ] + owncloud__ldap_device_dn) | join(",") }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_bindpw [[[
#
# The password stored in the account LDAP object used by the Nextcloud service
# to bind to the LDAP directory.
owncloud__ldap_bindpw: '{{ lookup("password", secret + "/ldap/credentials/"
                                  + owncloud__ldap_binddn | to_uuid + ".password length=32 "
                                  + "chars=alpha,digits,!@_#$%^&*") }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_uri [[[
#
# List of LDAP URIs that point to the directory servers which should be used by
# Nextcloud.
owncloud__ldap_uri: '{{ ansible_local.ldap.uri
                        if (ansible_local|d() and ansible_local.ldap|d() and
                            ansible_local.ldap.uri|d())
                        else [] }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_primary_server [[[
#
# The primary LDAP server URI to use.
owncloud__ldap_primary_server: '{{ owncloud__ldap_uri | first }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_method [[[
#
# The LDAP connection method to use, either ``tls`` (recommended), ``ssl`` or
# ``plain`` (discouraged).
owncloud__ldap_method: 'tls'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_port [[[
#
# The TCP port to use for LDAP connections.
owncloud__ldap_port: '{{ 636 if (owncloud__ldap_method in ["ssl"]) else 389 }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_user_display_name
#
# The attribute that should be used as display name in ownCloud.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#directory-settings>`__ for details.
owncloud__ldap_user_display_name: 'cn'


# .. envvar:: owncloud__ldap_user_filter
#
# Use this to control which LDAP users are listed as ownCloud users on your ownCloud server.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#user-filter>`__ for details.
owncloud__ldap_user_filter: '(|(objectclass=inetOrgPerson))'


# .. envvar:: owncloud__ldap_user_filter_objectclass
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#user-filter>`__ for details.
owncloud__ldap_user_filter_objectclass: 'inetOrgPerson'


# .. envvar:: owncloud__ldap_group_filter
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#group-filter>`__ for details.
owncloud__ldap_group_filter: '(&
                                (objectClass=groupOfNames)
                                (nextcloudEnabled=true)
                              )'


# .. envvar:: owncloud__ldap_group_filter_groups
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#group-filter>`__ for details.
owncloud__ldap_group_filter_groups: ''


# .. envvar:: owncloud__ldap_group_filter_objectclass
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#group-filter>`__ for details.
owncloud__ldap_group_filter_objectclass: 'posixGroup'


# .. envvar:: owncloud__ldap_login_filter
#
# The settings in the Login Filter tab determine which LDAP users can log in to
# your ownCloud system. With the default filter, users can log in using their
# usernames from the ``uid`` attribute, as well as their e-mail addresses
# defined using the ``mail`` attribute. In either case, users need to have
# access to the Nextcloud service defined by the ``authorizedService``
# attribute.
#
# The ``entryUUID`` attribute search is required to perform password modify
# extended operations.
owncloud__ldap_login_filter: '(&
                                (objectclass=inetOrgPerson)
                                (|
                                  (uid=%uid)
                                  (|
                                    (mail=%uid)
                                    (entryUUID=%uid)
                                  )
                                )
                                (|
                                  (authorizedService=nextcloud)
                                  (authorizedService=owncloud)
                                  (authorizedService=web-public)
                                  (authorizedService=*)
                                )
                              )'


# .. envvar:: owncloud__ldap_login_filter_attributes
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#login-filter>`__ for details.
owncloud__ldap_login_filter_attributes: ''


# .. envvar:: owncloud__ldap_group_assoc_attribute
#
# Attribute which ownCloud uses to match members of the group.
#
# Possible values:
#
# ``memberUid``
#   Useful for OpenLDAP with PosixGroups. Attribute contains only UID of the user.
#
# ``uniqueMember``
#   Attribute contains full DN of the user.
#
# ``member``
#   FIXME
#   Attribute contains full DN of the user.
#
owncloud__ldap_group_assoc_attribute: 'member'


# .. envvar:: owncloud__home_folder_naming_rule
#
# By default, the ownCloud server creates the user directory in your ownCloud data directory and gives it the ownCloud username, .e.g :file:`/var/www/owncloud/data/alice`. You may want to override this setting and name it after an LDAP attribute value. The attribute can also return an absolute path, e.â€¯g. :file:`/mnt/storage43/alice`. Leave it empty for default behavior.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#special-attributes>`__ for details.
owncloud__home_folder_naming_rule: 'attr:uid'

# .. Advanced settings [[[
#
# ~~~~~~~~~~~~~~~~~~~~~
#   Advanced settings
# ~~~~~~~~~~~~~~~~~~~~~

# .. envvar:: owncloud__ldap_cache_ttl
#
# A cache is introduced to avoid unnecessary LDAP traffic, for example caching usernames so they donâ€™t have to be looked up for every page, and speeding up loading of the Users page. Saving the configuration empties the cache. The time is given in seconds.
#
# Note that almost every PHP request requires a new connection to the LDAP server. If you require fresh PHP requests we recommend defining a minimum lifetime of 15s or so, rather than completely eliminating the cache.
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#caching>`__ for details.
owncloud__ldap_cache_ttl: '600'

# .. ]]]

# .. Expert settings [[[
#
# ~~~~~~~~~~~~~~~~~~~
#   Expert settings
# ~~~~~~~~~~~~~~~~~~~

# .. envvar:: owncloud__ldap_expert_username_attr
#
# The internal username is the identifier in ownCloud for LDAP users. By
# default it will be created from the UUID attribute. The UUID attribute
# ensures that the username is unique, and that characters do not need to be
# converted. Only these characters are allowed: :regexp:`[a-zA-Z0-9_.@-]`.
# Other characters are replaced with their ASCII equivalents, or are simply
# omitted.
#
# The LDAP backend ensures that there are no duplicate internal usernames in
# ownCloud, i.e. that it is checking all other activated user backends
# (including local ownCloud users). On collisions a random number (between 1000
# and 9999) will be attached to the retrieved value. For example, if ``alice``
# exists, the next username may be ``alice_1337``.
#
# The internal username is the default name for the user home folder in
# ownCloud. It is also a part of remote URLs, for instance for all DAV
# services.
#
# You can override all of this with the Internal Username setting. Leave it
# empty for default behaviour. Changes will affect only newly mapped LDAP
# users.
#
# For a Microsoft Windows environment, putting this:
#
# .. code-block:: yaml
#    :linenos:
#
#    owncloud__ldap_expert_username_attr: 'sAMAccountName'
#
# in your inventory might come in handy to use the user names from AD as user names in ownCloud.
owncloud__ldap_expert_username_attr: ''

# .. ]]]

# .. envvar:: owncloud__ldap_config_id
#
# The configuration database configID to use for the LDAP configuration managed
# by the role.
owncloud__ldap_config_id: '{{ ansible_local.owncloud.ldap_config_id
                              if (ansible_local|d() and ansible_local.owncloud|d() and
                                  ansible_local.owncloud.ldap_config_id|d())
                              else (owncloud__register_ldap_config_id.stdout
                                    if (owncloud__register_ldap_config_id|d() and
                                        owncloud__register_ldap_config_id.stdout|d())
                                    else "") }}'


# .. envvar:: owncloud__ldap_quota_attribute
#
# Set the LDAP attribute value to be read by Owncloud/Nextcloud in order to get the user quota.
# Any quota set in LDAP overrides quotas set on the Nextcloud user management page.
# Refer to the `official ownCloud documentation <https://docs.nextcloud.com/server/15/admin_manual/configuration_user/user_auth_ldap.html#special-attributes>`__ for details.
owncloud__ldap_quota_attribute: 'nextcloudQuota'

# .. envvar:: owncloud__ldap_quota_default
#
# User default LDAP quota. Use human-readable values, e.g. "2 GB".
# Refer to the `official ownCloud documentation <https://docs.nextcloud.com/server/15/admin_manual/configuration_user/user_auth_ldap.html#special-attributes>`__ for details.
owncloud__ldap_quota_default: '10 GB'

# .. envvar:: owncloud__ldap_default_config [[[
#
# The LDAP configuration options defined by default.
# See :ref:`owncloud__ref_ldap_config` for more details.
owncloud__ldap_default_config:

  - name: 'ldapHost'
    value: '{{ owncloud__ldap_primary_server }}'

  - name: 'ldapPort'
    value: '{{ owncloud__ldap_port }}'

  - name: 'ldapAgentName'
    value: '{{ owncloud__ldap_binddn }}'

  - name: 'ldapAgentPassword'
    value: '{{ owncloud__ldap_bindpw }}'

  - name: 'ldapBase'
    value: '{{ owncloud__ldap_base_dn | join(",") }}'

  - name: 'ldapEmailAttribute'
    value: 'mail'

  - name: 'ldapConfigurationActive'
    value: '1'

  - name: 'ldapUserDisplayName'
    value: '{{ owncloud__ldap_user_display_name }}'

  - name: 'ldapUserFilter'
    value: '{{ owncloud__ldap_user_filter }}'

  - name: 'ldapUserFilterObjectclass'
    value: '{{ owncloud__ldap_user_filter_objectclass }}'

  - name: 'ldapLoginFilter'
    value: '{{ owncloud__ldap_login_filter }}'

  - name: 'ldapLoginFilterAttributes'
    value: '{{ owncloud__ldap_login_filter_attributes }}'

  - name: 'ldapGroupFilter'
    value: '{{ owncloud__ldap_group_filter }}'

  - name: 'ldapGroupFilterGroups'
    value: '{{ owncloud__ldap_group_filter_groups }}'

  - name: 'ldapGroupFilterObjectclass'
    value: '{{ owncloud__ldap_group_filter_objectclass }}'

  - name: 'ldapGroupMemberAssocAttr'
    value: '{{ owncloud__ldap_group_assoc_attribute }}'

  - name: 'homeFolderNamingRule'
    value: '{{ owncloud__home_folder_naming_rule }}'

  - name: 'ldapCacheTTL'
    value: '{{ owncloud__ldap_cache_ttl }}'

  - name: 'ldapTLS'
    value: '{{ "1" if (owncloud__ldap_method == "tls") else "0" }}'

  - name: 'ldapQuotaAttribute'
    value: '{{ owncloud__ldap_quota_attribute }}'

  - name: 'ldapQuotaDefault'
    value: '{{ owncloud__ldap_quota_default }}'

  - name: 'hasMemberOfFilterSupport'
    value: '1'

  - name: 'turnOnPasswordChange'
    value: '1'

  - name: 'ldapDefaultPPolicyDN'
    value: '{{ ([ "cn=Default Password Policy", "ou=Password Policies" ]
                + owncloud__ldap_base_dn) | join(",") }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap_config [[[
#
# List of custom LDAP configuration options defined for all hosts
# in the Ansible inventory.
# See :ref:`owncloud__ref_ldap_config` for more details.
owncloud__ldap_config: []
                                                                   # ]]]

# .. envvar:: owncloud__group_ldap_config [[[
#
# List of custom LDAP configuration options defined on hosts in
# a specific Ansible inventory group.
owncloud__group_ldap_config: []
                                                                   # ]]]

# .. envvar:: owncloud__host_ldap_config [[[
#
# List of custom LDAP configuration options defined on specific
# hosts in the Ansible inventory.
owncloud__host_ldap_config: []
                                                                   # ]]]

# .. envvar:: owncloud__ldap_combined_config [[[
#
# The variable that combines default and user LDAP configuration and is used in
# the role tasks and templates.
owncloud__ldap_combined_config: '{{ owncloud__ldap_default_config
                                    + owncloud__ldap_config
                                    + owncloud__group_ldap_config
                                    + owncloud__host_ldap_config }}'
                                                                   # ]]]
                                                                   # ]]]
# .. ownCloud Mail configuration [[[1
#
# -------------------------------
#   ownCloud Mail configuration
# -------------------------------
#
# Refer to the `official ownCloud documentation about config.php <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/config_sample_php_parameters.html#mail-parameters>`__ and the `official ownCloud documentation about email configuration <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/email_configuration.html>`__ for details.

# .. envvar:: owncloud__mail_domain
#
owncloud__mail_domain: '{{ owncloud__fqdn if owncloud__fqdn is string else owncloud__fqdn[0] }}'


# .. envvar:: owncloud__mail_from_address
#
# From address that overrides the built-in ``sharing-noreply`` and
# ``lostpassword-noreply`` from addresses.
owncloud__mail_from_address: 'noreply'


# .. envvar:: owncloud__mail_smtpmode
#
# Which mode to use for sending mail.
# Choices are:
#
# * ``sendmail``
# * ``smtp``
# * ``qmail``
# * ``php``
#
owncloud__mail_smtpmode: 'sendmail'


# .. envvar:: owncloud__mail_smtphost
#
# Specify the IP address of your mail server host.
# This may contain multiple hosts separated by a semi-colon. If you need to
# specify the port number append it to the IP address separated by a colon,
# like this: ``127.0.0.1:24``.
#
# This depends on :envvar:`owncloud__mail_smtpmode`.
owncloud__mail_smtphost: 'smtp.{{ owncloud__domain }}'


# .. envvar:: owncloud__mail_smtpport
#
# Port for sending mail. Can also be specified via :envvar:`owncloud__mail_smtphost`.
# This depends on :envvar:`owncloud__mail_smtpmode`.
owncloud__mail_smtpport: '25'


# .. envvar:: owncloud__mail_conf_map
#
# This configuration ends up in :file:`mail.config.php` and override the
# values from :file:`config.php`.
# Set to:
#
# .. code-block:: yaml
#    :linenos:
#
#    owncloud__mail_conf_map: {}
#
# if you want to be able to configure/change this via the admin web interface.
owncloud__mail_conf_map:
  mail_domain: '{{ owncloud__mail_domain }}'
  mail_from_address: '{{ owncloud__mail_from_address  }}'
  mail_smtpmode: '{{ owncloud__mail_smtpmode }}'
  mail_smtphost: '{{ owncloud__mail_smtphost }}'
  mail_smtpport: '{{ owncloud__mail_smtpport }}'


# .. Theming ownCloud [[[1
#
# --------------------
#   Theming ownCloud
# --------------------
#
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/developer_manual/core/theming.html>`__ for details.
# See also `ownCloud Trademark Guidelines <https://owncloud.org/trademarks/>`_.

# .. envvar:: owncloud__theme_active
#
# Name of the theme to activate. Generation of a custom theme can be influenced
# by the following options.
#
# In case you already have a theme you want to use, you can alternatively
# provide the theme under :file:`/var/www/owncloud/themes/$your_theme_name`
# (for example using debops.resources_) and set this variable to
# ``$your_theme_name``. Note that the role maintainers recommend to let the
# role assemble your theme. See the following options.
owncloud__theme_active: '{{ "debops"
                            if (owncloud__variant in ["owncloud"])
                            else "" }}'


# .. envvar:: owncloud__theme_directory_name
#
# Directory name where the custom theme generated by this role will be stored under.
# This variable has the same format as the :envvar:`owncloud__theme_active` option.
# If you donâ€™t want this role to generate a theme for you, you can set this to
# an empty string to disable this feature.
# The generated theme name defaults to ``debops`` to allow enabling it via
# :envvar:`owncloud__theme_active`.
owncloud__theme_directory_name: '{{ "debops"
                                    if (owncloud__variant in ["owncloud"])
                                    else "" }}'


# .. envvar:: owncloud__theme_title
#
# Title of your ownCloud. This variable is included in the `HTML title tag`_ on
# all pages.
owncloud__theme_title: 'DebOps Cloud'


# .. envvar:: owncloud__theme_name
#
# Name of your ownCloud or software. This is shown when sharing a file/dir as
# link for example.
owncloud__theme_name: 'DebOps Cloud'


# .. envvar:: owncloud__theme_name_html
#
# Name of your ownCloud. HTML code can be used in this variable to create
# hyperlinks for example.
owncloud__theme_name_html: '{{ owncloud__theme_name }}'


# .. envvar:: owncloud__theme_entity_name
#
# Entity string for your ownCloud. For example the name of your company. This
# string is used in the footer and the copyright.
owncloud__theme_entity_name: 'DebOps'


# .. envvar:: owncloud__theme_base_url
#
# Base URL to get more information about your ownCloud. By default,
# :envvar:`owncloud__theme_entity_name` links to this URL on the login page.
# Use an empty string to use the default URL pointing to the ownCloud website.
owncloud__theme_base_url: 'https://github.com/debops/ansible-owncloud'


# .. envvar:: owncloud__theme_slogan
#
# Slogan of your ownCloud. This is shown by default on the bottom of the login page.
# It should not contain ``</br>`` (newline) because at least ownCloud as of
# version ``9.0`` canâ€™t automatically adjust to that.
# Use an empty string to use the default slogan provided by ownCloud.
#
# See under `Apps, Product and Service Names, and Compatibility References <https://owncloud.org/trademarks/>`_
# for more suggestions.
owncloud__theme_slogan: 'Powered by <a href="{{ owncloud__variant_url_map[owncloud__variant] }}">{{ owncloud__variant_name_map[owncloud__variant] }}</a>'


# .. envvar:: owncloud__theme_footer_short
#
# Short version of the footer.
# The value can contain arbitrary PHP and HTML code.
# You will need to take care of quotes yourself.
owncloud__theme_footer_short: |
  'Setup by <a href="' . $this->getBaseUrl() . '" target="_blank\">' . $this->getEntity() . '</a><br/>' .
  '{{ owncloud__theme_slogan }}'


# .. envvar:: owncloud__theme_footer_long
#
# Long version of the footer. See :envvar:`owncloud__theme_footer_short` for details.
# TODO: What exactly is the difference?
owncloud__theme_footer_long: '{{ owncloud__theme_footer_short }}'


# .. envvar:: owncloud__theme_doc_link_to_key
#
# Return statement the ``buildDocLinkToKey`` function which allows you to alter
# the URL used when referring to the documentation.
# The value can contain arbitrary PHP and HTML code.
# You will need to take care of quotes yourself.
# The reason for not going with the ownCloud default is that it seems to point
# to ``8.0`` even for the ``9.0.2`` release. Seems to be a bug.
owncloud__theme_doc_link_to_key: '$this->getDocBaseUrl() . ''/server/{{ owncloud__release }}/go.php?to='' . $key'


# .. envvar:: owncloud__theme_copy_files
#
# Global dictionary of additional files to place in the theme.
# This variable is intended to be used in Ansibleâ€™s global inventory.
# More specific variables can overrule less specific variables.
# The key is the target file path in the ownCloud theme directory.
# The ``state`` value allows to make files absent.
# All other options correspond to the options of the `Ansible copy module`_.
#
# To change the logo on the login page you can use:
#
# .. code-block:: yaml
#    :linenos:
#
#    owncloud__theme_copy_files:
#
#      'core/img/logo.svg':
#        ## Prefer SVG: https://github.com/owncloud/core/issues/5676#issuecomment-27649493
#        src: '/src/path/on/your/ansible/controller/logo.svg'
#
#      'core/css/styles.css':
#        content: |
#          /* Use logo from theme. */
#          #header .logo {
#            background-image: url('../img/logo.svg');
#            width: 250px;
#            height: 121px;
#          }
#
# in your inventory.
owncloud__theme_copy_files: {}


# .. envvar:: owncloud__theme_copy_files_host_group
#
# Host group dictionary of additional files to place in the theme.
# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported).
# Refer to :envvar:`owncloud__theme_copy_files` for more details.
owncloud__theme_copy_files_host_group: {}


# .. envvar:: owncloud__theme_copy_files_host
#
# Host dictionary of additional files to place in the theme.
# This variable is intended to be used in the inventory of hosts.
# Refer to :envvar:`owncloud__theme_copy_files` for more details.
owncloud__theme_copy_files_host: {}


# .. envvar:: owncloud__theme_conf_map
#
# This configuration ends up in :file:`theme.config.php` and override the
# values from :file:`config.php`.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/config_sample_php_parameters.html>`__ for details.
owncloud__theme_conf_map:
  theme: '{{ owncloud__theme_active }}'

                                                                   # ]]]
# .. Webserver [[[
#
# -------------
#   Webserver
# -------------

# .. envvar:: owncloud__webserver [[[
#
# Variable containing the webserver which should be used.
# Refer to :ref:`owncloud__ref_getting_started` for how to switch webservers.
owncloud__webserver: '{{ ansible_local.owncloud.webserver
                         if (ansible_local|d() and ansible_local.owncloud|d() and
                             ansible_local.owncloud.webserver|d())
                         else ("apache"
                               if (ansible_local|d() and ansible_local.apache|d() and ansible_local.apache.enabled|d()|bool)
                               else ("nginx"
                                     if (ansible_local|d() and ansible_local.nginx|d() and ansible_local.nginx.enabled|d()|bool)
                                     else "no-webserver-detected")) }}'

                                                                   # ]]]
# .. envvar:: owncloud__apache_modules [[[
#
# Variable containing the used webserver which can be used.
# Refer to :ref:`owncloud__ref_getting_started` for how to switch webservers.
# TODO: Enable on Debian package scripts to ensure that the PHP module is
# enabled as the name of the module is not deterministic with ``php5`` and
# ``php7.0``.
owncloud__apache_modules: []
                                                                   # ]]]
# .. envvar:: owncloud__nginx_client_body_temp_path [[[
#
# Defines the directory where Nginx will temporary store files holding client
# request bodies.
# Refer to the `the Nginx documentation <https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_temp_path>`__ for details.
#
# The default (empty string) is to not change the default of the webserver.
# TODO: Confirm that this variable does what it says.
owncloud__nginx_client_body_temp_path: ''

                                                                   # ]]]
# .. envvar:: owncloud__nginx_access_log_assets [[[
#
# Should the access to assets be logged by :program:`nginx`?
owncloud__nginx_access_log_assets: True
                                                                   # ]]]
                                                                   # ]]]
# .. PHP [[[
#
# ---
# PHP
# ---

# .. envvar:: owncloud__php_temp_path [[[
#
# Directory which PHP will use as temp directory.
#
# In case :file:`/tmp` has limited space (for example is a ramdisk) or is otherwise
# restricted then it is recommended to change the temp directory which PHP
# uses to a path with more space available.
# This directory is used to cache uploaded files when using Apache.
# See also :envvar:`owncloud__temp_path`.
#
# Empty string will not change the temp directory of PHP.
owncloud__php_temp_path: ''

                                                                   # ]]]
# .. envvar:: owncloud__php_output_buffering [[[
#
# Output buffering set in PHP, with amount set in megabytes.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_files/big_file_upload_configuration.html#configuring-php>`__ for details.
owncloud__php_output_buffering: '0'


                                                                   # ]]]
# .. envvar:: owncloud__php_max_children [[[
#
# Max children processes to run in php fpm.
# FIXME: Check if default of debops.php_ might be sufficient.
owncloud__php_max_children: '50'
                                                                   # ]]]
                                                                   # ]]]
# .. Role-dependent configuration [[[1
#
# --------------------------------
#   Role-dependent configuration
# --------------------------------

# .. envvar:: owncloud__apt_preferences__dependent_list
#
# Configuration for the :ref:`debops.apt_preferences` role.
#
# .. TODO: Consider moving logic to the :ref:`debops.php` role.
#
owncloud__apt_preferences__dependent_list:

  - package: 'php5-apcu'
    backports: [ 'trusty' ]
    reason: 'ownCloud requires at least APCu version 4.0.6.'
    by_role: 'debops.owncloud'
    state: '{{ owncloud__deploy_state }}'


# .. envvar:: owncloud__apt_preferences__dependent_list_optional
#
# Optional configuration for the :ref:`debops.apt_preferences` role.
# Only required when APT preference presets from the
# :ref:`debops.apt_preferences` role are used.
owncloud__apt_preferences__dependent_list_optional:

  - package: 'owncloud owncloud*'
    reason: 'Use download.owncloud.org even when foreign sources are disabled by global APT preferences.'
    pin: 'origin "download.owncloud.org"'
    priority: 995
    by_role: 'debops.owncloud'
    state: '{{ "present"
               if (owncloud__variant in ["owncloud"] and
                   owncloud__deploy_state == "present")
               else "absent" }}'


# .. envvar:: owncloud__keyring__dependent_apt_keys [[[
#
# APT key configuration for the :ref:`debops.keyring` Ansible role.
owncloud__keyring__dependent_apt_keys:

  - id: '{{ owncloud__apt_repo_key_id }}'
    state: '{{ "present" if (owncloud__variant in ["owncloud"]) else "absent" }}'

    # Old or unused OpenPGP public keys specified by fingerprint which where
    # previously used to sign the APT repository.
    # The keys listed here are ensured to be absent to reduce the risk if one of
    # the keys gets compromised.
  - id: 'F9EA4996747310AE79474F44977C43A8BA684223'
    state: 'absent'

  - id: 'BCECA90325B072AB1245F739AB7C32C35180350A'
    state: 'absent'

                                                                   # ]]]
# .. envvar:: owncloud__keyring__dependent_gpg_keys [[[
#
# GPG key configuration for the :ref:`debops.keyring` Ansible role.
owncloud__keyring__dependent_gpg_keys:

  - user: '{{ owncloud__system_user }}'
    group: '{{ owncloud__system_group }}'
    home: '{{ owncloud__system_home }}'
    id: '{{ owncloud__upstream_key_fingerprint }}'
    state: '{{ "present" if (owncloud__variant in ["nextcloud"]) else "absent" }}'

                                                                   # ]]]
# .. envvar:: owncloud__ldap__dependent_tasks [[[
#
# Configuration for the :ref:`debops.ldap` Ansible role.
owncloud__ldap__dependent_tasks:

  - name: 'Create Nextcloud account for {{ owncloud__ldap_device_dn | join(",") }}'
    dn: '{{ owncloud__ldap_binddn }}'
    objectClass: '{{ owncloud__ldap_self_object_classes }}'
    attributes: '{{ owncloud__ldap_self_attributes }}'
    no_log: True
    state: '{{ "present" if owncloud__ldap_device_dn|d() else "ignore" }}'

  - name: 'Enable password management by {{ owncloud__ldap_binddn }}'
    dn: '{{ ([ "cn=Password Reset Agents", "ou=System Groups" ] + owncloud__ldap_base_dn) | join(",") }}'
    attributes:
      member: '{{ owncloud__ldap_binddn }}'
    state: '{{ "present" if owncloud__ldap_device_dn|d() else "ignore" }}'

                                                                   # ]]]
# .. envvar:: owncloud__mariadb__dependent_databases [[[
#
# Configuration of the database managed by the :ref:`debops.mariadb` role.
owncloud__mariadb__dependent_databases:

  - database: '{{ owncloud__database_map[owncloud__database].dbname }}'
    state: '{{ "present" if (owncloud__deploy_state != "purged") else "absent" }}'

                                                                   # ]]]
# .. envvar:: owncloud__mariadb__dependent_users [[[
#
# Configuration of the database user managed by the :ref:`debops.mariadb` role.
owncloud__mariadb__dependent_users:

  - database: '{{ owncloud__database_map[owncloud__database].dbname }}'
    user: '{{ owncloud__database_map[owncloud__database].dbuser }}'
    password: '{{ owncloud__database_map[owncloud__database].dbpass }}'

                                                                   # ]]]
# .. envvar:: owncloud__postgresql__dependent_roles [[[
#
# Configuration of the database roles managed by the :ref:`debops.postgresql` role.
owncloud__postgresql__dependent_roles:

  - name: '{{ owncloud__database_name }}'  # Separate role is needed when owncloud__database_name != owncloud__database_user
  - name: '{{ owncloud__database_user }}'  # Password is not passed directly - it will be read from the file

                                                                   # ]]]
# .. envvar:: owncloud__postgresql__dependent_groups [[[
#
# Configuration of the database groups managed by the :ref:`debops.postgresql` role.
owncloud__postgresql__dependent_groups:

  - roles: [ '{{ owncloud__database_user }}' ]
    groups: [ '{{ owncloud__database_name }}' ]
    database: '{{ owncloud__database_name }}'
    state: '{{ "present" if (owncloud__deploy_state != "purged") else "absent" }}'

                                                                   # ]]]
# .. envvar:: owncloud__postgresql__dependent_databases [[[
#
# Configuration of the database managed by the :ref:`debops.postgresql` role.
owncloud__postgresql__dependent_databases:

  - name: '{{ owncloud__database_name }}'
    owner: '{{ owncloud__database_user }}'
                                                                   # ]]]
# .. envvar:: owncloud__logrotate__dependent_config [[[
#
# Configuration of the logrotate rule managed by the debops.logrotate_ role.
# ownCloud as of Version 9.0 does not do log rotate by default. This could
# be enabled by ``log_rotate_size``. ``logrotate`` is the default in DebOps.
owncloud__logrotate__dependent_config:

  - filename: '{{ owncloud__variant }}'
    log: '{{ owncloud__data_path + "/" + owncloud__variant + ".log" }}'
    state: '{{ "present" if (owncloud__deploy_state == "present") else "absent" }}'
    options: |
      rotate 12
      weekly
      missingok
      notifempty
      compress
      su {{ owncloud__app_user }} {{ owncloud__app_group }}
      delaycompress
# ]]]

# .. envvar:: owncloud__apache__dependent_snippets [[[
#
# Apache configuration snippets managed by the :ref:`debops.apache` role.
# Disable the :file:`/etc/apache2/conf-enabled/owncloud.conf` which configures
# ownCloud below ``/owncloud``.
owncloud__apache__dependent_snippets:
  'owncloud':
    enabled: False
    type: 'dont-create'


# .. envvar:: owncloud__apache__dependent_vhosts
#
# Apache virtual host managed by the :ref:`debops.apache` role.
owncloud__apache__dependent_vhosts:

  - type: 'default'
    name: '{{ owncloud__fqdn }}'
    by_role: 'debops.owncloud'
    filename: 'debops.owncloud'
    root: '{{ owncloud__app_home }}'
    options: '+FollowSymLinks'
    allow_override: 'All'
    root_directives: |
      <IfModule mod_dav.c>
            Dav off
      </IfModule>

      SetEnv HOME {{ owncloud__app_home }}
      SetEnv HTTP_HOME {{ owncloud__app_home }}

      {# Does not work.
      ## Tested while uploading with:
      ## while true; do df -h /tmp|tail -n 1; sleep 0.1; done
      ## Currently configured in PHP Apache scope: owncloud__php__dependent_configuration
      {% if owncloud__php_temp_path != "" %}
      <IfModule mod_php5.c>
        php_value sys_temp_dir '{{ owncloud__php_temp_path }}'
      </IfModule>
      <IfModule mod_php7.c>
        php_value sys_temp_dir '{{ owncloud__php_temp_path }}'
      </IfModule>
      {% endif %}
      # SetEnv TMPDIR '{{ owncloud__php_temp_path }}'
      #}
    raw_content: |
      <Directory "{{ owncloud__app_home }}/data/">
          # Just in case the .htaccess gets disabled.
          Require all denied
      </Directory>
      {% if owncloud__data_path != (owncloud__app_home + "/data") %}
      <Directory {{ owncloud__data_path | quote }}>
          # Just in case someone changes the global Apache defaults and messed
          # with the "Alias" directive ;)
          Require all denied
      </Directory>
      {% endif %}
    http_sec_headers_directive_options: 'set'


# .. envvar:: owncloud__nginx__dependent_servers
#
# :program:`nginx` server configuration managed by the :ref:`debops.nginx` role.
owncloud__nginx__dependent_servers:

  ## https://docs.nextcloud.com/server/13/admin_manual/installation/nginx.html
  - type: 'default'
    enabled: True
    by_role: 'debops.owncloud'
    filename: 'debops.owncloud'
    name: '{{ owncloud__fqdn }}'
    root: '{{ owncloud__deploy_path }}'
    deny_hidden: False
    ## Nextcloud has it's own maintenance page
    maintenance: '{{ False if (owncloud__variant == "nextcloud") else True }}'

    ## https://doc.owncloud.org/server/9.0/admin_manual/issues/general_troubleshooting.html#common-problems-error-messages
    ## DebOps default should be fine.
    # keepalive: '3600'

    robots_tag: [ 'none' ]
    permitted_cross_domain_policies: 'none'
    frame_options: '{{ omit if (owncloud__variant in ["nextcloud"] and owncloud__release is version_compare("12.0", ">=")) else "SAMEORIGIN" }}'

    options: |
      add_header X-Download-Options noopen;

      # Set max upload size.
      client_max_body_size {{ owncloud__upload_size }};
      {% if owncloud__nginx_client_body_temp_path %}
      client_body_temp_path '{{ owncloud__nginx_client_body_temp_path }}';
      {% endif %}
      fastcgi_buffers 64 4K;

      {% if owncloud__app_user_webfinger_support | bool %}
      rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
      rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;
      {% endif %}

      {% if (owncloud__variant in ["nextcloud"] and owncloud__release is version_compare("13.0", ">=")) %}
      # Enable gzip but do not remove ETag headers
      gzip on;
      gzip_vary on;
      gzip_comp_level 4;
      gzip_min_length 256;
      gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
      gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;
      {% else %}
      # Disable gzip to avoid the removal of the ETag header
      gzip off;
      {% endif %}

      # Uncomment if your server is build with the ngx_pagespeed module
      # This module is currently not supported.
      #pagespeed off;

      error_page            403             /core/templates/403.php;
      error_page            404             /core/templates/404.php;


      # Avoid to send the security headers twice as ownCloud
      # also adds the X-* HTTP headers.
      fastcgi_param modHeadersAvailable true;

    location_list:
      - pattern: '= /robots.txt'
        options: |
          log_not_found off;

      - pattern: '= /.well-known/carddav'
        options: |
          return 301 $scheme://$host/remote.php/dav;

      - pattern: '= /.well-known/caldav'
        options: |
          return 301 $scheme://$host/remote.php/dav;

      - pattern: '= /'
        options: |
          ## Not used in the Nginx configuration example of ownCloud.
          ## Needed because `security.limit_extensions` defaults to `.php` in DebOps.
          rewrite ^ /index.php;

      - pattern: '/'
        options: |
          rewrite ^ /index.php;

      - pattern: '~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/'
        options: |
          deny all;

      - pattern: '~ ^\/(?:\.|autotest|occ|issue|indie|db_|console)'
        options: |
          deny all;

      - pattern: '~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/)'
        options: |
          include fastcgi_params;
          fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;
          try_files $fastcgi_script_name =404;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param PATH_INFO $fastcgi_path_info;
          fastcgi_param HTTPS on;
          #Avoid sending the security headers twice
          fastcgi_param modHeadersAvailable true;
          # Enable pretty urls
          fastcgi_param front_controller_active true;
          fastcgi_intercept_errors on;
          {% if (ansible_local.nginx.version if (ansible_local|d() and ansible_local.nginx|d() and ansible_local.nginx.version|d()) else "0.0") is version_compare("1.7.11",'>=') %}
          fastcgi_request_buffering off;
          {% endif %}

          fastcgi_pass php_owncloud;

          fastcgi_read_timeout {{ owncloud__timeout }};

      - pattern: '~ ^\/(?:updater|oc[ms]-provider)(?:$|\/)'
        options: |
          try_files $uri/ =404;
          index index.php;

      - pattern: '~ \.(?:css|js|woff2?|svg|gif|map)$'
        options: |
          # Adding the cache control header for js, css and map files
          # Make sure it is BELOW the PHP block

          try_files $uri /index.php$request_uri;
          add_header Cache-Control "public, max-age=15778463";

          add_header X-Content-Type-Options nosniff;
          add_header X-Download-Options noopen;
          {% if not (owncloud__variant in ["nextcloud"] and owncloud__release is version_compare("12.0", ">=")) %}
          add_header X-Frame-Options "SAMEORIGIN";
          {% endif %}
          add_header X-Permitted-Cross-Domain-Policies none;
          add_header X-Robots-Tag none;
          add_header X-XSS-Protection "1; mode=block";

          {% if not (owncloud__nginx_access_log_assets|bool) %}
          access_log off;
          {% endif %}

      - pattern: '~ \.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$'
        options: |
          try_files $uri /index.php$request_uri;

          {% if not (owncloud__nginx_access_log_assets|bool) %}
          access_log off;
          {% endif %}

    ## Not used so that the exact order of locations from the upstream nginx example can be used.
    # type: 'php'
    # php_upstream: 'php_owncloud'
    # php_limit_except: False
    # php5_location: '^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/)'
    # php_options: |
    #   fastcgi_read_timeout {{ owncloud__timeout }};


# .. envvar:: owncloud__nginx__dependent_upstreams
#
# PHP upstream server configuration managed by the :ref:`debops.nginx` role.
owncloud__nginx__dependent_upstreams:

  - name: 'php_owncloud'
    by_role: 'debops.owncloud'
    enabled: True
    state: '{{ owncloud__deploy_state }}'
    type: 'php'
    php_pool: 'owncloud'


# .. envvar:: owncloud__php__dependent_packages
#
# List of PHP packages to install using the :ref:`debops.php` role.
owncloud__php__dependent_packages:

  - '{{ owncloud__base_php_packages }}'
  - '{{ owncloud__optional_php_packages }}'
  - '{{ ["libapache2-mod-php"] if (owncloud__webserver == "apache") else [] }}'


# .. envvar:: owncloud__php__dependent_configuration
#
# :file:`php.ini` configuration managed by the :ref:`debops.php` role.
owncloud__php__dependent_configuration:

  - filename: '10-owncloud'
    by_role: 'debops.owncloud'
    state: '{{ "present"
               if ((owncloud__apcu_enabled|bool) and (owncloud__release is match("8\.1")))
               else "absent" }}'
    options: |
      ; Workaround for: https://github.com/owncloud/core/issues/17329
      apc.enable_cli = 1

  - filename: '30-owncloud-opcache'
    by_role: 'debops.owncloud'
    state: '{{ "present"
               if (owncloud__variant in ["nextcloud"] and owncloud__release is version_compare("12.0", ">="))
               else "absent" }}'
    options: |
      ; https://docs.nextcloud.com/server/13/admin_manual/configuration_server/server_tuning.html#enable-php-opcache

      [opcache]

      opcache.enable=1
      opcache.enable_cli=1
      opcache.interned_strings_buffer=8
      opcache.max_accelerated_files=10000
      opcache.memory_consumption=128
      opcache.save_comments=1
      opcache.revalidate_freq=1

  - filename: 'debops.owncloud'
    path: 'apache2/conf.d/'
    by_role: 'debops.owncloud'
    state: '{{ (owncloud__php_temp_path != "" and owncloud__webserver == "apache") | ternary("present", "absent") }}'
    sections:

      - options: |
          ## TODO: Could not be configured on Apache vhost scope.
          sys_temp_dir = {{ owncloud__php_temp_path | quote }}


# .. envvar:: owncloud__php__dependent_pools
#
# PHP pools managed by the :ref:`debops.php` role.
# Refer to the `official ownCloud documentation <https://doc.owncloud.org/server/9.0/admin_manual/installation/source_installation.html#php-ini-configuration-notes>`__ for details.
owncloud__php__dependent_pools:
  name: 'owncloud'
  by_role: 'debops.owncloud'
  user: '{{ owncloud__app_user }}'
  group: '{{ owncloud__app_group }}'
  pm_max_children: '{{ owncloud__php_max_children }}'

  ## Overwrite DebOps default to ensure that long running syncing jobs donâ€™t
  ## get killed.
  ## https://secure.php.net/manual/en/install.fpm.configuration.php
  request_terminate_timeout: '{{ owncloud__timeout }}'

  ## This is sometimes seen in other peoples ownCloud configuration.
  ## The role maintainers could not yet verify if it is really needed.
  # rlimit_files: '131072'
  # rlimit_core: 'unlimited'

  ## https://github.com/owncloud/core/blob/master/.user.ini
  ## https://github.com/nextcloud/server/blob/master/.user.ini
  php_values:
    ## https://secure.php.net/manual/en/outcontrol.configuration.php#ini.output-buffering
    output_buffering: '{{ owncloud__php_output_buffering }}'

    ## https://secure.php.net/manual/en/info.configuration.php#ini.upload-max-filesize
    upload_max_filesize: '{{ owncloud__upload_size }}'

    ## https://secure.php.net/manual/en/ini.core.php#ini.post-max-size
    post_max_size: '{{ owncloud__upload_size }}'

    ## https://secure.php.net/manual/de/ini.core.php#ini.memory-limit
    ## Nextcloud now warns with a PHP memory limit lower than 512MB
    memory_limit: '{{ owncloud__upload_size }}'

    ## https://secure.php.net/manual/en/info.configuration.php#ini.max-input-time
    max_input_time: '{{ owncloud__timeout }}'

    ## Refer to: https://secure.php.net/manual/en/info.configuration.php#ini.max-execution-time
    max_execution_time: '{{ owncloud__timeout }}'

  environment:
    # HOSTNAME: '$HOSTNAME'
    # TMP: '/tmp'
    # TMPDIR: '/tmp'
    # TEMP: '/tmp'

    ## Fixes warning (ownCloud 8.1): "The test with getenv('PATH') only returns an empty response"
    PATH: '/usr/local/bin:/usr/bin:/bin'


# .. envvar:: owncloud__unattended_upgrades__dependent_origins
#
# List of origin patterns managed by the :ref:`debops.unattended_upgrades` role.
owncloud__unattended_upgrades__dependent_origins:

  - origin: 'site=download.owncloud.org'
    by_role: 'debops.owncloud'
    state: '{{ "present"
               if (owncloud__variant in ["owncloud"] and
                   owncloud__auto_security_updates_enabled | bool)
               else "absent" }}'

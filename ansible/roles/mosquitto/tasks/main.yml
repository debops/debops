---

- import_role:
    name: 'secret'

- name: Check if supported version of libwebsockets is available
  command: apt-cache -q madison {{ mosquitto__websockets_packages | join(' ') }}
  register: mosquitto__register_websockets
  when: ansible_pkg_mgr == 'apt'
  changed_when: False
  check_mode: False

- name: Install required packages
  package:
    name: '{{ q("flattened", (mosquitto__base_packages
                              + mosquitto__packages)) }}'
    state: 'present'
  register: mosquitto__register_packages
  until: mosquitto__register_packages is succeeded

- name: Install required Python modules
  pip:
    name: '{{ item }}'
    state: 'present'
  with_items: '{{ mosquitto__pip_packages }}'
  register: mosquitto__register_pip_install
  until: mosquitto__register_pip_install is succeeded
  when: mosquitto__pip_packages|d()

- name: Check the installed Mosquitto version
  shell: set -o nounset -o pipefail -o errexit &&
         mosquitto -h | head -n 1 | awk '{print $3}' || true
  args:
    executable: 'bash'
  register: mosquitto__register_version
  changed_when: False
  check_mode: False
  tags: [ 'role::mosquitto:passwd' ]

- name: Ensure that the required UNIX group exists
  group:
    name: '{{ mosquitto__group }}'
    state: 'present'
    system: True

- name: Add Mosquitto user to specified system groups
  user:
    name: '{{ mosquitto__user }}'
    group: '{{ mosquitto__group }}'
    groups: '{{ ([ mosquitto__append_groups ]
                 if mosquitto__append_groups is string
                 else mosquitto__append_groups) | join(",") }}'
    append: True
  notify: [ 'Restart mosquitto' ]

- name: Make sure the password file exists
  file:
    path: '{{ mosquitto__password_file }}'
    state: '{{ "file"
               if (ansible_local|d() and ansible_local.mosquitto|d() and
                   ansible_local.mosquitto.password|bool) else "touch" }}'
    owner: 'root'
    group: '{{ mosquitto__group }}'
    mode:  '0640'
  when: mosquitto__password|bool
  tags: [ 'role::mosquitto:passwd' ]

- name: Check current list of user entries
  command: awk -F ':' '{print $1}' {{ mosquitto__password_file }}
  register: mosquitto__register_passwd
  when: mosquitto__password|bool
  changed_when: False
  check_mode: False
  tags: [ 'role::mosquitto:passwd' ]

- name: Remove user/password entries
  command: 'mosquitto_passwd -D {{ mosquitto__password_file }} {{ item.name | d(item) }}'
  with_flattened:
    - '{{ mosquitto__auth_users }}'
    - '{{ mosquitto__auth_group_users }}'
    - '{{ mosquitto__auth_host_users }}'
  when: (mosquitto__password|bool and item.state|d('present') == 'absent' and
         (item.name | d(item) in mosquitto__register_passwd.stdout_lines) and
         mosquitto__version is version_compare('1.4.0', '>='))
  notify: [ 'Reload mosquitto' ]
  tags: [ 'role::mosquitto:passwd' ]
  no_log: '{{ secret__no_log | bool }}'

- name: Create user/password entries
  environment:
    MOSQUITTO_PASSWORD: '{{ item.password
                            | d(lookup("password", mosquitto__password_secret_path + "/" + item.name | d(item))) }}'
  command: 'mosquitto_passwd -b {{ mosquitto__password_file }} {{ item.name | d(item) }} ${MOSQUITTO_PASSWORD}'
  with_flattened:
    - '{{ mosquitto__auth_users }}'
    - '{{ mosquitto__auth_group_users }}'
    - '{{ mosquitto__auth_host_users }}'
  when: (mosquitto__password|bool and item.state|d('present') != 'absent' and
         (item.name | d(item) not in mosquitto__register_passwd.stdout_lines) and
         mosquitto__version is version_compare('1.4.0', '>='))
  notify: [ 'Reload mosquitto' ]
  tags: [ 'role::mosquitto:passwd' ]
  no_log: '{{ secret__no_log | bool }}'

- name: Manage Mosquitto ACL file
  template:
    src: 'etc/mosquitto/acl.j2'
    dest: '{{ mosquitto__acl_file }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: mosquitto__acl|bool
  notify: [ 'Reload mosquitto' ]
  tags: [ 'role::mosquitto:acl' ]

- name: Remove Mosquitto default configuration if empty
  file:
    path: '/etc/mosquitto/conf.d/00_default.conf'
    state: 'absent'
  when: not mosquitto__combined_options|d()
  notify: [ 'Restart mosquitto' ]
  tags: [ 'role::mosquitto:config', 'role::mosquitto:passwd', 'role::mosquitto:acl' ]

- name: Generate Mosquitto default configuration
  template:
    src: 'etc/mosquitto/conf.d/default.conf.j2'
    dest: '/etc/mosquitto/conf.d/00_default.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart mosquitto' ]
  tags: [ 'role::mosquitto:config', 'role::mosquitto:passwd', 'role::mosquitto:acl' ]

- name: Remove Mosquitto listener configuration
  file:
    dest: '/etc/mosquitto/conf.d/listener_{{ item.key }}.conf'
    state: 'absent'
  with_dict: '{{ mosquitto__combined_listeners }}'
  notify: [ 'Restart mosquitto' ]
  when: item.value.state|d('present') == 'absent'
  tags: [ 'role::mosquitto:listeners' ]

- name: Generate Mosquitto listener configuration
  template:
    src: 'etc/mosquitto/conf.d/listener.conf.j2'
    dest: '/etc/mosquitto/conf.d/listener_{{ item.key }}.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_dict: '{{ mosquitto__combined_listeners }}'
  notify: [ 'Restart mosquitto' ]
  when: item.value.state|d('present') != 'absent'
  tags: [ 'role::mosquitto:listeners' ]

- name: Remove Mosquitto bridge configuration
  file:
    dest: '/etc/mosquitto/conf.d/bridge_{{ item.value.connection | d(item.key) }}.conf'
    state: 'absent'
  with_dict: '{{ mosquitto__combined_bridges }}'
  notify: [ 'Restart mosquitto' ]
  when: item.value.state|d('present') == 'absent'
  tags: [ 'role::mosquitto:bridges' ]

- name: Generate Mosquitto bridge configuration
  template:
    src: 'etc/mosquitto/conf.d/bridge.conf.j2'
    dest: '/etc/mosquitto/conf.d/bridge_{{ item.value.connection | d(item.key) }}.conf'
    owner: 'root'
    group: '{{ item.value.group | d("root") }}'
    mode: '{{ item.value.mode | d("0644") }}'
  with_dict: '{{ mosquitto__combined_bridges }}'
  notify: [ 'Restart mosquitto' ]
  when: item.value.state|d('present') != 'absent'
  tags: [ 'role::mosquitto:bridges' ]

- name: Make sure that Avahi service directory exists
  file:
    path: '/etc/avahi/services'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: mosquitto__avahi|bool
  tags: [ 'role::mosquitto:avahi', 'role::mosquitto:listeners' ]

- name: Generate Avahi Mosquitto service file
  template:
    src: 'etc/avahi/services/mosquitto.service.j2'
    dest: '/etc/avahi/services/mosquitto.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: mosquitto__avahi|bool
  tags: [ 'role::mosquitto:avahi', 'role::mosquitto:listeners' ]

- name: Make sure that WebSockets public HTTP directory exists
  file:
    path: '{{ mosquitto__http_dir_path }}'
    state: 'directory'
    owner: '{{ mosquitto__http_dir_owner }}'
    group: '{{ mosquitto__http_dir_group }}'
    mode:  '{{ mosquitto__http_dir_mode }}'
  when: mosquitto__websockets|bool

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags: [ 'role::mosquitto:passwd' ]

- name: Save Mosquitto local facts
  template:
    src: 'etc/ansible/facts.d/mosquitto.fact.j2'
    dest: '/etc/ansible/facts.d/mosquitto.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: mosquitto__register_facts
  tags: [ 'role::mosquitto:passwd' ]

- name: Update Ansible facts if they were modified
  action: setup
  when: mosquitto__register_facts is changed
  tags: [ 'role::mosquitto:passwd' ]

---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# Copyright (C) 2016-2019 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2016-2019 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  import_role:
    name: 'ansible_plugins'

- name: Import DebOps secret role
  import_role:
    name: 'secret'

# DebOps pre-hook [[[1
- name: Pre hooks
  include: '{{ lookup("debops.debops.task_src", "resources/pre_main.yml") }}'

# Manage custom templates [[[1
- name: Ensure that template directories exist
  file:
    path: '/{{ item.path }}'
    mode: '{{ item.mode }}'
    state: 'directory'
  with_filetree: '{{ (resources__host_templates
                      + resources__group_templates
                      + resources__templates) | flatten }}'
  when: item.state == 'directory'

- name: Generate custom templates
  template:
    src: '{{ item.src }}'
    dest: '/{{ item.path }}'
    mode: '{{ item.mode }}'
  with_filetree: '{{ (resources__host_templates
                      + resources__group_templates
                      + resources__templates) | flatten }}'
  when: item.state == 'file'

- name: Recreate custom symlinks
  file:
    src: '{{ item.src }}'
    dest: '/{{ item.path }}'
    mode: '{{ item.mode }}'
    state: 'link'
    force: True
  with_filetree: '{{ (resources__host_templates
                      + resources__group_templates
                      + resources__templates) | flatten }}'
  when: item.state == 'link'

# Manage custom paths [[[1
- name: Manage paths on remote hosts
  file:
    path:    '{{ (item.path   | d(item.dest | d(item.name))) | d(item) }}'
    state:   '{{ item.state   | d("directory") }}'
    owner:   '{{ item.owner   | d(omit) }}'
    group:   '{{ item.group   | d(omit) }}'
    mode:    '{{ item.mode    | d(omit) }}'
    selevel: '{{ item.selevel | d(omit) }}'
    serole:  '{{ item.serole  | d(omit) }}'
    setype:  '{{ item.setype  | d(omit) }}'
    seuser:  '{{ item.seuser  | d(omit) }}'
    follow:  '{{ item.follow  | d(omit) }}'
    force:   '{{ item.force   | d(omit) }}'
    src:     '{{ item.src     | d(omit) }}'
    recurse: '{{ item.recurse | d(omit) }}'
    attributes:               '{{ item.attributes               | d(omit) }}'
    access_time:              '{{ item.access_time              | d(omit) }}'
    access_time_format:       '{{ item.access_time_format       | d(resources__time_format) }}'
    modification_time:        '{{ item.modification_time        | d(omit) }}'
    modification_time_format: '{{ item.modification_time_format | d(resources__time_format) }}'
  with_flattened:
    - '{{ resources__paths }}'
    - '{{ resources__group_paths }}'
    - '{{ resources__host_paths }}'
  when: (resources__enabled|bool and
         ((item.path|d() or item.dest|d() or item.name|d()) or item))
  tags: [ 'role::resources:paths' ]

# Create parent directories [[[1
- name: Ensure that parent directories exist
  file:
    path:    '{{ (item.dest | d(item.name | d(item.path))) | dirname }}'
    state:   'directory'
    recurse: '{{ item.parent_dirs_recurse | d(resources__parent_dirs_recurse) }}'
    owner:   '{{ item.parent_dirs_owner   | d(resources__parent_dirs_owner) }}'
    group:   '{{ item.parent_dirs_group   | d(resources__parent_dirs_group) }}'
    mode:    '{{ item.parent_dirs_mode    | d(resources__parent_dirs_mode) }}'
  when: (resources__enabled|bool and
         (item.parent_dirs_create|d(resources__parent_dirs_create) | bool) and
         item.state|d("present") != 'absent')
  with_flattened:
    - '{{ resources__urls }}'
    - '{{ resources__group_urls }}'
    - '{{ resources__host_urls }}'
    - '{{ resources__archives }}'
    - '{{ resources__group_archives }}'
    - '{{ resources__host_archives }}'
    - '{{ resources__files }}'
    - '{{ resources__group_files }}'
    - '{{ resources__host_files }}'
  tags: [ 'role::resources:urls', 'role::resources:archives', 'role::resources:files' ]

# Manage git repositories [[[1
- name: Manage git repositories
  git:
    repo:             '{{ item.repo             | d(item.url | d(item.src)) }}'
    dest:             '{{ item.dest             | d(item.name | d(item.path)) }}'
    accept_hostkey:   '{{ item.accept_hostkey   | d(omit) }}'
    bare:             '{{ item.bare             | d(omit) }}'
    clone:            '{{ item.clone            | d(omit) }}'
    depth:            '{{ item.depth            | d(omit) }}'
    executable:       '{{ item.executable       | d(omit) }}'
    force:            '{{ item.force            | d(omit) }}'
    key_file:         '{{ item.key_file         | d(omit) }}'
    recursive:        '{{ item.recursive        | d(omit) }}'
    reference:        '{{ item.reference        | d(omit) }}'
    refspec:          '{{ item.refspec          | d(omit) }}'
    remote:           '{{ item.remote           | d(omit) }}'
    ssh_opts:         '{{ item.ssh_opts         | d(omit) }}'
    track_submodules: '{{ item.track_submodules | d(omit) }}'
    umask:            '{{ item.umask            | d(omit) }}'
    update:           '{{ item["_update"]       | d(omit) }}'
    verify_commit:    '{{ item.verify_commit    | d(omit) }}'
    version:          '{{ item.version          | d(omit) }}'
  become: True
  become_user:        '{{ item.owner            | d("root") }}'
  with_flattened:
    - '{{ resources__repositories }}'
    - '{{ resources__group_repositories }}'
    - '{{ resources__host_repositories }}'
  when: (resources__enabled|bool and (item.repo|d() or item.url|d() or item.src|d()) and
         (item.dest|d() or item.name|d() or item.path|d()))
  tags: [ 'role::resources:repositories' ]

# Manage custom remote resources [[[1
- name: Download online resources to remote hosts
  get_url:
    url:              '{{ item.url              | d(item.src) }}'
    dest:             '{{ item.dest             | d(item.name | d(item.path)) }}'
    owner:            '{{ item.owner            | d(omit) }}'
    group:            '{{ item.group            | d(omit) }}'
    mode:             '{{ item.mode             | d(omit) }}'
    checksum:         '{{ item.checksum         | d(omit) }}'
    force:            '{{ item.force            | d(omit) }}'
    force_basic_auth: '{{ item.force_basic_auth | d(omit) }}'
    headers:          '{{ item.headers          | d(omit) }}'
    sha256sum:        '{{ item.sha256sum        | d(omit) }}'
    timeout:          '{{ item.timeout          | d(omit) }}'
    url_password:     '{{ item.url_password     | d(omit) }}'
    url_username:     '{{ item.url_username     | d(omit) }}'
    use_proxy:        '{{ item.use_proxy        | d(omit) }}'
    validate_certs:   '{{ item.validate_certs   | d(omit) }}'
  with_flattened:
    - '{{ resources__urls }}'
    - '{{ resources__group_urls }}'
    - '{{ resources__host_urls }}'
  when: (resources__enabled|bool and (item.url|d() or item.src|d()) and
         (item.dest|d() or item.name|d() or item.path|d()))
  no_log: '{{ debops__no_log | d(True if item.url_password|d() else omit) }}'
  tags: [ 'role::resources:urls' ]

# Manage custom archives [[[1
- name: Unpack archives to remote hosts
  unarchive:
    src:        '{{ item.src }}'
    dest:       '{{ item.dest       | d(item.name | d(item.path)) }}'
    owner:      '{{ item.owner      | d(omit) }}'
    group:      '{{ item.group      | d(omit) }}'
    mode:       '{{ item.mode       | d(omit) }}'
    selevel:    '{{ item.selevel    | d(omit) }}'
    serole:     '{{ item.serole     | d(omit) }}'
    setype:     '{{ item.setype     | d(omit) }}'
    seuser:     '{{ item.seuser     | d(omit) }}'
    creates:    '{{ item.creates    | d(omit) }}'
    exclude:    '{{ item.exclude    | d(omit) }}'
    keep_newer: '{{ item.keep_newer | d(omit) }}'
    extra_opts: '{{ item.extra_opts | d(omit) }}'
    attributes: '{{ item.attributes | d(omit) }}'
    list_files: '{{ item.list_files | d(omit) }}'
    remote_src: '{{ item.remote_src | d(omit) }}'
    unsafe_writes: '{{ item.unsafe_writes | d(omit) }}'
    validate_certs: '{{ item.validate_certs | d(omit) }}'
  with_flattened:
    - '{{ resources__archives }}'
    - '{{ resources__group_archives }}'
    - '{{ resources__host_archives }}'
  when: (resources__enabled|bool and item.src|d() and
         (item.dest|d() or item.name|d() or item.path|d()))
  tags: [ 'role::resources:archives' ]

# Manage custom files [[[1

- name: Delete files on remote hosts
  file:
    path:  '{{ item.dest | d(item.path | d(item.name)) }}'
    state: 'absent'
  with_flattened:
    - '{{ resources__files }}'
    - '{{ resources__group_files }}'
    - '{{ resources__host_files }}'
  when: (resources__enabled|bool and
         (item.dest|d() or item.path|d() or item.name|d()) and
         (item.state|d('present') == 'absent'))
  tags: [ 'role::resources:files' ]

- name: Copy files to remote hosts
  copy:
    dest:     '{{ item.dest     | d(item.path | d(item.name)) }}'
    src:      '{{ item.src      | d(omit) }}'
    content:  '{{ item.content  | d(omit) }}'
    owner:    '{{ item.owner    | d(omit) }}'
    group:    '{{ item.group    | d(omit) }}'
    mode:     '{{ item.mode     | d(omit) }}'
    selevel:  '{{ item.selevel  | d(omit) }}'
    serole:   '{{ item.serole   | d(omit) }}'
    setype:   '{{ item.setype   | d(omit) }}'
    seuser:   '{{ item.seuser   | d(omit) }}'
    follow:   '{{ item.follow   | d(omit) }}'
    force:    '{{ item.force    | d(omit) }}'
    backup:   '{{ item.backup   | d(omit) }}'
    validate: '{{ item.validate | d(omit) }}'
    remote_src: '{{ item.remote_src | d(omit) }}'
    directory_mode: '{{ item.directory_mode | d(omit) }}'
  with_flattened:
    - '{{ resources__files }}'
    - '{{ resources__group_files }}'
    - '{{ resources__host_files }}'
  when: (resources__enabled|bool and
         (item.src|d() or item.content is defined) and
         (item.dest|d() or item.path|d() or item.name|d()) and
         (item.state|d('present') != 'absent'))
  tags: [ 'role::resources:files' ]

- name: Manage virtual environments
  ansible.builtin.pip:
    chdir:        '{{ item.chdir | d(omit) }}'
    editable:     '{{ item.editable | d(omit) }}'
    executable:   '{{ item.executable | d(omit) }}'
    extra_args:   '{{ item.extra_args | d(omit) }}'
    name:         '{{ item.name | d(omit) }}'
    requirements: '{{ item.requirements | d(omit) }}'
    state:        '{{ item.state | d(omit) }}'
    umask:        '{{ item.umask | d(omit) }}'
    version:      '{{ item.version | d(omit) }}'
    virtualenv:   '{{ item.virtualenv | d(omit) }}'
    virtualenv_command: '{{ item.virtualenv_command | d(omit) }}'
    virtualenv_python: '{{ item.virtualenv_python | d(omit) }}'
    virtualenv_site_packages: '{{ item.virtualenv_site_packages | d(omit) }}'
  loop: '{{ q("flattened", resources__pip
                           + resources__group_pip
                           + resources__host_pip) }}'
  become: True
  become_user: '{{ item.owner | d("root") }}'
  when: (resources__enabled | bool and
         (item.name | d() or item.requirements is defined) and
         (item.state | d('present') != 'absent'))
  tags: [ 'role::resources:pip' ]

- name: Manage replacements inside files
  ansible.builtin.replace:
    dest:          '{{ item.dest          | d(item.name | d(item.path)) }}'
    after:         '{{ item.after         | d(omit) }}'
    attributes:    '{{ item.attributes    | d(item.attr | d(omit)) }}'
    backup:        '{{ item.backup        | d(omit) }}'
    before:        '{{ item.before        | d(omit) }}'
    encoding:      '{{ item.encoding      | d(omit) }}'
    group:         '{{ item.group         | d(omit) }}'
    mode:          '{{ item.mode          | d(omit) }}'
    others:        '{{ item.others        | d(omit) }}'
    owner:         '{{ item.owner         | d(omit) }}'
    regexp:        '{{ item.regexp        | d(omit) }}'
    replace:       '{{ item.replace       | d(omit) }}'
    selevel:       '{{ item.selevel       | d(omit) }}'
    serole:        '{{ item.serole        | d(omit) }}'
    setype:        '{{ item.setype        | d(omit) }}'
    seuser:        '{{ item.seuser        | d(omit) }}'
    unsafe_writes: '{{ item.unsafe_writes | d(omit) }}'
    validate:      '{{ item.validate      | d(omit) }}'
  loop: '{{ q("flattened", resources__replacements
                           + resources__group_replacements
                           + resources__host_replacements) }}'
  when: (resources__enabled | bool and item.regexp | d() and
         (item.dest | d() or item.path | d() or item.name | d()))
  tags: [ 'role::resources:lineinfile' ]

# Manage ACLs [[[1
- name: Set ACLs on remote hosts
  acl:
    path:        '{{ item.1.path        | d(item.0.name) | d(item.0.dest) | d(item.0.path) }}'
    default:     '{{ item.1.default     | d(omit) }}'
    entity:      '{{ item.1.entity      | d(omit) }}'
    entry:       '{{ item.1.entry       | d(omit) }}'
    etype:       '{{ item.1.etype       | d(omit) }}'
    permissions: '{{ item.1.permissions | d(omit) }}'
    follow:      '{{ item.1.follow      | d(omit) }}'
    recursive:   '{{ item.1.recursive   | d(omit) }}'
    state:       '{{ item.1.state       | d("present") }}'
  loop: '{{ (lookup("flattened",
                    resources__paths
                    + resources__group_paths
                    + resources__host_paths
                    + resources__repositories
                    + resources__group_repositories
                    + resources__host_repositories
                    + resources__urls
                    + resources__group_urls
                    + resources__host_urls
                    + resources__archives
                    + resources__group_archives
                    + resources__host_archives
                    + resources__files
                    + resources__group_files
                    + resources__host_files,
                    wantlist=True))
             | selectattr("acl", "defined") | list
             | subelements("acl") }}'
  loop_control:
    label: '{{ {"name": (item.0.name | d(item.0.dest) | d(item.0.path)),
                "acl": item.1} }}'
  when: item.0.state|d('present') != 'absent'
  tags: [ 'role::resources:acl' ]

# Manage custom delayed paths [[[1
- name: Manage delayed paths on remote hosts
  file:
    path:    '{{ (item.path   | d(item.dest | d(item.name))) | d(item) }}'
    state:   '{{ item.state   | d("directory") }}'
    owner:   '{{ item.owner   | d(omit) }}'
    group:   '{{ item.group   | d(omit) }}'
    mode:    '{{ item.mode    | d(omit) }}'
    selevel: '{{ item.selevel | d(omit) }}'
    serole:  '{{ item.serole  | d(omit) }}'
    setype:  '{{ item.setype  | d(omit) }}'
    seuser:  '{{ item.seuser  | d(omit) }}'
    follow:  '{{ item.follow  | d(omit) }}'
    force:   '{{ item.force   | d(omit) }}'
    src:     '{{ item.src     | d(omit) }}'
    recurse: '{{ item.recurse | d(omit) }}'
    attributes:               '{{ item.attributes               | d(omit) }}'
    access_time:              '{{ item.access_time              | d(omit) }}'
    access_time_format:       '{{ item.access_time_format       | d(resources__time_format) }}'
    modification_time:        '{{ item.modification_time        | d(omit) }}'
    modification_time_format: '{{ item.modification_time_format | d(resources__time_format) }}'
  with_flattened:
    - '{{ resources__delayed_paths }}'
    - '{{ resources__group_delayed_paths }}'
    - '{{ resources__host_delayed_paths }}'
  when: (resources__enabled|bool and
         ((item.path|d() or item.dest|d() or item.name|d()) or item))
  tags: [ 'role::resources:paths' ]

- name: Set custom file capabilities
  capabilities:
    path:       '{{ item.path  | d(item.name) }}'
    capability: '{{ item.capability }}'
    state:      '{{ item.state | d("present") }}'
  with_flattened:
    - '{{ resources__combined_file_capabilities }}'
  when: resources__enabled|bool
  tags: [ 'role::resources:capabilities' ]

# Execute custom shell commands [[[1
# This is not an alternative to a fully-fledged Ansible role.
- name: Execute shell commands
  include_tasks: 'shell_commands.yml'
  loop: '{{ q("flattened", resources__combined_commands) | debops.debops.parse_kv_items }}'
  loop_control:
    label: '{{ {"name": item.name} }}'
  when: resources__enabled|bool and
        item.name|d() and item.state|d('present') not in [ 'absent', 'ignore' ]
  no_log: '{{ debops__no_log | d(item.no_log) | d(False) }}'
  tags: [ 'role::resources:commands' ]

# DebOps post-hook [[[1
- name: Post hooks
  include: '{{ lookup("debops.debops.task_src", "resources/post_main.yml") }}'

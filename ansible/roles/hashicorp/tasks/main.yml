---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# Copyright (C) 2016      Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2016-2017 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

# APT package installation [[[1

- name: Install required packages
  package:
    name: '{{ q("flattened", (hashicorp__base_packages
                              + hashicorp__packages
                              + hashicorp__dependent_packages)) }}'
    state: 'present'
  register: hashicorp__register_packages
  until: hashicorp__register_packages is succeeded
  when: (hashicorp__applications or hashicorp__dependent_applications)


# User, group management [[[1

- name: Create HashiCorp group
  group:
    name: '{{ hashicorp__group }}'
    state: 'present'
    system: True
  when: (hashicorp__applications or hashicorp__dependent_applications)
  tags: [ 'role::hashicorp:download', 'role::hashicorp:verify' ]

- name: Create HashiCorp user
  user:
    name: '{{ hashicorp__user }}'
    group: '{{ hashicorp__group }}'
    home: '{{ hashicorp__home }}'
    comment: '{{ hashicorp__comment }}'
    shell: '{{ hashicorp__shell }}'
    system: True
    state: 'present'
  when: (hashicorp__applications or hashicorp__dependent_applications)
  tags: [ 'role::hashicorp:download', 'role::hashicorp:verify' ]


# Filesystem directory management [[[1

- name: Create source directories
  file:
    path: '{{ hashicorp__src + "/" + item + "/" + hashicorp__combined_version_map[item] }}'
    state: 'directory'
    owner: '{{ hashicorp__user }}'
    group: '{{ hashicorp__group }}'
    mode: '0755'
  with_items: '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
  when: (hashicorp__applications or hashicorp__dependent_applications)
  tags: [ 'role::hashicorp:download', 'role::hashicorp:verify' ]

- name: Create library directories
  file:
    path: '{{ hashicorp__lib + "/" + item + "/" + hashicorp__combined_version_map[item] }}'
    state: 'directory'
    owner: '{{ hashicorp__user }}'
    group: '{{ hashicorp__group }}'
    mode: '0750'
  with_items: '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
  when: (hashicorp__applications or hashicorp__dependent_applications)
  tags: [ 'role::hashicorp:unpack', 'role::hashicorp:install' ]

- name: Create Consul Web UI library directory
  file:
    path: '{{ hashicorp__lib + "/" + item + "/" + hashicorp__combined_version_map[item] + "/web_ui" }}'
    state: 'directory'
    owner: '{{ hashicorp__user }}'
    group: '{{ hashicorp__group }}'
    mode: '0755'
  with_items: '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
  when: (hashicorp__consul_webui|bool and item == 'consul')

- name: Create Consul Web UI directory
  file:
    path: '{{ hashicorp__consul_webui_path }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: (hashicorp__consul_webui|bool and
         ('consul' in (hashicorp__applications + hashicorp__dependent_applications | unique)))


# OpenPGP keys, application download and validation [[[1

- name: Download and validate the tarballs
  become: True
  become_user: '{{ hashicorp__user }}'
  when: (hashicorp__applications or hashicorp__dependent_applications)
  block:

    # HashiCorp application archive download [[[2

    - name: Download requested application files
      get_url:
        url: '{{ hashicorp__base_url + item.0 + "/" +
                 hashicorp__combined_version_map[item.0] + "/" + item.0 + "_" +
                 hashicorp__combined_version_map[item.0] + "_" + item.1 }}'
        dest: '{{ hashicorp__src + "/" + item.0 + "/" + hashicorp__combined_version_map[item.0] + "/" }}'
        mode: '0644'
      with_nested:
        - '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
        - [ '{{ hashicorp__tar_suffix }}', '{{ hashicorp__hash_suffix }}', '{{ hashicorp__sig_suffix }}' ]
      when: (ansible_local.hashicorp is not defined or
             (ansible_local.hashicorp|d() and ansible_local.hashicorp.applications|d() and
              (ansible_local.hashicorp.applications[item.0] is not defined or
               (ansible_local.hashicorp.applications[item.0] != hashicorp__combined_version_map[item.0]))))
      tags: [ 'role::hashicorp:download', 'role::hashicorp:verify' ]

    - name: Download Consul Web UI
      get_url:
        url: '{{ hashicorp__base_url + item.0 + "/" +
                 hashicorp__combined_version_map[item.0] + "/" + item.0 + "_" +
                 hashicorp__combined_version_map[item.0] + "_" + item.1 }}'
        dest: '{{ hashicorp__src + "/" + item.0 + "/" + hashicorp__combined_version_map[item.0] + "/" }}'
        mode: '0644'
      with_nested:
        - [ 'consul' ]
        - [ '{{ hashicorp__consul_webui_suffix }}' ]
      when: (hashicorp__consul_webui|bool and
             ('consul' in (hashicorp__applications + hashicorp__dependent_applications) | unique) and
              (ansible_local.hashicorp is not defined or
               (ansible_local.hashicorp|d() and ansible_local.hashicorp.applications|d() and
                (ansible_local.hashicorp.applications['consul'] is not defined or
                 (ansible_local.hashicorp.applications['consul'] != hashicorp__combined_version_map['consul'])) or
                not ansible_local.hashicorp.consul_webui | bool)))
      tags: [ 'role::hashicorp:download', 'role::hashicorp:verify' ]


    # SHA256 signature verification [[[2

    - name: Verify signatures with HashiCorp GPG key
      command: gpg --verify {{ item + '_' + hashicorp__combined_version_map[item] + '_' + hashicorp__sig_suffix }}
                            {{ item + '_' + hashicorp__combined_version_map[item] + '_' + hashicorp__hash_suffix }}
      args:
        chdir: '{{ hashicorp__src + "/" + item + "/" + hashicorp__combined_version_map[item] }}'
      with_items: '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
      register: hashicorp__register_signature
      changed_when: False
      failed_when: hashicorp__register_signature.rc != 0
      tags: [ 'role::hashicorp:verify' ]

    - name: Check file signatures
      shell: grep --file <(find . -type f -printf "%f$\n")
             {{ item + '_' + hashicorp__combined_version_map[item] + '_' + hashicorp__hash_suffix }}
             | sha256sum --check --status
      args:
        chdir: '{{ hashicorp__src + "/" + item + "/" + hashicorp__combined_version_map[item] }}'
        executable: 'bash'
      with_items: '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
      register: hashicorp__register_hash
      changed_when: False
      failed_when: hashicorp__register_hash.rc != 0
      tags: [ 'role::hashicorp:verify' ]


    # HashiCorp application archive unpack [[[2

    - name: Unpack the file archives
      unarchive:
        remote_src: True
        src: '{{ hashicorp__src + "/" + item + "/" + hashicorp__combined_version_map[item] + "/" +
                 item + "_" + hashicorp__combined_version_map[item] + "_" + hashicorp__tar_suffix }}'
        dest: '{{ hashicorp__lib + "/" + item + "/" + hashicorp__combined_version_map[item] }}'
        mode: 'u=rwX,g=rwX,o=rX'
        creates: '{{ hashicorp__lib + "/" + item + "/" + hashicorp__combined_version_map[item] + "/" +
                     ((hashicorp__combined_binary_map[item]
                       if hashicorp__combined_binary_map[item] is string
                       else hashicorp__combined_binary_map[item]|first)
                      if hashicorp__combined_binary_map[item]|d() else item) }}'
      with_items: '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
      register: hashicorp__register_unpack
      tags: [ 'role::hashicorp:unpack', 'role::hashicorp:install' ]

    - name: Unpack the Consul Web UI
      unarchive:
        copy: False
        src: '{{ hashicorp__src + "/" + item + "/" + hashicorp__combined_version_map[item] + "/" +
                 item + "_" + hashicorp__combined_version_map[item] + "_" + hashicorp__consul_webui_suffix }}'
        dest: '{{ hashicorp__lib + "/" + item + "/" + hashicorp__combined_version_map[item] + "/web_ui" + "/" }}'
        mode: 'u=rwX,g=rwX,o=rX'
        creates: '{{ hashicorp__lib + "/" + item + "/"
                     + hashicorp__combined_version_map[item] + "/web_ui/index.html" }}'
      with_items: '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
      register: hashicorp__register_unpack_webui
      when: hashicorp__consul_webui|bool and item == 'consul'
      tags: [ 'role::hashicorp:unpack', 'role::hashicorp:install' ]


# HashiCorp application installation [[[1

- name: Install HashiCorp applications
  shell: install --mode 755 --owner root --group root --target-directory {{ hashicorp__bin }}
         {{ ((hashicorp__combined_binary_map[item.0]
              if hashicorp__combined_binary_map[item.0] is string
              else hashicorp__combined_binary_map[item.0] | join(' '))
             if hashicorp__combined_binary_map[item.0]|d() else item.0) }}
         {% if item.0 == 'terraform' %}
         ; find . -maxdepth 1 -type f -name 'terraform-*'
                  -exec install -m 755 -o root -g root -t {{ hashicorp__bin }} {} +
         {% endif %}
  args:  # noqa no-handler
    chdir: '{{ hashicorp__lib + "/" + item.0 + "/" + hashicorp__combined_version_map[item.0] }}'
  with_together:
    - '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
    - '{{ hashicorp__register_unpack.results }}'
  when: (item.1 is changed or (ansible_local|d() and
         (ansible_local.hashicorp is not defined or
          (ansible_local.hashicorp|d() and ansible_local.hashicorp.applications|d() and
           (ansible_local.hashicorp.applications[item.0] is not defined or
            (ansible_local.hashicorp.applications[item.0] != hashicorp__combined_version_map[item.0]))))))
  tags: [ 'role::hashicorp:install' ]

- name: Synchronize Consul Web UI public directory
  shell: 'rsync --delete --recursive --prune-empty-dirs
         {{ hashicorp__lib + "/" + item + "/" + hashicorp__combined_version_map[item] + "/web_ui/" }}
         {{ hashicorp__consul_webui_path }} && chown -R root:root {{ hashicorp__consul_webui_path }}'
  with_items: '{{ (hashicorp__applications + hashicorp__dependent_applications) | unique }}'
  when: (hashicorp__consul_webui|bool and item == 'consul' and hashicorp__register_unpack_webui is changed)


# Ansible local facts [[[1

- name: Make sure Ansible fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: (hashicorp__applications or hashicorp__dependent_applications)

- name: Save HashiCorp local facts
  template:
    src: 'etc/ansible/facts.d/hashicorp.fact.j2'
    dest: '/etc/ansible/facts.d/hashicorp.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Refresh host facts' ]
  when: (hashicorp__applications or hashicorp__dependent_applications)
  tags: [ 'meta::facts' ]

- name: Reload facts if they were modified
  meta: 'flush_handlers'

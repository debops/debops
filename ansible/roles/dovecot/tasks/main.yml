---
# Copyright (C) 2015      Reto Gantenbein <reto.gantenbein@linuxmonk.ch>
# Copyright (C) 2017-2020 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2021      David HÃ¤rdeman <david@hardeman.nu>
# Copyright (C) 2015-2021 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  import_role:
    name: 'secret'

- name: Pre hooks
  include: "{{ lookup('debops.debops.task_src', 'dovecot/pre_main.yml') }}"

- name: Install Dovecot packages
  package:
    name: '{{ q("flattened", ([ "dovecot-core" ]
                              + ([ "dovecot-imapd" ]
                                 if ("imap" in dovecot__features or
                                     "imaps" in dovecot__features)
                                 else [])
                              + ([ "dovecot-pop3d" ]
                                 if ("pop3" in dovecot__features or
                                     "pop3s" in dovecot__features)
                                 else [])
                              + ([ "dovecot-lmtpd" ]
                                 if "lmtp" in dovecot__features
                                 else [])
                              + ([ "dovecot-mysql" ]
                                 if "mysql" in dovecot__user_accounts
                                 else [])
                              + ([ "dovecot-pgsql" ]
                                 if "pgsql" in dovecot__user_accounts
                                 else [])
                              + ([ "dovecot-sqlite" ]
                                 if "sqlite" in dovecot__user_accounts
                                 else [])
                              + ([ "dovecot-ldap" ]
                                 if "ldap" in dovecot__user_accounts
                                 else [])
                              + ([ "dovecot-managesieved" ]
                                 if "sieve" in dovecot__features
                                 else []))) }}'
    state: 'present'
  register: dovecot__register_packages
  until: dovecot__register_packages is succeeded

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save Dovecot local facts
  template:
    src: 'etc/ansible/facts.d/dovecot.fact.j2'
    dest: '/etc/ansible/facts.d/dovecot.fact'
    mode: '0755'
  notify: [ 'Refresh host facts' ]
  tags: [ 'meta::facts' ]

- name: Remove old diversions
  dpkg_divert:
    path: '/etc/dovecot/conf.d/{{ item }}'
    state: 'absent'
    delete: True
  loop:
    - '10-auth.conf'
    - '10-master.conf'
    - '10-mail.conf'
    - '10-ssl.conf'
    - '15-lda.conf'
    - '20-pop3.conf'
    - '20-imap.conf'
    - '20-lmtp.conf'
    - '20-managesieve.conf'
    - '90-sieve.conf'
    - '90-sieve-extprograms.conf'
    - 'auth-deny.conf.ext'
    - 'auth-system.conf.ext'
    - 'auth-sql.conf.ext'
    - 'auth-ldap.conf.ext'
    - 'auth-passwdfile.conf.ext'
    - 'auth-checkpassword.conf.ext'

- name: Uninstall disabled Dovecot protocols
  package:
    pkg: '{{ q("flattened", (([ "dovecot-imapd" ]
                              if ("imap" not in dovecot__features and
                                  "imaps" not in dovecot__features)
                              else [])
                             + ([ "dovecot-pop3d" ]
                                if ("pop3" not in dovecot__features and
                                    "pop3s" not in dovecot__features)
                                else [])
                             + ([ "dovecot-lmtpd" ]
                                if "lmtp" not in dovecot__features
                                else [])
                             + ([ "dovecot-mysql" ]
                                 if "mysql" not in dovecot__user_accounts
                                 else [])
                             + ([ "dovecot-pgsql" ]
                                if "pgsql" not in dovecot__user_accounts
                                else [])
                             + ([ "dovecot-sqlite" ]
                                if "sqlite" not in dovecot__user_accounts
                                else [])
                             + ([ "dovecot-ldap" ]
                                if ("ldap" not in dovecot__user_accounts)
                                else [])
                             + ([ "dovecot-managesieved" ]
                                if "sieve" not in dovecot__features
                                else []))) }}'
    state: 'absent'
  notify: [ 'Restart dovecot' ]

- name: Remove old local configuration
  file:
    path: '/etc/dovecot/local.conf'
    state: 'absent'
  notify: [ 'Restart dovecot' ]
  tags: [ "role::dovecot:conf" ]

- name: Generate Dovecot sql configuration
  template:
    src: "{{ lookup('debops.debops.template_src', 'etc/dovecot/dovecot-sql.conf.ext.j2') }}"
    dest: '/etc/dovecot/dovecot-sql.conf.ext'
    owner: 'root'
    group: 'root'
    mode: '0600'
  notify: [ 'Restart dovecot' ]
  when: "dovecot__user_accounts | d([]) | intersect(['mysql', 'pgsql', 'sqlite'])"
  tags: [ "role::dovecot:conf", "role::dovecot:conf:sql" ]

- name: Generate Dovecot ldap configuration
  template:
    src: "{{ lookup('debops.debops.template_src', 'etc/dovecot/' + item + '.j2') }}"
    dest: '/etc/dovecot/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0600'
  notify: [ 'Restart dovecot' ]
  loop:
    - 'dovecot-ldap-userdb.conf'
    - 'dovecot-ldap-passdb.conf'
  when: "'ldap' in dovecot__user_accounts"
  tags: [ "role::dovecot:conf", "role::dovecot:conf:ldap" ]

- name: Generate Dovecot deny user list
  template:
    src: "{{ lookup('debops.debops.template_src', 'etc/dovecot/dovecot.deny.j2') }}"
    dest: '/etc/dovecot/dovecot.deny'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Create private directory to store passwdfile
  file:
    path: "{{ dovecot__passwdfile_path }}"
    state: directory
    owner: 'root'
    group: 'dovecot'
    mode: '0650'
  when: "'passwdfile' in dovecot__user_accounts"

- name: Make sure virtual mail user POSIX group exists
  group:
    name: '{{ dovecot__vmail_posix_group |
              d(dovecot__vmail_posix_user) }}'
    state: 'present'
    system: True
  when: 'dovecot__vmail_enabled | d(False)'
  tags: [ 'role::dovecot:user', 'role::dovecot:group' ]

- name: Make sure virtual mail user POSIX system account exists
  user:
    name: '{{ dovecot__vmail_posix_user }}'
    state: 'present'
    comment: 'Postfix Virtual Mail user'
    group: '{{ dovecot__vmail_posix_group |
               d(dovecot__vmail_posix_user) }}'
    home: '{{ dovecot__vmail_base }}'
    create_home: True
    system: True
    shell: '/usr/sbin/nologin'
    skeleton: null
  when: 'dovecot__vmail_enabled | d(False)'
  tags: [ 'role::dovecot:user' ]

- name: "Make sure virtual mail user home directory ({{ dovecot__vmail_base }}) exists"
  file:
    dest: '{{ dovecot__vmail_base }}'
    state: 'directory'
    owner: '{{ dovecot__vmail_posix_user }}'
    group: '{{ dovecot__vmail_posix_group }}'
    mode: '0750'
  when: 'dovecot__vmail_enabled | d(False)'
  tags: [ 'role::dovecot:user' ]

- name: Make sure that PKI hook directory exists
  file:
    path: '{{ dovecot__pki_hook_path }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: dovecot__pki|bool

- name: Manage PKI dovecot hook
  template:
    src: 'etc/pki/hooks/dovecot.j2'
    dest: '{{ dovecot__pki_hook_path + "/" + dovecot__pki_hook_name }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: dovecot__pki|bool

- name: Ensure the PKI dovecot hook is absent
  file:
    path: '{{ dovecot__pki_hook_path + "/" + dovecot__pki_hook_name }}'
    state: 'absent'
  when: not (dovecot__pki|bool)

- name: Divert original Dovecot main configuration file
  dpkg_divert:
    path: '/etc/dovecot/dovecot.conf'
  notify: [ 'Restart dovecot' ]
  tags: [ "role::dovecot:conf" ]

- name: Generate Dovecot main configuration file
  template:
    src: "{{ lookup('debops.debops.template_src', 'etc/dovecot/dovecot.conf.j2') }}"
    dest: '/etc/dovecot/dovecot.conf'
    owner: 'root'
    group: 'dovecot'
    mode: '0640'
  notify: [ 'Restart dovecot' ]
  tags: [ "role::dovecot:conf" ]

- name: Update Ansible facts and restart dovecot, if necessary
  meta: 'flush_handlers'

- name: Post hooks
  include: "{{ lookup('debops.debops.task_src', 'dovecot/post_main.yml') }}"

---
# vim: foldmarker=[[[,]]]:foldmethod=marker

# Copyright (C) 2015-2017 Robin Schneider <ypid@riseup.net>
# Copyright (C) 2016-2017 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import DebOps global handlers
  import_role:
    name: 'global_handlers'

- name: Import DebOps secret role
  import_role:
    name: 'secret'

# System packages [[[
- name: Ensure specified packages are in there desired state
  package:
    name: '{{ q("flattened", foodsoft__base_packages) }}'
    state: '{{ "present" if (foodsoft__deploy_state == "present") else "absent" }}'
  register: foodsoft__register_packages
  until: foodsoft__register_packages is succeeded
  tags: [ 'role::foodsoft:pkgs' ]
# ]]]

# System user and group [[[
- name: Create Foodsoft system group
  group:
    name: '{{ foodsoft__group }}'
    state: '{{ "present" if (foodsoft__deploy_state == "present") else "absent" }}'
    system: True

- name: Create Foodsoft system user
  user:
    name: '{{ foodsoft__user }}'
    group: '{{ foodsoft__group }}'
    home: '{{ foodsoft__home_path }}'
    comment: '{{ foodsoft__gecos }}'
    shell: '{{ foodsoft__shell }}'
    state: '{{ "present" if (foodsoft__deploy_state == "present") else "absent" }}'
    system: True
# ]]]

- name: Clone Foodsoft git repository
  git:
    repo: '{{ foodsoft__git_repo }}'
    dest: '{{ foodsoft__git_dest }}'
    version: '{{ foodsoft__git_version }}'
    update: '{{ foodsoft__git_update|bool }}'
  become: True
  become_user: '{{ foodsoft__user }}'
  register: foodsoft__register_git
  when: (foodsoft__deploy_state == "present")

- name: Update Foodsoft directory permissions
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: '{{ foodsoft__user }}'
    group: '{{ foodsoft__webserver_user }}'
    mode: '0750'
  with_items:
    - '{{ foodsoft__home_path }}'
    - '{{ foodsoft__git_dest }}'

- name: Install Foodsoft dependencies via bundler
  bundler:
    chdir: '{{ foodsoft__git_dest }}'
    exclude_groups: '{{ foodsoft__bundler_exclude_groups }}'
    extra_args: '--without development --deployment'
    # user_install: True
  register: foodsoft__register_bundler
  until: foodsoft__register_bundler is succeeded
  tags: [ 'role::foodsoft:gems' ]
  # become: True
  # become_user: '{{ foodsoft__user }}'
  when: foodsoft__bundler_exclude_groups|d()

## https://github.com/foodcoops/foodsoft/blob/master/doc/SETUP_DEVELOPMENT.md#manual-configuration
- name: Configure Foodsoft
  template:
    src: 'srv/www/foodsoft/app/config/{{ item }}.j2'
    dest: '{{ foodsoft__git_dest }}/config/{{ item }}'
    owner: '{{ foodsoft__user }}'
    group: '{{ foodsoft__group }}'
    mode: '0640'
  tags: [ 'role::foodsoft:config' ]
  with_items:
    - 'database.yml'
    - 'app_config.yml'

## Workaround because there is not a single command for this: https://github.com/foodcoops/foodsoft/issues/385
- name: Generate secret token
  command: 'bundle exec rake secret'
  args:
    chdir: '{{ foodsoft__git_dest }}'
    creates: '{{ foodsoft__git_dest }}/config/initializers/secret_token.rb'
  register: foodsoft__register_secret_token
  # become: True
  # become_user: '{{ foodsoft__user }}'
  tags: [ 'role::foodsoft:gen_token' ]

- name: Check secret token
  ## Default is 128
  assert:  # noqa no-handler
    that:
      - 'foodsoft__register_secret_token.stdout|length > 120'
      - 'foodsoft__register_secret_token.stdout|length < 500'
  when: foodsoft__register_secret_token is changed
  tags: [ 'role::foodsoft:gen_token' ]

- name: Configure secret token for Foodsoft
  template:  # noqa no-handler
    src: 'srv/www/foodsoft/app/config/initializers/secret_token.rb.j2'
    dest: '{{ foodsoft__git_dest }}/config/initializers/secret_token.rb'
    owner: '{{ foodsoft__user }}'
    group: '{{ foodsoft__group }}'
    mode: '0640'
  tags: [ 'role::foodsoft:gen_token' ]
  when: foodsoft__register_secret_token is changed

- name: Create database schema and load defaults
  command: 'bundle exec rake db:setup'
  args:
    chdir: '{{ foodsoft__git_dest }}'
  # become: True
  # become_user: '{{ foodsoft__user }}'
  when: (not (ansible_local.foodsoft[foodsoft__database + "_initialized"]|bool
              if (ansible_local|d() and ansible_local.foodsoft|d() and
                  ansible_local.foodsoft[foodsoft__database + "_initialized"]|d())
              else False))

## Maybe only needed for https://github.com/foodcoop-adam/foodsoft
# - name: Setup admin user
  # command: 'rake db:seed'
  # args:
    # chdir: '{{ foodsoft__git_dest }}'
  # become: True
  # become_user: '{{ foodsoft__user }}'


## TODO: (optional) Get background jobs done

# Ansible local facts [[[
- name: Make sure that Ansible local facts directory is present
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: (foodsoft__deploy_state == "present")

- name: Save Foodsoft local facts
  template:
    src: 'etc/ansible/facts.d/foodsoft.fact.j2'
    dest: '/etc/ansible/facts.d/foodsoft.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Refresh host facts' ]
  when: (foodsoft__deploy_state == "present")
  tags: [ 'meta::facts' ]

- name: Gather facts if they were modified
  meta: 'flush_handlers'
# ]]]
